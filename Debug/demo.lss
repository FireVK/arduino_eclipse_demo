
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00003f40  00003fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049b  00800152  00800152  00004026  2**0
                  ALLOC
  3 .stab         0000e3a0  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000128e9  00000000  00000000  000123c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	91 c0       	rjmp	.+290    	; 0x128 <__bad_interrupt>
       6:	00 00       	nop
       8:	8f c0       	rjmp	.+286    	; 0x128 <__bad_interrupt>
       a:	00 00       	nop
       c:	02 c5       	rjmp	.+2564   	; 0xa12 <__vector_3>
       e:	00 00       	nop
      10:	29 c5       	rjmp	.+2642   	; 0xa64 <__vector_4>
      12:	00 00       	nop
      14:	50 c5       	rjmp	.+2720   	; 0xab6 <__vector_5>
      16:	00 00       	nop
      18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
      1e:	00 00       	nop
      20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c6       	rjmp	.+3532   	; 0xdfa <__vector_11>
      2e:	00 00       	nop
      30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
      32:	00 00       	nop
      34:	79 c0       	rjmp	.+242    	; 0x128 <__bad_interrupt>
      36:	00 00       	nop
      38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_16>
      44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 16 18 	jmp	0x302c	; 0x302c <__vector_18>
      4c:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_19>
      50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
      52:	00 00       	nop
      54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
      56:	00 00       	nop
      58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c4 c0       	rjmp	.+392    	; 0x1ea <__vector_24>
      62:	00 00       	nop
      64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
	...

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	7d 03       	fmul	r23, r21
      c4:	fc 15       	cp	r31, r12
      c6:	83 16       	cp	r8, r19
      c8:	b4 16       	cp	r11, r20
      ca:	e5 16       	cp	r14, r21
      cc:	28 17       	cp	r18, r24
      ce:	59 17       	cp	r21, r25
      d0:	8a 17       	cp	r24, r26
      d2:	bb 17       	cp	r27, r27
      d4:	2f 1b       	sub	r18, r31
      d6:	a3 1b       	sub	r26, r19

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	ff e3       	ldi	r31, 0x3F	; 63
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <.do_copy_data_start>

000000f0 <.do_copy_data_loop>:
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0

000000f4 <.do_copy_data_start>:
      f4:	a2 35       	cpi	r26, 0x52	; 82
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <.do_copy_data_loop>

000000fa <__do_clear_bss>:
      fa:	15 e0       	ldi	r17, 0x05	; 5
      fc:	a2 e5       	ldi	r26, 0x52	; 82
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	ad 3e       	cpi	r26, 0xED	; 237
     106:	b1 07       	cpc	r27, r17
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	c8 ed       	ldi	r28, 0xD8	; 216
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <.do_global_ctors_start>

00000112 <.do_global_ctors_loop>:
     112:	22 97       	sbiw	r28, 0x02	; 2
     114:	fe 01       	movw	r30, r28
     116:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__tablejump__>

0000011a <.do_global_ctors_start>:
     11a:	c2 3c       	cpi	r28, 0xC2	; 194
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <.do_global_ctors_loop>
     120:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <main>
     124:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <_exit>

00000128 <__bad_interrupt>:
     128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <memset>:
     12a:	dc 01       	movw	r26, r24
     12c:	01 c0       	rjmp	.+2      	; 0x130 <memset+0x6>
     12e:	6d 93       	st	X+, r22
     130:	41 50       	subi	r20, 0x01	; 1
     132:	50 40       	sbci	r21, 0x00	; 0
     134:	e0 f7       	brcc	.-8      	; 0x12e <memset+0x4>
     136:	08 95       	ret

00000138 <strlen>:
     138:	fc 01       	movw	r30, r24
     13a:	01 90       	ld	r0, Z+
     13c:	00 20       	and	r0, r0
     13e:	e9 f7       	brne	.-6      	; 0x13a <strlen+0x2>
     140:	80 95       	com	r24
     142:	90 95       	com	r25
     144:	8e 0f       	add	r24, r30
     146:	9f 1f       	adc	r25, r31
     148:	08 95       	ret

0000014a <loop>:
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);
}

// the loop routine runs over and over again forever:
void loop() {
     14a:	df 93       	push	r29
     14c:	cf 93       	push	r28
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
     152:	80 91 00 01 	lds	r24, 0x0100
     156:	90 91 01 01 	lds	r25, 0x0101
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
  delay(100);               // wait for a second
     160:	64 e6       	ldi	r22, 0x64	; 100
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <delay>
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
     16c:	80 91 00 01 	lds	r24, 0x0100
     170:	90 91 01 01 	lds	r25, 0x0101
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
  delay(100);               // wait for a second
     17a:	64 e6       	ldi	r22, 0x64	; 100
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <delay>
}
     186:	cf 91       	pop	r28
     188:	df 91       	pop	r29
     18a:	08 95       	ret

0000018c <setup>:
// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

// the setup routine runs once when you press reset:
void setup() {
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
	delay(500);
     194:	64 ef       	ldi	r22, 0xF4	; 244
     196:	71 e0       	ldi	r23, 0x01	; 1
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <delay>
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);
     1a0:	80 91 00 01 	lds	r24, 0x0100
     1a4:	90 91 01 01 	lds	r25, 0x0101
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <pinMode>
}
     1ae:	cf 91       	pop	r28
     1b0:	df 91       	pop	r29
     1b2:	08 95       	ret

000001b4 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     1b4:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     1b6:	61 32       	cpi	r22, 0x21	; 33
     1b8:	10 f0       	brcs	.+4      	; 0x1be <twi_transmit+0xa>
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     1be:	80 91 52 01 	lds	r24, 0x0152
     1c2:	84 30       	cpi	r24, 0x04	; 4
     1c4:	11 f0       	breq	.+4      	; 0x1ca <twi_transmit+0x16>
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     1ca:	60 93 9d 01 	sts	0x019D, r22
     1ce:	ac e7       	ldi	r26, 0x7C	; 124
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	84 2f       	mov	r24, r20
     1d4:	9c 01       	movw	r18, r24
     1d6:	f9 01       	movw	r30, r18
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     1da:	81 91       	ld	r24, Z+
     1dc:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     1de:	8e 2f       	mov	r24, r30
     1e0:	84 1b       	sub	r24, r20
     1e2:	86 17       	cp	r24, r22
     1e4:	d0 f3       	brcs	.-12     	; 0x1da <twi_transmit+0x26>
     1e6:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     1e8:	08 95       	ret

000001ea <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	3f 93       	push	r19
     1f8:	4f 93       	push	r20
     1fa:	5f 93       	push	r21
     1fc:	6f 93       	push	r22
     1fe:	7f 93       	push	r23
     200:	8f 93       	push	r24
     202:	9f 93       	push	r25
     204:	af 93       	push	r26
     206:	bf 93       	push	r27
     208:	ef 93       	push	r30
     20a:	ff 93       	push	r31
  switch(TW_STATUS){
     20c:	80 91 b9 00 	lds	r24, 0x00B9
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	88 7f       	andi	r24, 0xF8	; 248
     214:	90 70       	andi	r25, 0x00	; 0
     216:	80 36       	cpi	r24, 0x60	; 96
     218:	91 05       	cpc	r25, r1
     21a:	09 f4       	brne	.+2      	; 0x21e <__vector_24+0x34>
     21c:	f2 c0       	rjmp	.+484    	; 0x402 <__vector_24+0x218>
     21e:	81 36       	cpi	r24, 0x61	; 97
     220:	91 05       	cpc	r25, r1
     222:	cc f5       	brge	.+114    	; 0x296 <__vector_24+0xac>
     224:	88 32       	cpi	r24, 0x28	; 40
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <__vector_24+0x42>
     22a:	7b c0       	rjmp	.+246    	; 0x322 <__vector_24+0x138>
     22c:	89 32       	cpi	r24, 0x29	; 41
     22e:	91 05       	cpc	r25, r1
     230:	b4 f4       	brge	.+44     	; 0x25e <__vector_24+0x74>
     232:	80 31       	cpi	r24, 0x10	; 16
     234:	91 05       	cpc	r25, r1
     236:	09 f4       	brne	.+2      	; 0x23a <__vector_24+0x50>
     238:	6f c0       	rjmp	.+222    	; 0x318 <__vector_24+0x12e>
     23a:	81 31       	cpi	r24, 0x11	; 17
     23c:	91 05       	cpc	r25, r1
     23e:	3c f4       	brge	.+14     	; 0x24e <__vector_24+0x64>
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	09 f4       	brne	.+2      	; 0x246 <__vector_24+0x5c>
     244:	47 c1       	rjmp	.+654    	; 0x4d4 <__vector_24+0x2ea>
     246:	08 97       	sbiw	r24, 0x08	; 8
     248:	09 f0       	breq	.+2      	; 0x24c <__vector_24+0x62>
     24a:	4f c1       	rjmp	.+670    	; 0x4ea <__vector_24+0x300>
     24c:	65 c0       	rjmp	.+202    	; 0x318 <__vector_24+0x12e>
     24e:	88 31       	cpi	r24, 0x18	; 24
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <__vector_24+0x6c>
     254:	66 c0       	rjmp	.+204    	; 0x322 <__vector_24+0x138>
     256:	80 97       	sbiw	r24, 0x20	; 32
     258:	09 f0       	breq	.+2      	; 0x25c <__vector_24+0x72>
     25a:	47 c1       	rjmp	.+654    	; 0x4ea <__vector_24+0x300>
     25c:	82 c0       	rjmp	.+260    	; 0x362 <__vector_24+0x178>
     25e:	80 34       	cpi	r24, 0x40	; 64
     260:	91 05       	cpc	r25, r1
     262:	09 f4       	brne	.+2      	; 0x266 <__vector_24+0x7c>
     264:	a4 c0       	rjmp	.+328    	; 0x3ae <__vector_24+0x1c4>
     266:	81 34       	cpi	r24, 0x41	; 65
     268:	91 05       	cpc	r25, r1
     26a:	44 f4       	brge	.+16     	; 0x27c <__vector_24+0x92>
     26c:	80 33       	cpi	r24, 0x30	; 48
     26e:	91 05       	cpc	r25, r1
     270:	09 f4       	brne	.+2      	; 0x274 <__vector_24+0x8a>
     272:	82 c0       	rjmp	.+260    	; 0x378 <__vector_24+0x18e>
     274:	c8 97       	sbiw	r24, 0x38	; 56
     276:	09 f0       	breq	.+2      	; 0x27a <__vector_24+0x90>
     278:	38 c1       	rjmp	.+624    	; 0x4ea <__vector_24+0x300>
     27a:	89 c0       	rjmp	.+274    	; 0x38e <__vector_24+0x1a4>
     27c:	80 35       	cpi	r24, 0x50	; 80
     27e:	91 05       	cpc	r25, r1
     280:	09 f4       	brne	.+2      	; 0x284 <__vector_24+0x9a>
     282:	89 c0       	rjmp	.+274    	; 0x396 <__vector_24+0x1ac>
     284:	88 35       	cpi	r24, 0x58	; 88
     286:	91 05       	cpc	r25, r1
     288:	09 f4       	brne	.+2      	; 0x28c <__vector_24+0xa2>
     28a:	96 c0       	rjmp	.+300    	; 0x3b8 <__vector_24+0x1ce>
     28c:	88 34       	cpi	r24, 0x48	; 72
     28e:	91 05       	cpc	r25, r1
     290:	09 f0       	breq	.+2      	; 0x294 <__vector_24+0xaa>
     292:	2b c1       	rjmp	.+598    	; 0x4ea <__vector_24+0x300>
     294:	ae c0       	rjmp	.+348    	; 0x3f2 <__vector_24+0x208>
     296:	88 39       	cpi	r24, 0x98	; 152
     298:	91 05       	cpc	r25, r1
     29a:	09 f4       	brne	.+2      	; 0x29e <__vector_24+0xb4>
     29c:	13 c1       	rjmp	.+550    	; 0x4c4 <__vector_24+0x2da>
     29e:	89 39       	cpi	r24, 0x99	; 153
     2a0:	91 05       	cpc	r25, r1
     2a2:	ec f4       	brge	.+58     	; 0x2de <__vector_24+0xf4>
     2a4:	88 37       	cpi	r24, 0x78	; 120
     2a6:	91 05       	cpc	r25, r1
     2a8:	09 f4       	brne	.+2      	; 0x2ac <__vector_24+0xc2>
     2aa:	ab c0       	rjmp	.+342    	; 0x402 <__vector_24+0x218>
     2ac:	89 37       	cpi	r24, 0x79	; 121
     2ae:	91 05       	cpc	r25, r1
     2b0:	4c f4       	brge	.+18     	; 0x2c4 <__vector_24+0xda>
     2b2:	88 36       	cpi	r24, 0x68	; 104
     2b4:	91 05       	cpc	r25, r1
     2b6:	09 f4       	brne	.+2      	; 0x2ba <__vector_24+0xd0>
     2b8:	a4 c0       	rjmp	.+328    	; 0x402 <__vector_24+0x218>
     2ba:	80 37       	cpi	r24, 0x70	; 112
     2bc:	91 05       	cpc	r25, r1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_24+0xd8>
     2c0:	14 c1       	rjmp	.+552    	; 0x4ea <__vector_24+0x300>
     2c2:	9f c0       	rjmp	.+318    	; 0x402 <__vector_24+0x218>
     2c4:	88 38       	cpi	r24, 0x88	; 136
     2c6:	91 05       	cpc	r25, r1
     2c8:	09 f4       	brne	.+2      	; 0x2cc <__vector_24+0xe2>
     2ca:	fc c0       	rjmp	.+504    	; 0x4c4 <__vector_24+0x2da>
     2cc:	80 39       	cpi	r24, 0x90	; 144
     2ce:	91 05       	cpc	r25, r1
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <__vector_24+0xea>
     2d2:	9d c0       	rjmp	.+314    	; 0x40e <__vector_24+0x224>
     2d4:	80 38       	cpi	r24, 0x80	; 128
     2d6:	91 05       	cpc	r25, r1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <__vector_24+0xf2>
     2da:	07 c1       	rjmp	.+526    	; 0x4ea <__vector_24+0x300>
     2dc:	98 c0       	rjmp	.+304    	; 0x40e <__vector_24+0x224>
     2de:	80 3b       	cpi	r24, 0xB0	; 176
     2e0:	91 05       	cpc	r25, r1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <__vector_24+0xfc>
     2e4:	c6 c0       	rjmp	.+396    	; 0x472 <__vector_24+0x288>
     2e6:	81 3b       	cpi	r24, 0xB1	; 177
     2e8:	91 05       	cpc	r25, r1
     2ea:	4c f4       	brge	.+18     	; 0x2fe <__vector_24+0x114>
     2ec:	80 3a       	cpi	r24, 0xA0	; 160
     2ee:	91 05       	cpc	r25, r1
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <__vector_24+0x10a>
     2f2:	9f c0       	rjmp	.+318    	; 0x432 <__vector_24+0x248>
     2f4:	88 3a       	cpi	r24, 0xA8	; 168
     2f6:	91 05       	cpc	r25, r1
     2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_24+0x112>
     2fa:	f7 c0       	rjmp	.+494    	; 0x4ea <__vector_24+0x300>
     2fc:	ba c0       	rjmp	.+372    	; 0x472 <__vector_24+0x288>
     2fe:	80 3c       	cpi	r24, 0xC0	; 192
     300:	91 05       	cpc	r25, r1
     302:	09 f4       	brne	.+2      	; 0x306 <__vector_24+0x11c>
     304:	e3 c0       	rjmp	.+454    	; 0x4cc <__vector_24+0x2e2>
     306:	88 3c       	cpi	r24, 0xC8	; 200
     308:	91 05       	cpc	r25, r1
     30a:	09 f4       	brne	.+2      	; 0x30e <__vector_24+0x124>
     30c:	df c0       	rjmp	.+446    	; 0x4cc <__vector_24+0x2e2>
     30e:	88 3b       	cpi	r24, 0xB8	; 184
     310:	91 05       	cpc	r25, r1
     312:	09 f0       	breq	.+2      	; 0x316 <__vector_24+0x12c>
     314:	ea c0       	rjmp	.+468    	; 0x4ea <__vector_24+0x300>
     316:	c2 c0       	rjmp	.+388    	; 0x49c <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     318:	80 91 53 01 	lds	r24, 0x0153
     31c:	80 93 bb 00 	sts	0x00BB, r24
     320:	cf c0       	rjmp	.+414    	; 0x4c0 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     322:	90 91 7a 01 	lds	r25, 0x017A
     326:	80 91 7b 01 	lds	r24, 0x017B
     32a:	98 17       	cp	r25, r24
     32c:	68 f4       	brcc	.+26     	; 0x348 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     32e:	90 91 7a 01 	lds	r25, 0x017A
     332:	e9 2f       	mov	r30, r25
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e6 5a       	subi	r30, 0xA6	; 166
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	80 81       	ld	r24, Z
     33c:	80 93 bb 00 	sts	0x00BB, r24
     340:	9f 5f       	subi	r25, 0xFF	; 255
     342:	90 93 7a 01 	sts	0x017A, r25
     346:	bc c0       	rjmp	.+376    	; 0x4c0 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     348:	80 91 54 01 	lds	r24, 0x0154
     34c:	88 23       	and	r24, r24
     34e:	09 f4       	brne	.+2      	; 0x352 <__vector_24+0x168>
     350:	4b c0       	rjmp	.+150    	; 0x3e8 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     352:	85 ed       	ldi	r24, 0xD5	; 213
     354:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     358:	80 91 bc 00 	lds	r24, 0x00BC
     35c:	84 fd       	sbrc	r24, 4
     35e:	fc cf       	rjmp	.-8      	; 0x358 <__vector_24+0x16e>
     360:	c2 c0       	rjmp	.+388    	; 0x4e6 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     362:	80 e2       	ldi	r24, 0x20	; 32
     364:	80 93 bf 01 	sts	0x01BF, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     368:	85 ed       	ldi	r24, 0xD5	; 213
     36a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     36e:	80 91 bc 00 	lds	r24, 0x00BC
     372:	84 fd       	sbrc	r24, 4
     374:	fc cf       	rjmp	.-8      	; 0x36e <__vector_24+0x184>
     376:	b7 c0       	rjmp	.+366    	; 0x4e6 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	80 93 bf 01 	sts	0x01BF, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     37e:	85 ed       	ldi	r24, 0xD5	; 213
     380:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     384:	80 91 bc 00 	lds	r24, 0x00BC
     388:	84 fd       	sbrc	r24, 4
     38a:	fc cf       	rjmp	.-8      	; 0x384 <__vector_24+0x19a>
     38c:	ac c0       	rjmp	.+344    	; 0x4e6 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     38e:	88 e3       	ldi	r24, 0x38	; 56
     390:	80 93 bf 01 	sts	0x01BF, r24
     394:	9b c0       	rjmp	.+310    	; 0x4cc <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     396:	80 91 7a 01 	lds	r24, 0x017A
     39a:	90 91 bb 00 	lds	r25, 0x00BB
     39e:	e8 2f       	mov	r30, r24
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	e6 5a       	subi	r30, 0xA6	; 166
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	90 83       	st	Z, r25
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	80 93 7a 01 	sts	0x017A, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     3ae:	90 91 7a 01 	lds	r25, 0x017A
     3b2:	80 91 7b 01 	lds	r24, 0x017B
     3b6:	82 c0       	rjmp	.+260    	; 0x4bc <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     3b8:	80 91 7a 01 	lds	r24, 0x017A
     3bc:	90 91 bb 00 	lds	r25, 0x00BB
     3c0:	e8 2f       	mov	r30, r24
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	e6 5a       	subi	r30, 0xA6	; 166
     3c6:	fe 4f       	sbci	r31, 0xFE	; 254
     3c8:	90 83       	st	Z, r25
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	80 93 7a 01 	sts	0x017A, r24
	if (twi_sendStop)
     3d0:	80 91 54 01 	lds	r24, 0x0154
     3d4:	88 23       	and	r24, r24
     3d6:	41 f0       	breq	.+16     	; 0x3e8 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     3d8:	85 ed       	ldi	r24, 0xD5	; 213
     3da:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     3de:	80 91 bc 00 	lds	r24, 0x00BC
     3e2:	84 fd       	sbrc	r24, 4
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <__vector_24+0x1f4>
     3e6:	7f c0       	rjmp	.+254    	; 0x4e6 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 55 01 	sts	0x0155, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     3ee:	84 ea       	ldi	r24, 0xA4	; 164
     3f0:	6e c0       	rjmp	.+220    	; 0x4ce <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     3f2:	85 ed       	ldi	r24, 0xD5	; 213
     3f4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     3f8:	80 91 bc 00 	lds	r24, 0x00BC
     3fc:	84 fd       	sbrc	r24, 4
     3fe:	fc cf       	rjmp	.-8      	; 0x3f8 <__vector_24+0x20e>
     400:	72 c0       	rjmp	.+228    	; 0x4e6 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	80 93 52 01 	sts	0x0152, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     408:	10 92 be 01 	sts	0x01BE, r1
     40c:	59 c0       	rjmp	.+178    	; 0x4c0 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     40e:	80 91 be 01 	lds	r24, 0x01BE
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	08 f0       	brcs	.+2      	; 0x418 <__vector_24+0x22e>
     416:	56 c0       	rjmp	.+172    	; 0x4c4 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     418:	80 91 be 01 	lds	r24, 0x01BE
     41c:	90 91 bb 00 	lds	r25, 0x00BB
     420:	e8 2f       	mov	r30, r24
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	e2 56       	subi	r30, 0x62	; 98
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	90 83       	st	Z, r25
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 be 01 	sts	0x01BE, r24
     430:	47 c0       	rjmp	.+142    	; 0x4c0 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     432:	80 91 be 01 	lds	r24, 0x01BE
     436:	80 32       	cpi	r24, 0x20	; 32
     438:	30 f4       	brcc	.+12     	; 0x446 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     43a:	e0 91 be 01 	lds	r30, 0x01BE
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e2 56       	subi	r30, 0x62	; 98
     442:	fe 4f       	sbci	r31, 0xFE	; 254
     444:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     446:	85 ed       	ldi	r24, 0xD5	; 213
     448:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     44c:	80 91 bc 00 	lds	r24, 0x00BC
     450:	84 fd       	sbrc	r24, 4
     452:	fc cf       	rjmp	.-8      	; 0x44c <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     454:	10 92 52 01 	sts	0x0152, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     458:	60 91 be 01 	lds	r22, 0x01BE
     45c:	e0 91 58 01 	lds	r30, 0x0158
     460:	f0 91 59 01 	lds	r31, 0x0159
     464:	8e e9       	ldi	r24, 0x9E	; 158
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     46c:	10 92 be 01 	sts	0x01BE, r1
     470:	2d c0       	rjmp	.+90     	; 0x4cc <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	80 93 52 01 	sts	0x0152, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     478:	10 92 9c 01 	sts	0x019C, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     47c:	10 92 9d 01 	sts	0x019D, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     480:	e0 91 56 01 	lds	r30, 0x0156
     484:	f0 91 57 01 	lds	r31, 0x0157
     488:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     48a:	80 91 9d 01 	lds	r24, 0x019D
     48e:	88 23       	and	r24, r24
     490:	29 f4       	brne	.+10     	; 0x49c <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 9d 01 	sts	0x019D, r24
        twi_txBuffer[0] = 0x00;
     498:	10 92 7c 01 	sts	0x017C, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     49c:	90 91 9c 01 	lds	r25, 0x019C
     4a0:	e9 2f       	mov	r30, r25
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	e4 58       	subi	r30, 0x84	; 132
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	80 81       	ld	r24, Z
     4aa:	80 93 bb 00 	sts	0x00BB, r24
     4ae:	9f 5f       	subi	r25, 0xFF	; 255
     4b0:	90 93 9c 01 	sts	0x019C, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     4b4:	90 91 9c 01 	lds	r25, 0x019C
     4b8:	80 91 9d 01 	lds	r24, 0x019D
     4bc:	98 17       	cp	r25, r24
     4be:	10 f4       	brcc	.+4      	; 0x4c4 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4c4:	85 e8       	ldi	r24, 0x85	; 133
     4c6:	80 93 bc 00 	sts	0x00BC, r24
     4ca:	0f c0       	rjmp	.+30     	; 0x4ea <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     4cc:	85 ec       	ldi	r24, 0xC5	; 197
     4ce:	80 93 bc 00 	sts	0x00BC, r24
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     4d4:	10 92 bf 01 	sts	0x01BF, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4d8:	85 ed       	ldi	r24, 0xD5	; 213
     4da:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     4de:	80 91 bc 00 	lds	r24, 0x00BC
     4e2:	84 fd       	sbrc	r24, 4
     4e4:	fc cf       	rjmp	.-8      	; 0x4de <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     4e6:	10 92 52 01 	sts	0x0152, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     4ea:	ff 91       	pop	r31
     4ec:	ef 91       	pop	r30
     4ee:	bf 91       	pop	r27
     4f0:	af 91       	pop	r26
     4f2:	9f 91       	pop	r25
     4f4:	8f 91       	pop	r24
     4f6:	7f 91       	pop	r23
     4f8:	6f 91       	pop	r22
     4fa:	5f 91       	pop	r21
     4fc:	4f 91       	pop	r20
     4fe:	3f 91       	pop	r19
     500:	2f 91       	pop	r18
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	00 d0       	rcall	.+0      	; 0x512 <_ZN5Print13setWriteErrorEi+0x6>
     512:	00 d0       	rcall	.+0      	; 0x514 <_ZN5Print13setWriteErrorEi+0x8>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	7c 83       	std	Y+4, r23	; 0x04
     51e:	6b 83       	std	Y+3, r22	; 0x03
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	fa 81       	ldd	r31, Y+2	; 0x02
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	93 83       	std	Z+3, r25	; 0x03
     52a:	82 83       	std	Z+2, r24	; 0x02
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	08 95       	ret

0000053a <_ZN5PrintC2Ev>:
  public:
    Print() : write_error(0) {}
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	00 d0       	rcall	.+0      	; 0x540 <_ZN5PrintC2Ev+0x6>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	e9 81       	ldd	r30, Y+1	; 0x01
     54a:	fa 81       	ldd	r31, Y+2	; 0x02
     54c:	8e e4       	ldi	r24, 0x4E	; 78
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	91 83       	std	Z+1, r25	; 0x01
     552:	80 83       	st	Z, r24
     554:	e9 81       	ldd	r30, Y+1	; 0x01
     556:	fa 81       	ldd	r31, Y+2	; 0x02
     558:	13 82       	std	Z+3, r1	; 0x03
     55a:	12 82       	std	Z+2, r1	; 0x02
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	cf 91       	pop	r28
     562:	df 91       	pop	r29
     564:	08 95       	ret

00000566 <_ZN6StreamC2Ev>:
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	00 d0       	rcall	.+0      	; 0x56c <_ZN6StreamC2Ev+0x6>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	e0 df       	rcall	.-64     	; 0x53a <_ZN5PrintC2Ev>
     57a:	e9 81       	ldd	r30, Y+1	; 0x01
     57c:	fa 81       	ldd	r31, Y+2	; 0x02
     57e:	8a e1       	ldi	r24, 0x1A	; 26
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	91 83       	std	Z+1, r25	; 0x01
     584:	80 83       	st	Z, r24
     586:	e9 81       	ldd	r30, Y+1	; 0x01
     588:	fa 81       	ldd	r31, Y+2	; 0x02
     58a:	88 ee       	ldi	r24, 0xE8	; 232
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	84 83       	std	Z+4, r24	; 0x04
     594:	95 83       	std	Z+5, r25	; 0x05
     596:	a6 83       	std	Z+6, r26	; 0x06
     598:	b7 83       	std	Z+7, r27	; 0x07
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <_ZN7TwoWireC1Ev>:
    int timedRead();    // private method to read stream with timeout
    int timedPeek();    // private method to peek stream with timeout
    int peekNextDigit(); // returns the next numeric digit in the stream or -1 if timeout

  public:
    virtual int available() = 0;
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <_ZN7TwoWireC1Ev+0x6>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	d7 df       	rcall	.-82     	; 0x566 <_ZN6StreamC2Ev>
     5b8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ba:	fa 81       	ldd	r31, Y+2	; 0x02
     5bc:	8a e0       	ldi	r24, 0x0A	; 10
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
     5c4:	0f 90       	pop	r0
    virtual int read() = 0;
    virtual int peek() = 0;
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <_ZN7TwoWire9availableEv>:
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <_ZN7TwoWire9availableEv+0x6>
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	80 91 e1 01 	lds	r24, 0x01E1
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	80 91 e0 01 	lds	r24, 0x01E0
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	48 1b       	sub	r20, r24
     5f0:	59 0b       	sbc	r21, r25
     5f2:	ca 01       	movw	r24, r20
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	cf 91       	pop	r28
     5fa:	df 91       	pop	r29
     5fc:	08 95       	ret

000005fe <_ZN7TwoWire4readEv>:
     5fe:	df 93       	push	r29
     600:	cf 93       	push	r28
     602:	00 d0       	rcall	.+0      	; 0x604 <_ZN7TwoWire4readEv+0x6>
     604:	00 d0       	rcall	.+0      	; 0x606 <_ZN7TwoWire4readEv+0x8>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	9c 83       	std	Y+4, r25	; 0x04
     60c:	8b 83       	std	Y+3, r24	; 0x03
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	90 91 e0 01 	lds	r25, 0x01E0
     61a:	80 91 e1 01 	lds	r24, 0x01E1
     61e:	98 17       	cp	r25, r24
     620:	88 f4       	brcc	.+34     	; 0x644 <_ZN7TwoWire4readEv+0x46>
     622:	80 91 e0 01 	lds	r24, 0x01E0
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	fc 01       	movw	r30, r24
     62c:	e0 54       	subi	r30, 0x40	; 64
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	80 81       	ld	r24, Z
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	80 91 e0 01 	lds	r24, 0x01E0
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	80 93 e0 01 	sts	0x01E0, r24
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	08 95       	ret

00000656 <_ZN7TwoWire4peekEv>:
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <_ZN7TwoWire4peekEv+0x6>
     65c:	00 d0       	rcall	.+0      	; 0x65e <_ZN7TwoWire4peekEv+0x8>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	9c 83       	std	Y+4, r25	; 0x04
     664:	8b 83       	std	Y+3, r24	; 0x03
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	9a 83       	std	Y+2, r25	; 0x02
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	90 91 e0 01 	lds	r25, 0x01E0
     672:	80 91 e1 01 	lds	r24, 0x01E1
     676:	98 17       	cp	r25, r24
     678:	60 f4       	brcc	.+24     	; 0x692 <_ZN7TwoWire4peekEv+0x3c>
     67a:	80 91 e0 01 	lds	r24, 0x01E0
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	fc 01       	movw	r30, r24
     684:	e0 54       	subi	r30, 0x40	; 64
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	80 81       	ld	r24, Z
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <_ZN7TwoWire5flushEv>:
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN7TwoWire5flushEv+0x6>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <_Z41__static_initialization_and_destruction_0ii>:
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <_Z41__static_initialization_and_destruction_0ii+0x6>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_Z41__static_initialization_and_destruction_0ii+0x8>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	7c 83       	std	Y+4, r23	; 0x04
     6ce:	6b 83       	std	Y+3, r22	; 0x03
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	91 05       	cpc	r25, r1
     6d8:	49 f4       	brne	.+18     	; 0x6ec <_Z41__static_initialization_and_destruction_0ii+0x30>
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	8f 3f       	cpi	r24, 0xFF	; 255
     6e2:	92 07       	cpc	r25, r18
     6e4:	19 f4       	brne	.+6      	; 0x6ec <_Z41__static_initialization_and_destruction_0ii+0x30>
     6e6:	85 e0       	ldi	r24, 0x05	; 5
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	5c df       	rcall	.-328    	; 0x5a4 <_ZN7TwoWireC1Ev>
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	cf 91       	pop	r28
     6f6:	df 91       	pop	r29
     6f8:	08 95       	ret

000006fa <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	6f ef       	ldi	r22, 0xFF	; 255
     708:	7f ef       	ldi	r23, 0xFF	; 255
     70a:	d8 df       	rcall	.-80     	; 0x6bc <_Z41__static_initialization_and_destruction_0ii>
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <_ZN7TwoWire5writeEPKhj>:
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	28 97       	sbiw	r28, 0x08	; 8
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	9c 83       	std	Y+4, r25	; 0x04
     728:	8b 83       	std	Y+3, r24	; 0x03
     72a:	7e 83       	std	Y+6, r23	; 0x06
     72c:	6d 83       	std	Y+5, r22	; 0x05
     72e:	58 87       	std	Y+8, r21	; 0x08
     730:	4f 83       	std	Y+7, r20	; 0x07
     732:	80 91 04 02 	lds	r24, 0x0204
     736:	88 23       	and	r24, r24
     738:	21 f1       	breq	.+72     	; 0x782 <_ZN7TwoWire5writeEPKhj+0x70>
     73a:	1a 82       	std	Y+2, r1	; 0x02
     73c:	19 82       	std	Y+1, r1	; 0x01
     73e:	19 c0       	rjmp	.+50     	; 0x772 <_ZN7TwoWire5writeEPKhj+0x60>
     740:	eb 81       	ldd	r30, Y+3	; 0x03
     742:	fc 81       	ldd	r31, Y+4	; 0x04
     744:	01 90       	ld	r0, Z+
     746:	f0 81       	ld	r31, Z
     748:	e0 2d       	mov	r30, r0
     74a:	40 81       	ld	r20, Z
     74c:	51 81       	ldd	r21, Z+1	; 0x01
     74e:	2d 81       	ldd	r18, Y+5	; 0x05
     750:	3e 81       	ldd	r19, Y+6	; 0x06
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	f9 01       	movw	r30, r18
     758:	e8 0f       	add	r30, r24
     75a:	f9 1f       	adc	r31, r25
     75c:	20 81       	ld	r18, Z
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	9c 81       	ldd	r25, Y+4	; 0x04
     762:	62 2f       	mov	r22, r18
     764:	fa 01       	movw	r30, r20
     766:	09 95       	icall
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	29 81       	ldd	r18, Y+1	; 0x01
     774:	3a 81       	ldd	r19, Y+2	; 0x02
     776:	8f 81       	ldd	r24, Y+7	; 0x07
     778:	98 85       	ldd	r25, Y+8	; 0x08
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	00 f3       	brcs	.-64     	; 0x740 <_ZN7TwoWire5writeEPKhj+0x2e>
     780:	05 c0       	rjmp	.+10     	; 0x78c <_ZN7TwoWire5writeEPKhj+0x7a>
     782:	2f 81       	ldd	r18, Y+7	; 0x07
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	9e 81       	ldd	r25, Y+6	; 0x06
     788:	62 2f       	mov	r22, r18
     78a:	14 dd       	rcall	.-1496   	; 0x1b4 <twi_transmit>
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	98 85       	ldd	r25, Y+8	; 0x08
     790:	28 96       	adiw	r28, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	08 95       	ret

000007a2 <_ZN7TwoWire5writeEh>:
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <_ZN7TwoWire5writeEh+0x6>
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <_ZN7TwoWire5writeEh+0x8>
     7aa:	0f 92       	push	r0
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	6b 83       	std	Y+3, r22	; 0x03
     7b6:	80 91 04 02 	lds	r24, 0x0204
     7ba:	88 23       	and	r24, r24
     7bc:	f9 f0       	breq	.+62     	; 0x7fc <_ZN7TwoWire5writeEh+0x5a>
     7be:	80 91 03 02 	lds	r24, 0x0203
     7c2:	80 32       	cpi	r24, 0x20	; 32
     7c4:	40 f0       	brcs	.+16     	; 0x7d6 <_ZN7TwoWire5writeEh+0x34>
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	9e de       	rcall	.-708    	; 0x50c <_ZN5Print13setWriteErrorEi>
     7d0:	1d 82       	std	Y+5, r1	; 0x05
     7d2:	1c 82       	std	Y+4, r1	; 0x04
     7d4:	1b c0       	rjmp	.+54     	; 0x80c <_ZN7TwoWire5writeEh+0x6a>
     7d6:	80 91 02 02 	lds	r24, 0x0202
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2b 81       	ldd	r18, Y+3	; 0x03
     7e0:	fc 01       	movw	r30, r24
     7e2:	ee 51       	subi	r30, 0x1E	; 30
     7e4:	fe 4f       	sbci	r31, 0xFE	; 254
     7e6:	20 83       	st	Z, r18
     7e8:	80 91 02 02 	lds	r24, 0x0202
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	80 93 02 02 	sts	0x0202, r24
     7f2:	80 91 02 02 	lds	r24, 0x0202
     7f6:	80 93 03 02 	sts	0x0203, r24
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <_ZN7TwoWire5writeEh+0x62>
     7fc:	ce 01       	movw	r24, r28
     7fe:	03 96       	adiw	r24, 0x03	; 3
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	d8 dc       	rcall	.-1616   	; 0x1b4 <twi_transmit>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9d 83       	std	Y+5, r25	; 0x05
     80a:	8c 83       	std	Y+4, r24	; 0x04
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	9d 81       	ldd	r25, Y+5	; 0x05
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <_Z10DebugPulsehh>:
//
// Debugging
//
// This function generates a brief pulse
// for debugging or measuring on an oscilloscope.
inline void DebugPulse(uint8_t pin, uint8_t count)
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <_Z10DebugPulsehh+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	6a 83       	std	Y+2, r22	; 0x02
  {
    *pport = val | digitalPinToBitMask(pin);
    *pport = val;
  }
#endif
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	cf 91       	pop	r28
     834:	df 91       	pop	r29
     836:	08 95       	ret

00000838 <_ZN14SoftwareSerial10tunedDelayEj>:
//
// Private methods
//

/* static */ 
inline void SoftwareSerial::tunedDelay(uint16_t delay) { 
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	00 d0       	rcall	.+0      	; 0x83e <_ZN14SoftwareSerial10tunedDelayEj+0x6>
     83e:	0f 92       	push	r0
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	9b 83       	std	Y+3, r25	; 0x03
     846:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t tmp=0;
     848:	19 82       	std	Y+1, r1	; 0x01
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "=r" (delay), "+a" (tmp)
	: "0" (delay)
  );
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	29 81       	ldd	r18, Y+1	; 0x01
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	2f ef       	ldi	r18, 0xFF	; 255
     854:	8f 3f       	cpi	r24, 0xFF	; 255
     856:	92 07       	cpc	r25, r18
     858:	d9 f7       	brne	.-10     	; 0x850 <_ZN14SoftwareSerial10tunedDelayEj+0x18>
     85a:	9b 83       	std	Y+3, r25	; 0x03
     85c:	8a 83       	std	Y+2, r24	; 0x02
     85e:	29 83       	std	Y+1, r18	; 0x01
//     "cpc %B0, %1 \n\t"
//     "brne .-10 \n\t"
//     : "+r" (delay), "+a" (tmp)
//     : "0" (delay)
//     );
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <_ZN14SoftwareSerial11rx_pin_readEv>:
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <_ZN14SoftwareSerial11rx_pin_readEv+0x6>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
{
  return *_receivePortRegister & _receiveBitMask;
     87a:	e9 81       	ldd	r30, Y+1	; 0x01
     87c:	fa 81       	ldd	r31, Y+2	; 0x02
     87e:	06 84       	ldd	r0, Z+14	; 0x0e
     880:	f7 85       	ldd	r31, Z+15	; 0x0f
     882:	e0 2d       	mov	r30, r0
     884:	90 81       	ld	r25, Z
     886:	e9 81       	ldd	r30, Y+1	; 0x01
     888:	fa 81       	ldd	r31, Y+2	; 0x02
     88a:	85 85       	ldd	r24, Z+13	; 0x0d
     88c:	89 23       	and	r24, r25
}
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <_ZN14SoftwareSerial4recvEv>:
}

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
     898:	df 93       	push	r29
     89a:	cf 93       	push	r28
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	29 97       	sbiw	r28, 0x09	; 9
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	9d 83       	std	Y+5, r25	; 0x05
     8ae:	8c 83       	std	Y+4, r24	; 0x04
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     8b0:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     8b2:	ec 81       	ldd	r30, Y+4	; 0x04
     8b4:	fd 81       	ldd	r31, Y+5	; 0x05
     8b6:	83 8d       	ldd	r24, Z+27	; 0x1b
     8b8:	86 95       	lsr	r24
     8ba:	81 70       	andi	r24, 0x01	; 1
     8bc:	88 23       	and	r24, r24
     8be:	61 f0       	breq	.+24     	; 0x8d8 <_ZN14SoftwareSerial4recvEv+0x40>
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	d3 df       	rcall	.-90     	; 0x86c <_ZN14SoftwareSerial11rx_pin_readEv>
     8c6:	88 87       	std	Y+8, r24	; 0x08
     8c8:	88 85       	ldd	r24, Y+8	; 0x08
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <_ZN14SoftwareSerial4recvEv+0x3a>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	88 87       	std	Y+8, r24	; 0x08
     8d2:	88 85       	ldd	r24, Y+8	; 0x08
     8d4:	8f 83       	std	Y+7, r24	; 0x07
     8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <_ZN14SoftwareSerial4recvEv+0x50>
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	9d 81       	ldd	r25, Y+5	; 0x05
     8dc:	c7 df       	rcall	.-114    	; 0x86c <_ZN14SoftwareSerial11rx_pin_readEv>
     8de:	1f 82       	std	Y+7, r1	; 0x07
     8e0:	88 23       	and	r24, r24
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <_ZN14SoftwareSerial4recvEv+0x50>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	8f 83       	std	Y+7, r24	; 0x07
     8e8:	8f 81       	ldd	r24, Y+7	; 0x07
     8ea:	88 23       	and	r24, r24
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <_ZN14SoftwareSerial4recvEv+0x58>
     8ee:	76 c0       	rjmp	.+236    	; 0x9dc <__stack+0xdd>
     8f0:	ec 81       	ldd	r30, Y+4	; 0x04
     8f2:	fd 81       	ldd	r31, Y+5	; 0x05
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     8f4:	83 89       	ldd	r24, Z+19	; 0x13
     8f6:	94 89       	ldd	r25, Z+20	; 0x14
     8f8:	9f df       	rcall	.-194    	; 0x838 <_ZN14SoftwareSerial10tunedDelayEj>
     8fa:	8d e0       	ldi	r24, 0x0D	; 13
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	90 df       	rcall	.-224    	; 0x820 <_Z10DebugPulsehh>
    DebugPulse(_DEBUG_PIN2, 1);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	23 c0       	rjmp	.+70     	; 0x94c <__stack+0x4d>
     906:	ec 81       	ldd	r30, Y+4	; 0x04

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     908:	fd 81       	ldd	r31, Y+5	; 0x05
     90a:	85 89       	ldd	r24, Z+21	; 0x15
     90c:	96 89       	ldd	r25, Z+22	; 0x16
    {
      tunedDelay(_rx_delay_intrabit);
     90e:	94 df       	rcall	.-216    	; 0x838 <_ZN14SoftwareSerial10tunedDelayEj>
     910:	8d e0       	ldi	r24, 0x0D	; 13
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	85 df       	rcall	.-246    	; 0x820 <_Z10DebugPulsehh>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	80 95       	com	r24
      DebugPulse(_DEBUG_PIN2, 1);
     91a:	89 83       	std	Y+1, r24	; 0x01
     91c:	8c 81       	ldd	r24, Y+4	; 0x04
     91e:	9d 81       	ldd	r25, Y+5	; 0x05
     920:	a5 df       	rcall	.-182    	; 0x86c <_ZN14SoftwareSerial11rx_pin_readEv>
      uint8_t noti = ~i;
     922:	89 87       	std	Y+9, r24	; 0x09
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	88 23       	and	r24, r24
      if (rx_pin_read())
     928:	11 f0       	breq	.+4      	; 0x92e <__stack+0x2f>
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	89 87       	std	Y+9, r24	; 0x09
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	88 23       	and	r24, r24
     932:	29 f0       	breq	.+10     	; 0x93e <__stack+0x3f>
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	89 2b       	or	r24, r25
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0x47>
     93e:	8b 81       	ldd	r24, Y+3	; 0x03
     940:	99 81       	ldd	r25, Y+1	; 0x01
        d |= i;
     942:	89 23       	and	r24, r25
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	88 0f       	add	r24, r24
     94a:	8a 83       	std	Y+2, r24	; 0x02
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	88 23       	and	r24, r24
     950:	d1 f6       	brne	.-76     	; 0x906 <__stack+0x7>
     952:	ec 81       	ldd	r30, Y+4	; 0x04
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     954:	fd 81       	ldd	r31, Y+5	; 0x05
     956:	87 89       	ldd	r24, Z+23	; 0x17
     958:	90 8d       	ldd	r25, Z+24	; 0x18
     95a:	6e df       	rcall	.-292    	; 0x838 <_ZN14SoftwareSerial10tunedDelayEj>
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	61 e0       	ldi	r22, 0x01	; 1
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     960:	5f df       	rcall	.-322    	; 0x820 <_Z10DebugPulsehh>
     962:	ec 81       	ldd	r30, Y+4	; 0x04
     964:	fd 81       	ldd	r31, Y+5	; 0x05
     966:	83 8d       	ldd	r24, Z+27	; 0x1b
     968:	86 95       	lsr	r24
     96a:	81 70       	andi	r24, 0x01	; 1
    DebugPulse(_DEBUG_PIN2, 1);
     96c:	88 23       	and	r24, r24
     96e:	19 f0       	breq	.+6      	; 0x976 <__stack+0x77>
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	80 95       	com	r24

    if (_inverse_logic)
     974:	8b 83       	std	Y+3, r24	; 0x03
     976:	80 91 53 02 	lds	r24, 0x0253
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	20 e4       	ldi	r18, 0x40	; 64
      d = ~d;
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	b9 01       	movw	r22, r18
     986:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divmodhi4>

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     98a:	9c 01       	movw	r18, r24
     98c:	80 91 54 02 	lds	r24, 0x0254
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	1e 82       	std	Y+6, r1	; 0x06
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	11 f0       	breq	.+4      	; 0x9a0 <__stack+0xa1>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	8e 83       	std	Y+6, r24	; 0x06
     9a0:	8e 81       	ldd	r24, Y+6	; 0x06
     9a2:	88 23       	and	r24, r24
     9a4:	b1 f0       	breq	.+44     	; 0x9d2 <__stack+0xd3>
     9a6:	80 91 53 02 	lds	r24, 0x0253
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2b 81       	ldd	r18, Y+3	; 0x03
     9b0:	fc 01       	movw	r30, r24
     9b2:	ed 5e       	subi	r30, 0xED	; 237
     9b4:	fd 4f       	sbci	r31, 0xFD	; 253
     9b6:	20 83       	st	Z, r18
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     9b8:	80 91 53 02 	lds	r24, 0x0253
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	20 e4       	ldi	r18, 0x40	; 64
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	b9 01       	movw	r22, r18
     9c8:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divmodhi4>
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     9cc:	80 93 53 02 	sts	0x0253, r24
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__stack+0xdd>
     9d2:	ec 81       	ldd	r30, Y+4	; 0x04
     9d4:	fd 81       	ldd	r31, Y+5	; 0x05
     9d6:	83 8d       	ldd	r24, Z+27	; 0x1b
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	83 8f       	std	Z+27, r24	; 0x1b
     9dc:	29 96       	adiw	r28, 0x09	; 9
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <_ZN14SoftwareSerial16handle_interruptEv>:
//
// Interrupt handling
//

/* static */
inline void SoftwareSerial::handle_interrupt()
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
{
  if (active_object)
     9f6:	80 91 11 02 	lds	r24, 0x0211
     9fa:	90 91 12 02 	lds	r25, 0x0212
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	29 f0       	breq	.+10     	; 0xa0c <_ZN14SoftwareSerial16handle_interruptEv+0x1e>
  {
    active_object->recv();
     a02:	80 91 11 02 	lds	r24, 0x0211
     a06:	90 91 12 02 	lds	r25, 0x0212
     a0a:	46 df       	rcall	.-372    	; 0x898 <_ZN14SoftwareSerial4recvEv>
     a0c:	cf 91       	pop	r28
  }
}
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <__vector_3>:

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	2f 93       	push	r18
     a1e:	3f 93       	push	r19
     a20:	4f 93       	push	r20
     a22:	5f 93       	push	r21
     a24:	6f 93       	push	r22
     a26:	7f 93       	push	r23
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	af 93       	push	r26
     a2e:	bf 93       	push	r27
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
{
  SoftwareSerial::handle_interrupt();
     a3c:	d8 df       	rcall	.-80     	; 0x9ee <_ZN14SoftwareSerial16handle_interruptEv>
     a3e:	cf 91       	pop	r28
}
     a40:	df 91       	pop	r29
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	df 93       	push	r29
     a88:	cf 93       	push	r28
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
{
  SoftwareSerial::handle_interrupt();
     a8e:	af df       	rcall	.-162    	; 0x9ee <_ZN14SoftwareSerial16handle_interruptEv>
     a90:	cf 91       	pop	r28
}
     a92:	df 91       	pop	r29
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
{
  SoftwareSerial::handle_interrupt();
     ae0:	86 df       	rcall	.-244    	; 0x9ee <_ZN14SoftwareSerial16handle_interruptEv>
     ae2:	cf 91       	pop	r28
}
     ae4:	df 91       	pop	r29
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MIN() (MIN_PULSE_WIDTH - this->min * 4)  // minimum value in uS for this servo
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo 

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	2b 97       	sbiw	r28, 0x0b	; 11
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	7c 83       	std	Y+4, r23	; 0x04
     b22:	6b 83       	std	Y+3, r22	; 0x03
     b24:	5e 83       	std	Y+6, r21	; 0x06
     b26:	4d 83       	std	Y+5, r20	; 0x05
{
  if( Channel[timer] < 0 )
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	fc 01       	movw	r30, r24
     b2e:	e6 58       	subi	r30, 0x86	; 134
     b30:	fd 4f       	sbci	r31, 0xFD	; 253
     b32:	80 81       	ld	r24, Z
     b34:	1b 86       	std	Y+11, r1	; 0x0b
     b36:	88 23       	and	r24, r24
     b38:	14 f4       	brge	.+4      	; 0xb3e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x36>
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	2b 87       	std	Y+11, r18	; 0x0b
     b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b40:	88 23       	and	r24, r24
     b42:	29 f0       	breq	.+10     	; 0xb4e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x46>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     b44:	eb 81       	ldd	r30, Y+3	; 0x03
     b46:	fc 81       	ldd	r31, Y+4	; 0x04
     b48:	11 82       	std	Z+1, r1	; 0x01
     b4a:	10 82       	st	Z, r1
     b4c:	70 c0       	rjmp	.+224    	; 0xc2e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x126>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     b4e:	29 81       	ldd	r18, Y+1	; 0x01
     b50:	3a 81       	ldd	r19, Y+2	; 0x02
     b52:	c9 01       	movw	r24, r18
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	9c 01       	movw	r18, r24
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	e6 58       	subi	r30, 0x86	; 134
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
     b70:	80 81       	ld	r24, Z
     b72:	99 27       	eor	r25, r25
     b74:	87 fd       	sbrc	r24, 7
     b76:	90 95       	com	r25
     b78:	28 0f       	add	r18, r24
     b7a:	39 1f       	adc	r19, r25
     b7c:	80 91 55 02 	lds	r24, 0x0255
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	54 f5       	brge	.+84     	; 0xbde <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd6>
     b8a:	29 81       	ldd	r18, Y+1	; 0x01
     b8c:	3a 81       	ldd	r19, Y+2	; 0x02
     b8e:	c9 01       	movw	r24, r18
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	9c 01       	movw	r18, r24
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	fc 01       	movw	r30, r24
     ba8:	e6 58       	subi	r30, 0x86	; 134
     baa:	fd 4f       	sbci	r31, 0xFD	; 253
     bac:	80 81       	ld	r24, Z
     bae:	99 27       	eor	r25, r25
     bb0:	87 fd       	sbrc	r24, 7
     bb2:	90 95       	com	r25
     bb4:	28 0f       	add	r18, r24
     bb6:	39 1f       	adc	r19, r25
     bb8:	c9 01       	movw	r24, r18
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	fc 01       	movw	r30, r24
     bc4:	ea 5a       	subi	r30, 0xAA	; 170
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	80 81       	ld	r24, Z
     bca:	82 95       	swap	r24
     bcc:	86 95       	lsr	r24
     bce:	86 95       	lsr	r24
     bd0:	83 70       	andi	r24, 0x03	; 3
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	19 f4       	brne	.+6      	; 0xbde <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd6>
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	2a 87       	std	Y+10, r18	; 0x0a
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd8>
     bde:	1a 86       	std	Y+10, r1	; 0x0a
     be0:	8a 85       	ldd	r24, Y+10	; 0x0a
     be2:	88 23       	and	r24, r24
     be4:	21 f1       	breq	.+72     	; 0xc2e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x126>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     be6:	29 81       	ldd	r18, Y+1	; 0x01
     be8:	3a 81       	ldd	r19, Y+2	; 0x02
     bea:	c9 01       	movw	r24, r18
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	9c 01       	movw	r18, r24
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	fc 01       	movw	r30, r24
     c04:	e6 58       	subi	r30, 0x86	; 134
     c06:	fd 4f       	sbci	r31, 0xFD	; 253
     c08:	80 81       	ld	r24, Z
     c0a:	99 27       	eor	r25, r25
     c0c:	87 fd       	sbrc	r24, 7
     c0e:	90 95       	com	r25
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	c9 01       	movw	r24, r18
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	82 0f       	add	r24, r18
     c1c:	93 1f       	adc	r25, r19
     c1e:	fc 01       	movw	r30, r24
     c20:	ea 5a       	subi	r30, 0xAA	; 170
     c22:	fd 4f       	sbci	r31, 0xFD	; 253
     c24:	80 81       	ld	r24, Z
     c26:	8f 73       	andi	r24, 0x3F	; 63
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     c2e:	29 81       	ldd	r18, Y+1	; 0x01
     c30:	3a 81       	ldd	r19, Y+2	; 0x02
     c32:	f9 01       	movw	r30, r18
     c34:	e6 58       	subi	r30, 0x86	; 134
     c36:	fd 4f       	sbci	r31, 0xFD	; 253
     c38:	80 81       	ld	r24, Z
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	f9 01       	movw	r30, r18
     c3e:	e6 58       	subi	r30, 0x86	; 134
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	80 83       	st	Z, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     c44:	29 81       	ldd	r18, Y+1	; 0x01
     c46:	3a 81       	ldd	r19, Y+2	; 0x02
     c48:	c9 01       	movw	r24, r18
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	9c 01       	movw	r18, r24
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	fc 01       	movw	r30, r24
     c62:	e6 58       	subi	r30, 0x86	; 134
     c64:	fd 4f       	sbci	r31, 0xFD	; 253
     c66:	80 81       	ld	r24, Z
     c68:	99 27       	eor	r25, r25
     c6a:	87 fd       	sbrc	r24, 7
     c6c:	90 95       	com	r25
     c6e:	28 0f       	add	r18, r24
     c70:	39 1f       	adc	r19, r25
     c72:	80 91 55 02 	lds	r24, 0x0255
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	5c f4       	brge	.+22     	; 0xc96 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x18e>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	fc 01       	movw	r30, r24
     c86:	e6 58       	subi	r30, 0x86	; 134
     c88:	fd 4f       	sbci	r31, 0xFD	; 253
     c8a:	80 81       	ld	r24, Z
     c8c:	8c 30       	cpi	r24, 0x0C	; 12
     c8e:	1c f4       	brge	.+6      	; 0xc96 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x18e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 87       	std	Y+9, r24	; 0x09
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
     c96:	19 86       	std	Y+9, r1	; 0x09
     c98:	89 85       	ldd	r24, Y+9	; 0x09
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
     c9e:	7e c0       	rjmp	.+252    	; 0xd9c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x294>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     ca0:	eb 81       	ldd	r30, Y+3	; 0x03
     ca2:	fc 81       	ldd	r31, Y+4	; 0x04
     ca4:	40 81       	ld	r20, Z
     ca6:	51 81       	ldd	r21, Z+1	; 0x01
     ca8:	29 81       	ldd	r18, Y+1	; 0x01
     caa:	3a 81       	ldd	r19, Y+2	; 0x02
     cac:	c9 01       	movw	r24, r18
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	9c 01       	movw	r18, r24
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	fc 01       	movw	r30, r24
     cc6:	e6 58       	subi	r30, 0x86	; 134
     cc8:	fd 4f       	sbci	r31, 0xFD	; 253
     cca:	80 81       	ld	r24, Z
     ccc:	99 27       	eor	r25, r25
     cce:	87 fd       	sbrc	r24, 7
     cd0:	90 95       	com	r25
     cd2:	28 0f       	add	r18, r24
     cd4:	39 1f       	adc	r19, r25
     cd6:	c9 01       	movw	r24, r18
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	fc 01       	movw	r30, r24
     ce2:	e9 5a       	subi	r30, 0xA9	; 169
     ce4:	fd 4f       	sbci	r31, 0xFD	; 253
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	84 0f       	add	r24, r20
     cec:	95 1f       	adc	r25, r21
     cee:	ed 81       	ldd	r30, Y+5	; 0x05
     cf0:	fe 81       	ldd	r31, Y+6	; 0x06
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     cf6:	29 81       	ldd	r18, Y+1	; 0x01
     cf8:	3a 81       	ldd	r19, Y+2	; 0x02
     cfa:	c9 01       	movw	r24, r18
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	9c 01       	movw	r18, r24
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	fc 01       	movw	r30, r24
     d14:	e6 58       	subi	r30, 0x86	; 134
     d16:	fd 4f       	sbci	r31, 0xFD	; 253
     d18:	80 81       	ld	r24, Z
     d1a:	99 27       	eor	r25, r25
     d1c:	87 fd       	sbrc	r24, 7
     d1e:	90 95       	com	r25
     d20:	28 0f       	add	r18, r24
     d22:	39 1f       	adc	r19, r25
     d24:	c9 01       	movw	r24, r18
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	fc 01       	movw	r30, r24
     d30:	ea 5a       	subi	r30, 0xAA	; 170
     d32:	fd 4f       	sbci	r31, 0xFD	; 253
     d34:	80 81       	ld	r24, Z
     d36:	82 95       	swap	r24
     d38:	86 95       	lsr	r24
     d3a:	86 95       	lsr	r24
     d3c:	83 70       	andi	r24, 0x03	; 3
     d3e:	81 70       	andi	r24, 0x01	; 1
     d40:	18 86       	std	Y+8, r1	; 0x08
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	11 f4       	brne	.+4      	; 0xd4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x242>
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	28 87       	std	Y+8, r18	; 0x08
     d4a:	88 85       	ldd	r24, Y+8	; 0x08
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x24a>
     d50:	4b c0       	rjmp	.+150    	; 0xde8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2e0>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	3a 81       	ldd	r19, Y+2	; 0x02
     d56:	c9 01       	movw	r24, r18
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	9c 01       	movw	r18, r24
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	fc 01       	movw	r30, r24
     d70:	e6 58       	subi	r30, 0x86	; 134
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	80 81       	ld	r24, Z
     d76:	99 27       	eor	r25, r25
     d78:	87 fd       	sbrc	r24, 7
     d7a:	90 95       	com	r25
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	c9 01       	movw	r24, r18
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	82 0f       	add	r24, r18
     d88:	93 1f       	adc	r25, r19
     d8a:	fc 01       	movw	r30, r24
     d8c:	ea 5a       	subi	r30, 0xAA	; 170
     d8e:	fd 4f       	sbci	r31, 0xFD	; 253
     d90:	80 81       	ld	r24, Z
     d92:	8f 73       	andi	r24, 0x3F	; 63
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
     d9a:	26 c0       	rjmp	.+76     	; 0xde8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2e0>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     d9c:	eb 81       	ldd	r30, Y+3	; 0x03
     d9e:	fc 81       	ldd	r31, Y+4	; 0x04
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	04 96       	adiw	r24, 0x04	; 4
     da6:	1f 82       	std	Y+7, r1	; 0x07
     da8:	2c e9       	ldi	r18, 0x9C	; 156
     daa:	80 34       	cpi	r24, 0x40	; 64
     dac:	92 07       	cpc	r25, r18
     dae:	10 f4       	brcc	.+4      	; 0xdb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	8f 83       	std	Y+7, r24	; 0x07
     db4:	2f 81       	ldd	r18, Y+7	; 0x07
     db6:	22 23       	and	r18, r18
     db8:	39 f0       	breq	.+14     	; 0xdc8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     dba:	ed 81       	ldd	r30, Y+5	; 0x05
     dbc:	fe 81       	ldd	r31, Y+6	; 0x06
     dbe:	80 e4       	ldi	r24, 0x40	; 64
     dc0:	9c e9       	ldi	r25, 0x9C	; 156
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2d2>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	04 96       	adiw	r24, 0x04	; 4
     dd2:	ed 81       	ldd	r30, Y+5	; 0x05
     dd4:	fe 81       	ldd	r31, Y+6	; 0x06
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	e6 58       	subi	r30, 0x86	; 134
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	80 83       	st	Z, r24
  }
}
     de8:	2b 96       	adiw	r28, 0x0b	; 11
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <__vector_11>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
ISR(TIMER1_COMPA_vect) 
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	64 e8       	ldi	r22, 0x84	; 132
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	48 e8       	ldi	r20, 0x88	; 136
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	6b de       	rcall	.-810    	; 0xb08 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     e32:	cf 91       	pop	r28
}
     e34:	df 91       	pop	r29
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <_ZNK7Sd2Card4typeEv>:
    return readRegister(CMD9, csd);
  }
  void readEnd(void);
  uint8_t setSckRate(uint8_t sckRateID);
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <_ZNK7Sd2Card4typeEv+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	e9 81       	ldd	r30, Y+1	; 0x01
     e68:	fa 81       	ldd	r31, Y+2	; 0x02
     e6a:	83 85       	ldd	r24, Z+11	; 0x0b
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <_ZN7Sd2Card5errorEh>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <_ZN7Sd2Card5errorEh+0x6>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6b 83       	std	Y+3, r22	; 0x03
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	85 83       	std	Z+5, r24	; 0x05
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <_ZL7spiSendh>:
#include "Sd2Card.h"
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <_ZL7spiSendh+0x6>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	89 83       	std	Y+1, r24	; 0x01
  SPDR = b;
     ea8:	ee e4       	ldi	r30, 0x4E	; 78
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)));
     eb0:	ed e4       	ldi	r30, 0x4D	; 77
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	1a 82       	std	Y+2, r1	; 0x02
     eb8:	88 23       	and	r24, r24
     eba:	14 f0       	brlt	.+4      	; 0xec0 <_ZL7spiSendh+0x24>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 23       	and	r24, r24
     ec4:	a9 f7       	brne	.-22     	; 0xeb0 <_ZL7spiSendh+0x14>
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
  spiSend(0XFF);
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	e0 df       	rcall	.-64     	; 0xe9c <_ZL7spiSendh>
     edc:	ee e4       	ldi	r30, 0x4E	; 78
  return SPDR;
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	cf 91       	pop	r28
}
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <_ZN7Sd2Card11waitNotBusyEj>:
    | (sckRateID & 2 ? (1 << SPR0) : 0);
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	29 97       	sbiw	r28, 0x09	; 9
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	7e 83       	std	Y+6, r23	; 0x06
     f02:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t t0 = millis();
     f04:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <millis>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
  do {
    if (spiRec() == 0XFF) return true;
     f10:	df df       	rcall	.-66     	; 0xed0 <_ZL6spiRecv>
     f12:	18 86       	std	Y+8, r1	; 0x08
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	11 f4       	brne	.+4      	; 0xf1c <_ZN7Sd2Card11waitNotBusyEj+0x34>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	88 87       	std	Y+8, r24	; 0x08
     f1c:	88 85       	ldd	r24, Y+8	; 0x08
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <_ZN7Sd2Card11waitNotBusyEj+0x40>
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8f 83       	std	Y+7, r24	; 0x07
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <_ZN7Sd2Card11waitNotBusyEj+0x6a>
     f28:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <millis>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9c 01       	movw	r18, r24
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	28 1b       	sub	r18, r24
     f38:	39 0b       	sbc	r19, r25
     f3a:	19 86       	std	Y+9, r1	; 0x09
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	28 17       	cp	r18, r24
     f42:	39 07       	cpc	r19, r25
     f44:	10 f4       	brcc	.+4      	; 0xf4a <_ZN7Sd2Card11waitNotBusyEj+0x62>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 87       	std	Y+9, r24	; 0x09
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	88 23       	and	r24, r24
     f4e:	01 f7       	brne	.-64     	; 0xf10 <_ZN7Sd2Card11waitNotBusyEj+0x28>
     f50:	1f 82       	std	Y+7, r1	; 0x07
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
     f52:	8f 81       	ldd	r24, Y+7	; 0x07
     f54:	29 96       	adiw	r28, 0x09	; 9
}
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <_ZN7Sd2Card13chipSelectLowEv+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(chipSelectPin_, LOW);
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	84 81       	ldd	r24, Z+4	; 0x04
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <_ZN7Sd2Card14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <_ZN7Sd2Card14chipSelectHighEv+0x6>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(chipSelectPin_, HIGH);
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <digitalWrite>
}
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2b 97       	sbiw	r28, 0x0b	; 11
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	9c 83       	std	Y+4, r25	; 0x04
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	6d 83       	std	Y+5, r22	; 0x05
     fc8:	5f 83       	std	Y+7, r21	; 0x07
     fca:	4e 83       	std	Y+6, r20	; 0x06
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
     fcc:	ee e4       	ldi	r30, 0x4E	; 78
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	80 83       	st	Z, r24

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	34 c0       	rjmp	.+104    	; 0x1042 <_ZN7Sd2Card9writeDataEhPKh+0x94>
    while (!(SPSR & (1 << SPIF)));
     fda:	ed e4       	ldi	r30, 0x4D	; 77
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	1b 86       	std	Y+11, r1	; 0x0b
     fe2:	88 23       	and	r24, r24
     fe4:	14 f0       	brlt	.+4      	; 0xfea <_ZN7Sd2Card9writeDataEhPKh+0x3c>
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	2b 87       	std	Y+11, r18	; 0x0b
     fea:	8b 85       	ldd	r24, Y+11	; 0x0b
     fec:	88 23       	and	r24, r24
     fee:	a9 f7       	brne	.-22     	; 0xfda <_ZN7Sd2Card9writeDataEhPKh+0x2c>
    SPDR = src[i];
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	f9 01       	movw	r30, r18
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
    1002:	80 81       	ld	r24, Z
    1004:	8c 93       	st	X, r24
    while (!(SPSR & (1 << SPIF)));
    1006:	ed e4       	ldi	r30, 0x4D	; 77
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	1a 86       	std	Y+10, r1	; 0x0a
    100e:	88 23       	and	r24, r24
    1010:	14 f0       	brlt	.+4      	; 0x1016 <_ZN7Sd2Card9writeDataEhPKh+0x68>
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	2a 87       	std	Y+10, r18	; 0x0a
    1016:	8a 85       	ldd	r24, Y+10	; 0x0a
    1018:	88 23       	and	r24, r24
    101a:	a9 f7       	brne	.-22     	; 0x1006 <_ZN7Sd2Card9writeDataEhPKh+0x58>
    SPDR = src[i+1];
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	9c 01       	movw	r18, r24
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	fc 01       	movw	r30, r24
    1030:	e2 0f       	add	r30, r18
    1032:	f3 1f       	adc	r31, r19
    1034:	80 81       	ld	r24, Z
    1036:	8c 93       	st	X, r24

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	02 96       	adiw	r24, 0x02	; 2
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	22 e0       	ldi	r18, 0x02	; 2
    1048:	80 30       	cpi	r24, 0x00	; 0
    104a:	92 07       	cpc	r25, r18
    104c:	30 f2       	brcs	.-116    	; 0xfda <_ZN7Sd2Card9writeDataEhPKh+0x2c>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
    104e:	ed e4       	ldi	r30, 0x4D	; 77
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	19 86       	std	Y+9, r1	; 0x09
    1056:	88 23       	and	r24, r24
    1058:	14 f0       	brlt	.+4      	; 0x105e <_ZN7Sd2Card9writeDataEhPKh+0xb0>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 87       	std	Y+9, r24	; 0x09
    105e:	29 85       	ldd	r18, Y+9	; 0x09
    1060:	22 23       	and	r18, r18
    1062:	a9 f7       	brne	.-22     	; 0x104e <_ZN7Sd2Card9writeDataEhPKh+0xa0>
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	1a df       	rcall	.-460    	; 0xe9c <_ZL7spiSendh>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
  spiSend(0xff);  // dummy crc
    106a:	18 df       	rcall	.-464    	; 0xe9c <_ZL7spiSendh>
    106c:	31 df       	rcall	.-414    	; 0xed0 <_ZL6spiRecv>
    106e:	eb 81       	ldd	r30, Y+3	; 0x03

  status_ = spiRec();
    1070:	fc 81       	ldd	r31, Y+4	; 0x04
    1072:	82 87       	std	Z+10, r24	; 0x0a
    1074:	eb 81       	ldd	r30, Y+3	; 0x03
    1076:	fc 81       	ldd	r31, Y+4	; 0x04
    1078:	82 85       	ldd	r24, Z+10	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	8f 71       	andi	r24, 0x1F	; 31
    1080:	90 70       	andi	r25, 0x00	; 0
    1082:	85 30       	cpi	r24, 0x05	; 5
    1084:	91 05       	cpc	r25, r1
    1086:	49 f0       	breq	.+18     	; 0x109a <_ZN7Sd2Card9writeDataEhPKh+0xec>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	61 e1       	ldi	r22, 0x11	; 17
    error(SD_CARD_ERROR_WRITE);
    108e:	f3 de       	rcall	.-538    	; 0xe76 <_ZN7Sd2Card5errorEh>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	7a df       	rcall	.-268    	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>
    1096:	18 86       	std	Y+8, r1	; 0x08
    chipSelectHigh();
    1098:	02 c0       	rjmp	.+4      	; 0x109e <_ZN7Sd2Card9writeDataEhPKh+0xf0>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	88 87       	std	Y+8, r24	; 0x08
    109e:	88 85       	ldd	r24, Y+8	; 0x08
    return false;
    10a0:	2b 96       	adiw	r28, 0x0b	; 11
    10a2:	0f b6       	in	r0, 0x3f	; 63
  }
  return true;
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
}
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	27 97       	sbiw	r28, 0x07	; 7
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
  uint16_t t0 = millis();
    10ca:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <millis>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	1a c0       	rjmp	.+52     	; 0x110c <_ZN7Sd2Card14waitStartBlockEv+0x5a>
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    10d8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <millis>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9c 01       	movw	r18, r24
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	a9 01       	movw	r20, r18
    10e8:	48 1b       	sub	r20, r24
    10ea:	59 0b       	sbc	r21, r25
    10ec:	ca 01       	movw	r24, r20
    10ee:	1e 82       	std	Y+6, r1	; 0x06
    10f0:	51 e0       	ldi	r21, 0x01	; 1
    10f2:	8d 32       	cpi	r24, 0x2D	; 45
    10f4:	95 07       	cpc	r25, r21
    10f6:	10 f0       	brcs	.+4      	; 0x10fc <_ZN7Sd2Card14waitStartBlockEv+0x4a>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	22 23       	and	r18, r18
    1100:	29 f0       	breq	.+10     	; 0x110c <_ZN7Sd2Card14waitStartBlockEv+0x5a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	6f e0       	ldi	r22, 0x0F	; 15
    1108:	b6 de       	rcall	.-660    	; 0xe76 <_ZN7Sd2Card5errorEh>
    110a:	1c c0       	rjmp	.+56     	; 0x1144 <_ZN7Sd2Card14waitStartBlockEv+0x92>
    110c:	e1 de       	rcall	.-574    	; 0xed0 <_ZL6spiRecv>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    110e:	eb 81       	ldd	r30, Y+3	; 0x03
    1110:	fc 81       	ldd	r31, Y+4	; 0x04
    1112:	82 87       	std	Z+10, r24	; 0x0a
    1114:	eb 81       	ldd	r30, Y+3	; 0x03
    1116:	fc 81       	ldd	r31, Y+4	; 0x04
    1118:	82 85       	ldd	r24, Z+10	; 0x0a
    111a:	1f 82       	std	Y+7, r1	; 0x07
    111c:	8f 3f       	cpi	r24, 0xFF	; 255
    111e:	11 f4       	brne	.+4      	; 0x1124 <_ZN7Sd2Card14waitStartBlockEv+0x72>
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	4f 83       	std	Y+7, r20	; 0x07
    1124:	5f 81       	ldd	r21, Y+7	; 0x07
    1126:	55 23       	and	r21, r21
    1128:	b9 f6       	brne	.-82     	; 0x10d8 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    112a:	eb 81       	ldd	r30, Y+3	; 0x03
    112c:	fc 81       	ldd	r31, Y+4	; 0x04
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    112e:	82 85       	ldd	r24, Z+10	; 0x0a
    1130:	8e 3f       	cpi	r24, 0xFE	; 254
    1132:	29 f0       	breq	.+10     	; 0x113e <_ZN7Sd2Card14waitStartBlockEv+0x8c>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    error(SD_CARD_ERROR_READ);
    1138:	6d e0       	ldi	r22, 0x0D	; 13
    113a:	9d de       	rcall	.-710    	; 0xe76 <_ZN7Sd2Card5errorEh>
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <_ZN7Sd2Card14waitStartBlockEv+0x92>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	04 c0       	rjmp	.+8      	; 0x114c <_ZN7Sd2Card14waitStartBlockEv+0x9a>
    goto fail;
  }
  return true;
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	20 df       	rcall	.-448    	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>

 fail:
  chipSelectHigh();
    114a:	1d 82       	std	Y+5, r1	; 0x05
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	27 96       	adiw	r28, 0x07	; 7
    1150:	0f b6       	in	r0, 0x3f	; 63
  return false;
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
}
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	27 97       	sbiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
  if (inBlock_) {
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	86 81       	ldd	r24, Z+6	; 0x06
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <_ZN7Sd2Card7readEndEv+0x24>
    1182:	3e c0       	rjmp	.+124    	; 0x1200 <_ZN7Sd2Card7readEndEv+0xa0>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    1184:	ee e4       	ldi	r30, 0x4E	; 78
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	80 83       	st	Z, r24
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <_ZN7Sd2Card7readEndEv+0x4c>
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
    118e:	ed e4       	ldi	r30, 0x4D	; 77
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	1c 82       	std	Y+4, r1	; 0x04
    1196:	88 23       	and	r24, r24
    1198:	14 f0       	brlt	.+4      	; 0x119e <_ZN7Sd2Card7readEndEv+0x3e>
    119a:	21 e0       	ldi	r18, 0x01	; 1
    119c:	2c 83       	std	Y+4, r18	; 0x04
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	88 23       	and	r24, r24
    11a2:	a9 f7       	brne	.-22     	; 0x118e <_ZN7Sd2Card7readEndEv+0x2e>
      SPDR = 0XFF;
    11a4:	ee e4       	ldi	r30, 0x4E	; 78
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	80 83       	st	Z, r24
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	87 81       	ldd	r24, Z+7	; 0x07
    11b2:	90 85       	ldd	r25, Z+8	; 0x08
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	1f 82       	std	Y+7, r1	; 0x07
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	22 e0       	ldi	r18, 0x02	; 2
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	92 07       	cpc	r25, r18
    11c4:	10 f4       	brcc	.+4      	; 0x11ca <_ZN7Sd2Card7readEndEv+0x6a>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	8f 83       	std	Y+7, r24	; 0x07
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	90 87       	std	Z+8, r25	; 0x08
    11d6:	87 83       	std	Z+7, r24	; 0x07
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	99 23       	and	r25, r25
    11dc:	c1 f6       	brne	.-80     	; 0x118e <_ZN7Sd2Card7readEndEv+0x2e>
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
    11de:	ed e4       	ldi	r30, 0x4D	; 77
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	1b 82       	std	Y+3, r1	; 0x03
    11e6:	88 23       	and	r24, r24
    11e8:	14 f0       	brlt	.+4      	; 0x11ee <_ZN7Sd2Card7readEndEv+0x8e>
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	2b 83       	std	Y+3, r18	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 23       	and	r24, r24
    11f2:	a9 f7       	brne	.-22     	; 0x11de <_ZN7Sd2Card7readEndEv+0x7e>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	c8 de       	rcall	.-624    	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    inBlock_ = 0;
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	16 82       	std	Z+6, r1	; 0x06
    1200:	27 96       	adiw	r28, 0x07	; 7
  }
}
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2b 97       	sbiw	r28, 0x0b	; 11
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	9d 83       	std	Y+5, r25	; 0x05
    1228:	8c 83       	std	Y+4, r24	; 0x04
    122a:	6e 83       	std	Y+6, r22	; 0x06
    122c:	2f 83       	std	Y+7, r18	; 0x07
    122e:	38 87       	std	Y+8, r19	; 0x08
    1230:	49 87       	std	Y+9, r20	; 0x09
    1232:	5a 87       	std	Y+10, r21	; 0x0a
  // end read if in partialBlockRead mode
  readEnd();
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	93 df       	rcall	.-218    	; 0x1160 <_ZN7Sd2Card7readEndEv>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04

  // select card
  chipSelectLow();
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	93 de       	rcall	.-730    	; 0xf66 <_ZN7Sd2Card13chipSelectLowEv>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05

  // wait up to 300 ms if busy
  waitNotBusy(300);
    1244:	6c e2       	ldi	r22, 0x2C	; 44
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	4f de       	rcall	.-866    	; 0xee8 <_ZN7Sd2Card11waitNotBusyEj>
    124a:	8e 81       	ldd	r24, Y+6	; 0x06
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	26 de       	rcall	.-948    	; 0xe9c <_ZL7spiSendh>

  // send command
  spiSend(cmd | 0x40);
    1250:	88 e1       	ldi	r24, 0x18	; 24
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	14 c0       	rjmp	.+40     	; 0x127e <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1258:	28 2f       	mov	r18, r24
    125a:	33 27       	eor	r19, r19
    125c:	27 fd       	sbrc	r18, 7
    125e:	30 95       	com	r19
    1260:	8f 81       	ldd	r24, Y+7	; 0x07
    1262:	98 85       	ldd	r25, Y+8	; 0x08
    1264:	a9 85       	ldd	r26, Y+9	; 0x09
    1266:	ba 85       	ldd	r27, Y+10	; 0x0a
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <_ZN7Sd2Card11cardCommandEhm+0x60>
    126a:	b6 95       	lsr	r27
    126c:	a7 95       	ror	r26
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	2a 95       	dec	r18
    1274:	d2 f7       	brpl	.-12     	; 0x126a <_ZN7Sd2Card11cardCommandEhm+0x58>
    1276:	12 de       	rcall	.-988    	; 0xe9c <_ZL7spiSendh>
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 50       	subi	r24, 0x08	; 8
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 23       	and	r24, r24
    1282:	4c f7       	brge	.-46     	; 0x1256 <_ZN7Sd2Card11cardCommandEhm+0x44>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	88 23       	and	r24, r24
    128c:	11 f4       	brne	.+4      	; 0x1292 <_ZN7Sd2Card11cardCommandEhm+0x80>

  // send CRC
  uint8_t crc = 0XFF;
    128e:	85 e9       	ldi	r24, 0x95	; 149
    1290:	8b 83       	std	Y+3, r24	; 0x03
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	11 f4       	brne	.+4      	; 0x129c <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1298:	87 e8       	ldi	r24, 0x87	; 135
    129a:	8b 83       	std	Y+3, r24	; 0x03
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	fe dd       	rcall	.-1028   	; 0xe9c <_ZL7spiSendh>
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <_ZN7Sd2Card11cardCommandEhm+0x98>
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
  spiSend(crc);
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	12 de       	rcall	.-988    	; 0xed0 <_ZL6spiRecv>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    12ac:	ec 81       	ldd	r30, Y+4	; 0x04
    12ae:	fd 81       	ldd	r31, Y+5	; 0x05
    12b0:	82 87       	std	Z+10, r24	; 0x0a
    12b2:	ec 81       	ldd	r30, Y+4	; 0x04
    12b4:	fd 81       	ldd	r31, Y+5	; 0x05
    12b6:	82 85       	ldd	r24, Z+10	; 0x0a
    12b8:	88 23       	and	r24, r24
    12ba:	34 f4       	brge	.+12     	; 0x12c8 <_ZN7Sd2Card11cardCommandEhm+0xb6>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	8f 3f       	cpi	r24, 0xFF	; 255
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <_ZN7Sd2Card11cardCommandEhm+0xb6>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	8b 87       	std	Y+11, r24	; 0x0b
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <_ZN7Sd2Card11cardCommandEhm+0xb8>
    12c8:	1b 86       	std	Y+11, r1	; 0x0b
    12ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    12cc:	88 23       	and	r24, r24
    12ce:	51 f7       	brne	.-44     	; 0x12a4 <_ZN7Sd2Card11cardCommandEhm+0x92>
    12d0:	ec 81       	ldd	r30, Y+4	; 0x04
    12d2:	fd 81       	ldd	r31, Y+5	; 0x05
    12d4:	82 85       	ldd	r24, Z+10	; 0x0a
    12d6:	2b 96       	adiw	r28, 0x0b	; 11
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
  return status_;
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
}
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2e 97       	sbiw	r28, 0x0e	; 14
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	4b 83       	std	Y+3, r20	; 0x03
    1302:	5c 83       	std	Y+4, r21	; 0x04
    1304:	6d 83       	std	Y+5, r22	; 0x05
    1306:	7e 83       	std	Y+6, r23	; 0x06
    1308:	38 87       	std	Y+8, r19	; 0x08
    130a:	2f 83       	std	Y+7, r18	; 0x07
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	ad 81       	ldd	r26, Y+5	; 0x05
    1312:	be 81       	ldd	r27, Y+6	; 0x06
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	a1 05       	cpc	r26, r1
    1318:	b1 05       	cpc	r27, r1
    131a:	29 f4       	brne	.+10     	; 0x1326 <_ZN7Sd2Card10writeBlockEmPKh+0x3e>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	62 e1       	ldi	r22, 0x12	; 18
    1322:	a9 dd       	rcall	.-1198   	; 0xe76 <_ZN7Sd2Card5errorEh>
    1324:	72 c0       	rjmp	.+228    	; 0x140a <_ZN7Sd2Card10writeBlockEmPKh+0x122>
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	96 dd       	rcall	.-1236   	; 0xe58 <_ZNK7Sd2Card4typeEv>
    132c:	1d 86       	std	Y+13, r1	; 0x0d
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	11 f0       	breq	.+4      	; 0x1336 <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	8d 87       	std	Y+13, r24	; 0x0d
    1336:	8d 85       	ldd	r24, Y+13	; 0x0d
    1338:	88 23       	and	r24, r24
    133a:	89 f0       	breq	.+34     	; 0x135e <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	ad 81       	ldd	r26, Y+5	; 0x05
    1342:	be 81       	ldd	r27, Y+6	; 0x06
    1344:	07 2e       	mov	r0, r23
    1346:	79 e0       	ldi	r23, 0x09	; 9
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	aa 1f       	adc	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	7a 95       	dec	r23
    1352:	d1 f7       	brne	.-12     	; 0x1348 <_ZN7Sd2Card10writeBlockEmPKh+0x60>
    1354:	70 2d       	mov	r23, r0
    1356:	8b 83       	std	Y+3, r24	; 0x03
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	ad 83       	std	Y+5, r26	; 0x05
    135c:	be 83       	std	Y+6, r27	; 0x06
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
  if (cardCommand(CMD24, blockNumber)) {
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	4d 81       	ldd	r20, Y+5	; 0x05
    1368:	5e 81       	ldd	r21, Y+6	; 0x06
    136a:	68 e1       	ldi	r22, 0x18	; 24
    136c:	52 df       	rcall	.-348    	; 0x1212 <_ZN7Sd2Card11cardCommandEhm>
    136e:	8e 87       	std	Y+14, r24	; 0x0e
    1370:	8e 85       	ldd	r24, Y+14	; 0x0e
    1372:	88 23       	and	r24, r24
    1374:	11 f0       	breq	.+4      	; 0x137a <_ZN7Sd2Card10writeBlockEmPKh+0x92>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	8e 87       	std	Y+14, r24	; 0x0e
    137a:	8e 85       	ldd	r24, Y+14	; 0x0e
    137c:	88 23       	and	r24, r24
    137e:	29 f0       	breq	.+10     	; 0x138a <_ZN7Sd2Card10writeBlockEmPKh+0xa2>
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	64 e0       	ldi	r22, 0x04	; 4
    error(SD_CARD_ERROR_CMD24);
    1386:	77 dd       	rcall	.-1298   	; 0xe76 <_ZN7Sd2Card5errorEh>
    1388:	40 c0       	rjmp	.+128    	; 0x140a <_ZN7Sd2Card10writeBlockEmPKh+0x122>
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	2f 81       	ldd	r18, Y+7	; 0x07
    1390:	38 85       	ldd	r19, Y+8	; 0x08
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1392:	6e ef       	ldi	r22, 0xFE	; 254
    1394:	a9 01       	movw	r20, r18
    1396:	0b de       	rcall	.-1002   	; 0xfae <_ZN7Sd2Card9writeDataEhPKh>
    1398:	1c 86       	std	Y+12, r1	; 0x0c
    139a:	88 23       	and	r24, r24
    139c:	11 f4       	brne	.+4      	; 0x13a2 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	8c 87       	std	Y+12, r24	; 0x0c
    13a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a4:	88 23       	and	r24, r24
    13a6:	89 f5       	brne	.+98     	; 0x140a <_ZN7Sd2Card10writeBlockEmPKh+0x122>
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	68 e5       	ldi	r22, 0x58	; 88
    13ae:	72 e0       	ldi	r23, 0x02	; 2
    13b0:	9b dd       	rcall	.-1226   	; 0xee8 <_ZN7Sd2Card11waitNotBusyEj>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    13b2:	1b 86       	std	Y+11, r1	; 0x0b
    13b4:	88 23       	and	r24, r24
    13b6:	11 f4       	brne	.+4      	; 0x13bc <_ZN7Sd2Card10writeBlockEmPKh+0xd4>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	8b 87       	std	Y+11, r24	; 0x0b
    13bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13be:	88 23       	and	r24, r24
    13c0:	29 f0       	breq	.+10     	; 0x13cc <_ZN7Sd2Card10writeBlockEmPKh+0xe4>
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	65 e1       	ldi	r22, 0x15	; 21
    13c8:	56 dd       	rcall	.-1364   	; 0xe76 <_ZN7Sd2Card5errorEh>
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <_ZN7Sd2Card10writeBlockEmPKh+0x122>
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	6d e0       	ldi	r22, 0x0D	; 13
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    13da:	1b df       	rcall	.-458    	; 0x1212 <_ZN7Sd2Card11cardCommandEhm>
    13dc:	88 23       	and	r24, r24
    13de:	19 f4       	brne	.+6      	; 0x13e6 <_ZN7Sd2Card10writeBlockEmPKh+0xfe>
    13e0:	77 dd       	rcall	.-1298   	; 0xed0 <_ZL6spiRecv>
    13e2:	88 23       	and	r24, r24
    13e4:	19 f0       	breq	.+6      	; 0x13ec <_ZN7Sd2Card10writeBlockEmPKh+0x104>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	8a 87       	std	Y+10, r24	; 0x0a
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <_ZN7Sd2Card10writeBlockEmPKh+0x106>
    13ec:	1a 86       	std	Y+10, r1	; 0x0a
    13ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f0:	88 23       	and	r24, r24
    13f2:	29 f0       	breq	.+10     	; 0x13fe <_ZN7Sd2Card10writeBlockEmPKh+0x116>
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	64 e1       	ldi	r22, 0x14	; 20
    13fa:	3d dd       	rcall	.-1414   	; 0xe76 <_ZN7Sd2Card5errorEh>
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <_ZN7Sd2Card10writeBlockEmPKh+0x122>
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	c3 dd       	rcall	.-1146   	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    1406:	89 87       	std	Y+9, r24	; 0x09
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <_ZN7Sd2Card10writeBlockEmPKh+0x12a>
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	bd dd       	rcall	.-1158   	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>
    1410:	19 86       	std	Y+9, r1	; 0x09
    goto fail;
  }
  chipSelectHigh();
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	2e 96       	adiw	r28, 0x0e	; 14
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
  return true;
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61

 fail:
  chipSelectHigh();
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	67 97       	sbiw	r28, 0x17	; 23
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	4f 83       	std	Y+7, r20	; 0x07
    1448:	58 87       	std	Y+8, r21	; 0x08
    144a:	69 87       	std	Y+9, r22	; 0x09
    144c:	7a 87       	std	Y+10, r23	; 0x0a
    144e:	3c 87       	std	Y+12, r19	; 0x0c
    1450:	2b 87       	std	Y+11, r18	; 0x0b
    1452:	1e 87       	std	Y+14, r17	; 0x0e
    1454:	0d 87       	std	Y+13, r16	; 0x0d
    1456:	f8 8a       	std	Y+16, r15	; 0x10
    1458:	ef 86       	std	Y+15, r14	; 0x0f
  uint16_t n;
  if (count == 0) return true;
    145a:	8d 85       	ldd	r24, Y+13	; 0x0d
    145c:	9e 85       	ldd	r25, Y+14	; 0x0e
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	19 f4       	brne	.+6      	; 0x1468 <_ZN7Sd2Card8readDataEmjjPh+0x42>
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	2e 8b       	std	Y+22, r18	; 0x16
    1466:	06 c1       	rjmp	.+524    	; 0x1674 <_ZN7Sd2Card8readDataEmjjPh+0x24e>
  if ((count + offset) > 512) {
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	2b 85       	ldd	r18, Y+11	; 0x0b
    146e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	22 e0       	ldi	r18, 0x02	; 2
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	92 07       	cpc	r25, r18
    147a:	08 f0       	brcs	.+2      	; 0x147e <_ZN7Sd2Card8readDataEmjjPh+0x58>
    147c:	f7 c0       	rjmp	.+494    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x246>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    147e:	ed 81       	ldd	r30, Y+5	; 0x05
    1480:	fe 81       	ldd	r31, Y+6	; 0x06
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	88 23       	and	r24, r24
    1486:	c9 f0       	breq	.+50     	; 0x14ba <_ZN7Sd2Card8readDataEmjjPh+0x94>
    1488:	ed 81       	ldd	r30, Y+5	; 0x05
    148a:	fe 81       	ldd	r31, Y+6	; 0x06
    148c:	20 81       	ld	r18, Z
    148e:	31 81       	ldd	r19, Z+1	; 0x01
    1490:	42 81       	ldd	r20, Z+2	; 0x02
    1492:	53 81       	ldd	r21, Z+3	; 0x03
    1494:	8f 81       	ldd	r24, Y+7	; 0x07
    1496:	98 85       	ldd	r25, Y+8	; 0x08
    1498:	a9 85       	ldd	r26, Y+9	; 0x09
    149a:	ba 85       	ldd	r27, Y+10	; 0x0a
    149c:	28 17       	cp	r18, r24
    149e:	39 07       	cpc	r19, r25
    14a0:	4a 07       	cpc	r20, r26
    14a2:	5b 07       	cpc	r21, r27
    14a4:	51 f4       	brne	.+20     	; 0x14ba <_ZN7Sd2Card8readDataEmjjPh+0x94>
    14a6:	ed 81       	ldd	r30, Y+5	; 0x05
    14a8:	fe 81       	ldd	r31, Y+6	; 0x06
    14aa:	27 81       	ldd	r18, Z+7	; 0x07
    14ac:	30 85       	ldd	r19, Z+8	; 0x08
    14ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <_ZN7Sd2Card8readDataEmjjPh+0x94>
    14b8:	50 c0       	rjmp	.+160    	; 0x155a <_ZN7Sd2Card8readDataEmjjPh+0x134>
    block_ = block;
    14ba:	ed 81       	ldd	r30, Y+5	; 0x05
    14bc:	fe 81       	ldd	r31, Y+6	; 0x06
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	a9 85       	ldd	r26, Y+9	; 0x09
    14c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    14c6:	80 83       	st	Z, r24
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	a2 83       	std	Z+2, r26	; 0x02
    14cc:	b3 83       	std	Z+3, r27	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	c2 dc       	rcall	.-1660   	; 0xe58 <_ZNK7Sd2Card4typeEv>
    14d4:	1d 8a       	std	Y+21, r1	; 0x15
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	11 f0       	breq	.+4      	; 0x14de <_ZN7Sd2Card8readDataEmjjPh+0xb8>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	8d 8b       	std	Y+21, r24	; 0x15
    14de:	2d 89       	ldd	r18, Y+21	; 0x15
    14e0:	22 23       	and	r18, r18
    14e2:	89 f0       	breq	.+34     	; 0x1506 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	98 85       	ldd	r25, Y+8	; 0x08
    14e8:	a9 85       	ldd	r26, Y+9	; 0x09
    14ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    14ec:	07 2e       	mov	r0, r23
    14ee:	79 e0       	ldi	r23, 0x09	; 9
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	aa 1f       	adc	r26, r26
    14f6:	bb 1f       	adc	r27, r27
    14f8:	7a 95       	dec	r23
    14fa:	d1 f7       	brne	.-12     	; 0x14f0 <_ZN7Sd2Card8readDataEmjjPh+0xca>
    14fc:	70 2d       	mov	r23, r0
    14fe:	8f 83       	std	Y+7, r24	; 0x07
    1500:	98 87       	std	Y+8, r25	; 0x08
    1502:	a9 87       	std	Y+9, r26	; 0x09
    1504:	ba 87       	std	Y+10, r27	; 0x0a
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    if (cardCommand(CMD17, block)) {
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	2f 81       	ldd	r18, Y+7	; 0x07
    150c:	38 85       	ldd	r19, Y+8	; 0x08
    150e:	49 85       	ldd	r20, Y+9	; 0x09
    1510:	5a 85       	ldd	r21, Y+10	; 0x0a
    1512:	61 e1       	ldi	r22, 0x11	; 17
    1514:	7e de       	rcall	.-772    	; 0x1212 <_ZN7Sd2Card11cardCommandEhm>
    1516:	8f 8b       	std	Y+23, r24	; 0x17
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	88 23       	and	r24, r24
    151c:	11 f0       	breq	.+4      	; 0x1522 <_ZN7Sd2Card8readDataEmjjPh+0xfc>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	2f 8b       	std	Y+23, r18	; 0x17
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	88 23       	and	r24, r24
    1526:	29 f0       	breq	.+10     	; 0x1532 <_ZN7Sd2Card8readDataEmjjPh+0x10c>
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
      error(SD_CARD_ERROR_CMD17);
    152c:	63 e0       	ldi	r22, 0x03	; 3
    152e:	a3 dc       	rcall	.-1722   	; 0xe76 <_ZN7Sd2Card5errorEh>
    1530:	9d c0       	rjmp	.+314    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x246>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	bd dd       	rcall	.-1158   	; 0x10b2 <_ZN7Sd2Card14waitStartBlockEv>
      goto fail;
    }
    if (!waitStartBlock()) {
    1538:	1c 8a       	std	Y+20, r1	; 0x14
    153a:	88 23       	and	r24, r24
    153c:	11 f4       	brne	.+4      	; 0x1542 <_ZN7Sd2Card8readDataEmjjPh+0x11c>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8c 8b       	std	Y+20, r24	; 0x14
    1542:	2c 89       	ldd	r18, Y+20	; 0x14
    1544:	22 23       	and	r18, r18
    1546:	09 f0       	breq	.+2      	; 0x154a <_ZN7Sd2Card8readDataEmjjPh+0x124>
    1548:	91 c0       	rjmp	.+290    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x246>
    154a:	ed 81       	ldd	r30, Y+5	; 0x05
    154c:	fe 81       	ldd	r31, Y+6	; 0x06
    154e:	10 86       	std	Z+8, r1	; 0x08
    1550:	17 82       	std	Z+7, r1	; 0x07
      goto fail;
    }
    offset_ = 0;
    1552:	ed 81       	ldd	r30, Y+5	; 0x05
    1554:	fe 81       	ldd	r31, Y+6	; 0x06
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	86 83       	std	Z+6, r24	; 0x06
    inBlock_ = 1;
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	80 83       	st	Z, r24
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    1562:	18 c0       	rjmp	.+48     	; 0x1594 <_ZN7Sd2Card8readDataEmjjPh+0x16e>
    1564:	ed e4       	ldi	r30, 0x4D	; 77
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	1b 8a       	std	Y+19, r1	; 0x13

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    156c:	88 23       	and	r24, r24
    156e:	14 f0       	brlt	.+4      	; 0x1574 <_ZN7Sd2Card8readDataEmjjPh+0x14e>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	2b 89       	ldd	r18, Y+19	; 0x13
    1576:	22 23       	and	r18, r18
    1578:	a9 f7       	brne	.-22     	; 0x1564 <_ZN7Sd2Card8readDataEmjjPh+0x13e>
    157a:	ee e4       	ldi	r30, 0x4E	; 78
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	80 83       	st	Z, r24
    SPDR = 0XFF;
    1582:	ed 81       	ldd	r30, Y+5	; 0x05
    1584:	fe 81       	ldd	r31, Y+6	; 0x06
    1586:	87 81       	ldd	r24, Z+7	; 0x07
    1588:	90 85       	ldd	r25, Z+8	; 0x08
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	ed 81       	ldd	r30, Y+5	; 0x05
    158e:	fe 81       	ldd	r31, Y+6	; 0x06
    1590:	90 87       	std	Z+8, r25	; 0x08
    1592:	87 83       	std	Z+7, r24	; 0x07
    1594:	ed 81       	ldd	r30, Y+5	; 0x05
    1596:	fe 81       	ldd	r31, Y+6	; 0x06
    1598:	27 81       	ldd	r18, Z+7	; 0x07
    159a:	30 85       	ldd	r19, Z+8	; 0x08
    159c:	8b 85       	ldd	r24, Y+11	; 0x0b
    159e:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	f8 f2       	brcs	.-66     	; 0x1564 <_ZN7Sd2Card8readDataEmjjPh+0x13e>
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	1a 82       	std	Y+2, r1	; 0x02
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	1f c0       	rjmp	.+62     	; 0x15f4 <_ZN7Sd2Card8readDataEmjjPh+0x1ce>
    15b6:	ed e4       	ldi	r30, 0x4D	; 77
  for (uint16_t i = 0; i < n; i++) {
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	1a 8a       	std	Y+18, r1	; 0x12
    while (!(SPSR & (1 << SPIF)));
    15be:	88 23       	and	r24, r24
    15c0:	14 f0       	brlt	.+4      	; 0x15c6 <_ZN7Sd2Card8readDataEmjjPh+0x1a0>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	8a 8b       	std	Y+18, r24	; 0x12
    15c6:	2a 89       	ldd	r18, Y+18	; 0x12
    15c8:	22 23       	and	r18, r18
    15ca:	a9 f7       	brne	.-22     	; 0x15b6 <_ZN7Sd2Card8readDataEmjjPh+0x190>
    15cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    15ce:	38 89       	ldd	r19, Y+16	; 0x10
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    dst[i] = SPDR;
    15d4:	d9 01       	movw	r26, r18
    15d6:	a8 0f       	add	r26, r24
    15d8:	b9 1f       	adc	r27, r25
    15da:	ee e4       	ldi	r30, 0x4E	; 78
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8c 93       	st	X, r24
    15e2:	ee e4       	ldi	r30, 0x4E	; 78
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	80 83       	st	Z, r24
    SPDR = 0XFF;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	29 81       	ldd	r18, Y+1	; 0x01
    15f6:	3a 81       	ldd	r19, Y+2	; 0x02
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	d0 f2       	brcs	.-76     	; 0x15b6 <_ZN7Sd2Card8readDataEmjjPh+0x190>
    1602:	ed e4       	ldi	r30, 0x4D	; 77
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	19 8a       	std	Y+17, r1	; 0x11
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    160a:	88 23       	and	r24, r24
    160c:	14 f0       	brlt	.+4      	; 0x1612 <_ZN7Sd2Card8readDataEmjjPh+0x1ec>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	89 8b       	std	Y+17, r24	; 0x11
    1612:	29 89       	ldd	r18, Y+17	; 0x11
    1614:	22 23       	and	r18, r18
    1616:	a9 f7       	brne	.-22     	; 0x1602 <_ZN7Sd2Card8readDataEmjjPh+0x1dc>
    1618:	2f 85       	ldd	r18, Y+15	; 0x0f
    161a:	38 89       	ldd	r19, Y+16	; 0x10
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
  dst[n] = SPDR;
    1620:	d9 01       	movw	r26, r18
    1622:	a8 0f       	add	r26, r24
    1624:	b9 1f       	adc	r27, r25
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
    162e:	ed 81       	ldd	r30, Y+5	; 0x05
    1630:	fe 81       	ldd	r31, Y+6	; 0x06
    1632:	27 81       	ldd	r18, Z+7	; 0x07
    1634:	30 85       	ldd	r19, Z+8	; 0x08
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	82 0f       	add	r24, r18
    163c:	93 1f       	adc	r25, r19
    163e:	ed 81       	ldd	r30, Y+5	; 0x05
    1640:	fe 81       	ldd	r31, Y+6	; 0x06
    1642:	90 87       	std	Z+8, r25	; 0x08
    1644:	87 83       	std	Z+7, r24	; 0x07
    1646:	ed 81       	ldd	r30, Y+5	; 0x05
    1648:	fe 81       	ldd	r31, Y+6	; 0x06
    164a:	81 85       	ldd	r24, Z+9	; 0x09
    164c:	88 23       	and	r24, r24
  if (!partialBlockRead_ || offset_ >= 512) {
    164e:	41 f0       	breq	.+16     	; 0x1660 <_ZN7Sd2Card8readDataEmjjPh+0x23a>
    1650:	ed 81       	ldd	r30, Y+5	; 0x05
    1652:	fe 81       	ldd	r31, Y+6	; 0x06
    1654:	87 81       	ldd	r24, Z+7	; 0x07
    1656:	90 85       	ldd	r25, Z+8	; 0x08
    1658:	22 e0       	ldi	r18, 0x02	; 2
    165a:	80 30       	cpi	r24, 0x00	; 0
    165c:	92 07       	cpc	r25, r18
    165e:	18 f0       	brcs	.+6      	; 0x1666 <_ZN7Sd2Card8readDataEmjjPh+0x240>
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	7d dd       	rcall	.-1286   	; 0x1160 <_ZN7Sd2Card7readEndEv>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    // read rest of data, checksum and set chip select high
    readEnd();
    1668:	8e 8b       	std	Y+22, r24	; 0x16
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_ZN7Sd2Card8readDataEmjjPh+0x24e>
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
  }
  return true;
    1670:	8c dc       	rcall	.-1768   	; 0xf8a <_ZN7Sd2Card14chipSelectHighEv>
    1672:	1e 8a       	std	Y+22, r1	; 0x16
    1674:	8e 89       	ldd	r24, Y+22	; 0x16

 fail:
  chipSelectHigh();
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
  return false;
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	08 95       	ret

00001690 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	28 97       	sbiw	r28, 0x08	; 8
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	4b 83       	std	Y+3, r20	; 0x03
    16b2:	5c 83       	std	Y+4, r21	; 0x04
    16b4:	6d 83       	std	Y+5, r22	; 0x05
    16b6:	7e 83       	std	Y+6, r23	; 0x06
    16b8:	38 87       	std	Y+8, r19	; 0x08
    16ba:	2f 83       	std	Y+7, r18	; 0x07
  return readData(block, 0, 512, dst);
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	4d 81       	ldd	r20, Y+5	; 0x05
    16c6:	5e 81       	ldd	r21, Y+6	; 0x06
    16c8:	ef 81       	ldd	r30, Y+7	; 0x07
    16ca:	f8 85       	ldd	r31, Y+8	; 0x08
    16cc:	ba 01       	movw	r22, r20
    16ce:	a9 01       	movw	r20, r18
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	00 e0       	ldi	r16, 0x00	; 0
    16d6:	12 e0       	ldi	r17, 0x02	; 2
    16d8:	7f 01       	movw	r14, r30
    16da:	a5 de       	rcall	.-694    	; 0x1426 <_ZN7Sd2Card8readDataEmjjPh>
    16dc:	28 96       	adiw	r28, 0x08	; 8
}
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <_ZN6SdFileC1Ev>:
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <_ZN6SdFileC1Ev+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5PrintC2Ev>
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	8a e2       	ldi	r24, 0x2A	; 42
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	15 82       	std	Z+5, r1	; 0x05
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <_ZNK6SdFile5isDirEv>:
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <_ZNK6SdFile5isDirEv+0x6>
    172e:	0f 92       	push	r0
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	85 81       	ldd	r24, Z+5	; 0x05
    173e:	1b 82       	std	Y+3, r1	; 0x03
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	10 f0       	brcs	.+4      	; 0x1748 <_ZNK6SdFile5isDirEv+0x20>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <_ZNK6SdFile6isFileEv>:
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <_ZNK6SdFile6isFileEv+0x6>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	85 81       	ldd	r24, Z+5	; 0x05
    176c:	1b 82       	std	Y+3, r1	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	11 f4       	brne	.+4      	; 0x1776 <_ZNK6SdFile6isFileEv+0x20>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <_ZNK6SdFile6isOpenEv>:
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <_ZNK6SdFile6isOpenEv+0x6>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	e9 81       	ldd	r30, Y+1	; 0x01
    1796:	fa 81       	ldd	r31, Y+2	; 0x02
    1798:	85 81       	ldd	r24, Z+5	; 0x05
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	88 23       	and	r24, r24
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <_ZNK6SdFile6isOpenEv+0x22>
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <_ZNK8SdVolume14blockOfClusterEm>:
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZNK8SdVolume14blockOfClusterEm+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <_ZNK8SdVolume14blockOfClusterEm+0x8>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <_ZNK8SdVolume14blockOfClusterEm+0xa>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	4b 83       	std	Y+3, r20	; 0x03
    17c8:	5c 83       	std	Y+4, r21	; 0x04
    17ca:	6d 83       	std	Y+5, r22	; 0x05
    17cc:	7e 83       	std	Y+6, r23	; 0x06
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	ad 81       	ldd	r26, Y+5	; 0x05
    17d4:	be 81       	ldd	r27, Y+6	; 0x06
    17d6:	07 2e       	mov	r0, r23
    17d8:	79 e0       	ldi	r23, 0x09	; 9
    17da:	b6 95       	lsr	r27
    17dc:	a7 95       	ror	r26
    17de:	97 95       	ror	r25
    17e0:	87 95       	ror	r24
    17e2:	7a 95       	dec	r23
    17e4:	d1 f7       	brne	.-12     	; 0x17da <_ZNK8SdVolume14blockOfClusterEm+0x26>
    17e6:	70 2d       	mov	r23, r0
    17e8:	98 2f       	mov	r25, r24
    17ea:	e9 81       	ldd	r30, Y+1	; 0x01
    17ec:	fa 81       	ldd	r31, Y+2	; 0x02
    17ee:	84 81       	ldd	r24, Z+4	; 0x04
    17f0:	81 50       	subi	r24, 0x01	; 1
    17f2:	89 23       	and	r24, r25
    17f4:	26 96       	adiw	r28, 0x06	; 6
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <_ZNK8SdVolume17clusterStartBlockEm>:
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <_ZNK8SdVolume17clusterStartBlockEm+0x16>
    181c:	00 d0       	rcall	.+0      	; 0x181e <_ZNK8SdVolume17clusterStartBlockEm+0x18>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <_ZNK8SdVolume17clusterStartBlockEm+0x1a>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	4b 83       	std	Y+3, r20	; 0x03
    182a:	5c 83       	std	Y+4, r21	; 0x04
    182c:	6d 83       	std	Y+5, r22	; 0x05
    182e:	7e 83       	std	Y+6, r23	; 0x06
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	e6 84       	ldd	r14, Z+14	; 0x0e
    1836:	f7 84       	ldd	r15, Z+15	; 0x0f
    1838:	00 89       	ldd	r16, Z+16	; 0x10
    183a:	11 89       	ldd	r17, Z+17	; 0x11
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	ad 81       	ldd	r26, Y+5	; 0x05
    1842:	be 81       	ldd	r27, Y+6	; 0x06
    1844:	9c 01       	movw	r18, r24
    1846:	ad 01       	movw	r20, r26
    1848:	22 50       	subi	r18, 0x02	; 2
    184a:	30 40       	sbci	r19, 0x00	; 0
    184c:	40 40       	sbci	r20, 0x00	; 0
    184e:	50 40       	sbci	r21, 0x00	; 0
    1850:	e9 81       	ldd	r30, Y+1	; 0x01
    1852:	fa 81       	ldd	r31, Y+2	; 0x02
    1854:	85 85       	ldd	r24, Z+13	; 0x0d
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	59 01       	movw	r10, r18
    185c:	6a 01       	movw	r12, r20
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <_ZNK8SdVolume17clusterStartBlockEm+0x62>
    1860:	aa 0c       	add	r10, r10
    1862:	bb 1c       	adc	r11, r11
    1864:	cc 1c       	adc	r12, r12
    1866:	dd 1c       	adc	r13, r13
    1868:	8a 95       	dec	r24
    186a:	d2 f7       	brpl	.-12     	; 0x1860 <_ZNK8SdVolume17clusterStartBlockEm+0x5a>
    186c:	d6 01       	movw	r26, r12
    186e:	c5 01       	movw	r24, r10
    1870:	8e 0d       	add	r24, r14
    1872:	9f 1d       	adc	r25, r15
    1874:	a0 1f       	adc	r26, r16
    1876:	b1 1f       	adc	r27, r17
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	26 96       	adiw	r28, 0x06	; 6
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	08 95       	ret

0000189e <_ZN8SdVolume13cacheSetDirtyEv>:
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	80 91 7f 04 	lds	r24, 0x047F
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	80 93 7f 04 	sts	0x047F, r24
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <_ZNK8SdVolume5isEOCEm>:
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	2b 97       	sbiw	r28, 0x0b	; 11
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	4b 83       	std	Y+3, r20	; 0x03
    18d0:	5c 83       	std	Y+4, r21	; 0x04
    18d2:	6d 83       	std	Y+5, r22	; 0x05
    18d4:	7e 83       	std	Y+6, r23	; 0x06
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	87 89       	ldd	r24, Z+23	; 0x17
    18dc:	80 31       	cpi	r24, 0x10	; 16
    18de:	49 f4       	brne	.+18     	; 0x18f2 <_ZNK8SdVolume5isEOCEm+0x3c>
    18e0:	28 ef       	ldi	r18, 0xF8	; 248
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	2f 83       	std	Y+7, r18	; 0x07
    18ea:	38 87       	std	Y+8, r19	; 0x08
    18ec:	49 87       	std	Y+9, r20	; 0x09
    18ee:	5a 87       	std	Y+10, r21	; 0x0a
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <_ZNK8SdVolume5isEOCEm+0x4c>
    18f2:	88 ef       	ldi	r24, 0xF8	; 248
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	af ef       	ldi	r26, 0xFF	; 255
    18f8:	bf e0       	ldi	r27, 0x0F	; 15
    18fa:	8f 83       	std	Y+7, r24	; 0x07
    18fc:	98 87       	std	Y+8, r25	; 0x08
    18fe:	a9 87       	std	Y+9, r26	; 0x09
    1900:	ba 87       	std	Y+10, r27	; 0x0a
    1902:	1b 86       	std	Y+11, r1	; 0x0b
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	ad 81       	ldd	r26, Y+5	; 0x05
    190a:	be 81       	ldd	r27, Y+6	; 0x06
    190c:	2f 81       	ldd	r18, Y+7	; 0x07
    190e:	38 85       	ldd	r19, Y+8	; 0x08
    1910:	49 85       	ldd	r20, Y+9	; 0x09
    1912:	5a 85       	ldd	r21, Y+10	; 0x0a
    1914:	82 17       	cp	r24, r18
    1916:	93 07       	cpc	r25, r19
    1918:	a4 07       	cpc	r26, r20
    191a:	b5 07       	cpc	r27, r21
    191c:	10 f0       	brcs	.+4      	; 0x1922 <_ZNK8SdVolume5isEOCEm+0x6c>
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	3b 87       	std	Y+11, r19	; 0x0b
    1922:	8b 85       	ldd	r24, Y+11	; 0x0b
    1924:	2b 96       	adiw	r28, 0x0b	; 11
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <_ZN6SdFile7seekSetEm>:
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	62 97       	sbiw	r28, 0x12	; 18
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	9a 87       	std	Y+10, r25	; 0x0a
    1954:	89 87       	std	Y+9, r24	; 0x09
    1956:	4b 87       	std	Y+11, r20	; 0x0b
    1958:	5c 87       	std	Y+12, r21	; 0x0c
    195a:	6d 87       	std	Y+13, r22	; 0x0d
    195c:	7e 87       	std	Y+14, r23	; 0x0e
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	10 df       	rcall	.-480    	; 0x1784 <_ZNK6SdFile6isOpenEv>
    1964:	88 23       	and	r24, r24
    1966:	79 f0       	breq	.+30     	; 0x1986 <_ZN6SdFile7seekSetEm+0x50>
    1968:	e9 85       	ldd	r30, Y+9	; 0x09
    196a:	fa 85       	ldd	r31, Y+10	; 0x0a
    196c:	23 89       	ldd	r18, Z+19	; 0x13
    196e:	34 89       	ldd	r19, Z+20	; 0x14
    1970:	45 89       	ldd	r20, Z+21	; 0x15
    1972:	56 89       	ldd	r21, Z+22	; 0x16
    1974:	8b 85       	ldd	r24, Y+11	; 0x0b
    1976:	9c 85       	ldd	r25, Y+12	; 0x0c
    1978:	ad 85       	ldd	r26, Y+13	; 0x0d
    197a:	be 85       	ldd	r27, Y+14	; 0x0e
    197c:	28 17       	cp	r18, r24
    197e:	39 07       	cpc	r19, r25
    1980:	4a 07       	cpc	r20, r26
    1982:	5b 07       	cpc	r21, r27
    1984:	18 f4       	brcc	.+6      	; 0x198c <_ZN6SdFile7seekSetEm+0x56>
    1986:	01 e0       	ldi	r16, 0x01	; 1
    1988:	0a 8b       	std	Y+18, r16	; 0x12
    198a:	01 c0       	rjmp	.+2      	; 0x198e <_ZN6SdFile7seekSetEm+0x58>
    198c:	1a 8a       	std	Y+18, r1	; 0x12
    198e:	8a 89       	ldd	r24, Y+18	; 0x12
    1990:	88 23       	and	r24, r24
    1992:	11 f0       	breq	.+4      	; 0x1998 <_ZN6SdFile7seekSetEm+0x62>
    1994:	19 8a       	std	Y+17, r1	; 0x11
    1996:	e6 c0       	rjmp	.+460    	; 0x1b64 <_ZN6SdFile7seekSetEm+0x22e>
    1998:	e9 85       	ldd	r30, Y+9	; 0x09
    199a:	fa 85       	ldd	r31, Y+10	; 0x0a
    199c:	85 81       	ldd	r24, Z+5	; 0x05
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	69 f4       	brne	.+26     	; 0x19bc <_ZN6SdFile7seekSetEm+0x86>
    19a2:	e9 85       	ldd	r30, Y+9	; 0x09
    19a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    19a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    19aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    19ac:	be 85       	ldd	r27, Y+14	; 0x0e
    19ae:	82 87       	std	Z+10, r24	; 0x0a
    19b0:	93 87       	std	Z+11, r25	; 0x0b
    19b2:	a4 87       	std	Z+12, r26	; 0x0c
    19b4:	b5 87       	std	Z+13, r27	; 0x0d
    19b6:	11 e0       	ldi	r17, 0x01	; 1
    19b8:	19 8b       	std	Y+17, r17	; 0x11
    19ba:	d4 c0       	rjmp	.+424    	; 0x1b64 <_ZN6SdFile7seekSetEm+0x22e>
    19bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19be:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    19c2:	be 85       	ldd	r27, Y+14	; 0x0e
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	a1 05       	cpc	r26, r1
    19c8:	b1 05       	cpc	r27, r1
    19ca:	79 f4       	brne	.+30     	; 0x19ea <_ZN6SdFile7seekSetEm+0xb4>
    19cc:	e9 85       	ldd	r30, Y+9	; 0x09
    19ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    19d0:	16 82       	std	Z+6, r1	; 0x06
    19d2:	17 82       	std	Z+7, r1	; 0x07
    19d4:	10 86       	std	Z+8, r1	; 0x08
    19d6:	11 86       	std	Z+9, r1	; 0x09
    19d8:	e9 85       	ldd	r30, Y+9	; 0x09
    19da:	fa 85       	ldd	r31, Y+10	; 0x0a
    19dc:	12 86       	std	Z+10, r1	; 0x0a
    19de:	13 86       	std	Z+11, r1	; 0x0b
    19e0:	14 86       	std	Z+12, r1	; 0x0c
    19e2:	15 86       	std	Z+13, r1	; 0x0d
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 8b       	std	Y+17, r24	; 0x11
    19e8:	bd c0       	rjmp	.+378    	; 0x1b64 <_ZN6SdFile7seekSetEm+0x22e>
    19ea:	e9 85       	ldd	r30, Y+9	; 0x09
    19ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    19ee:	82 85       	ldd	r24, Z+10	; 0x0a
    19f0:	93 85       	ldd	r25, Z+11	; 0x0b
    19f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    19f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    19f6:	9c 01       	movw	r18, r24
    19f8:	ad 01       	movw	r20, r26
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	30 40       	sbci	r19, 0x00	; 0
    19fe:	40 40       	sbci	r20, 0x00	; 0
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	e9 85       	ldd	r30, Y+9	; 0x09
    1a04:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a06:	03 8c       	ldd	r0, Z+27	; 0x1b
    1a08:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	85 85       	ldd	r24, Z+13	; 0x0d
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	09 96       	adiw	r24, 0x09	; 9
    1a14:	79 01       	movw	r14, r18
    1a16:	8a 01       	movw	r16, r20
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <_ZN6SdFile7seekSetEm+0xec>
    1a1a:	16 95       	lsr	r17
    1a1c:	07 95       	ror	r16
    1a1e:	f7 94       	ror	r15
    1a20:	e7 94       	ror	r14
    1a22:	8a 95       	dec	r24
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <_ZN6SdFile7seekSetEm+0xe4>
    1a26:	d8 01       	movw	r26, r16
    1a28:	c7 01       	movw	r24, r14
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	af 83       	std	Y+7, r26	; 0x07
    1a30:	b8 87       	std	Y+8, r27	; 0x08
    1a32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a36:	ad 85       	ldd	r26, Y+13	; 0x0d
    1a38:	be 85       	ldd	r27, Y+14	; 0x0e
    1a3a:	9c 01       	movw	r18, r24
    1a3c:	ad 01       	movw	r20, r26
    1a3e:	21 50       	subi	r18, 0x01	; 1
    1a40:	30 40       	sbci	r19, 0x00	; 0
    1a42:	40 40       	sbci	r20, 0x00	; 0
    1a44:	50 40       	sbci	r21, 0x00	; 0
    1a46:	e9 85       	ldd	r30, Y+9	; 0x09
    1a48:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a4a:	03 8c       	ldd	r0, Z+27	; 0x1b
    1a4c:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1a4e:	e0 2d       	mov	r30, r0
    1a50:	85 85       	ldd	r24, Z+13	; 0x0d
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	09 96       	adiw	r24, 0x09	; 9
    1a58:	79 01       	movw	r14, r18
    1a5a:	8a 01       	movw	r16, r20
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <_ZN6SdFile7seekSetEm+0x130>
    1a5e:	16 95       	lsr	r17
    1a60:	07 95       	ror	r16
    1a62:	f7 94       	ror	r15
    1a64:	e7 94       	ror	r14
    1a66:	8a 95       	dec	r24
    1a68:	d2 f7       	brpl	.-12     	; 0x1a5e <_ZN6SdFile7seekSetEm+0x128>
    1a6a:	d8 01       	movw	r26, r16
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	ab 83       	std	Y+3, r26	; 0x03
    1a74:	bc 83       	std	Y+4, r27	; 0x04
    1a76:	29 81       	ldd	r18, Y+1	; 0x01
    1a78:	3a 81       	ldd	r19, Y+2	; 0x02
    1a7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1a7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	af 81       	ldd	r26, Y+7	; 0x07
    1a84:	b8 85       	ldd	r27, Y+8	; 0x08
    1a86:	28 17       	cp	r18, r24
    1a88:	39 07       	cpc	r19, r25
    1a8a:	4a 07       	cpc	r20, r26
    1a8c:	5b 07       	cpc	r21, r27
    1a8e:	50 f0       	brcs	.+20     	; 0x1aa4 <_ZN6SdFile7seekSetEm+0x16e>
    1a90:	e9 85       	ldd	r30, Y+9	; 0x09
    1a92:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a94:	82 85       	ldd	r24, Z+10	; 0x0a
    1a96:	93 85       	ldd	r25, Z+11	; 0x0b
    1a98:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	a1 05       	cpc	r26, r1
    1aa0:	b1 05       	cpc	r27, r1
    1aa2:	69 f4       	brne	.+26     	; 0x1abe <_ZN6SdFile7seekSetEm+0x188>
    1aa4:	e9 85       	ldd	r30, Y+9	; 0x09
    1aa6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1aa8:	87 89       	ldd	r24, Z+23	; 0x17
    1aaa:	90 8d       	ldd	r25, Z+24	; 0x18
    1aac:	a1 8d       	ldd	r26, Z+25	; 0x19
    1aae:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1ab0:	e9 85       	ldd	r30, Y+9	; 0x09
    1ab2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ab4:	86 83       	std	Z+6, r24	; 0x06
    1ab6:	97 83       	std	Z+7, r25	; 0x07
    1ab8:	a0 87       	std	Z+8, r26	; 0x08
    1aba:	b1 87       	std	Z+9, r27	; 0x09
    1abc:	2e c0       	rjmp	.+92     	; 0x1b1a <_ZN6SdFile7seekSetEm+0x1e4>
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aca:	4f 81       	ldd	r20, Y+7	; 0x07
    1acc:	58 85       	ldd	r21, Y+8	; 0x08
    1ace:	82 1b       	sub	r24, r18
    1ad0:	93 0b       	sbc	r25, r19
    1ad2:	a4 0b       	sbc	r26, r20
    1ad4:	b5 0b       	sbc	r27, r21
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	ab 83       	std	Y+3, r26	; 0x03
    1adc:	bc 83       	std	Y+4, r27	; 0x04
    1ade:	1d c0       	rjmp	.+58     	; 0x1b1a <_ZN6SdFile7seekSetEm+0x1e4>
    1ae0:	e9 85       	ldd	r30, Y+9	; 0x09
    1ae2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ae4:	63 8d       	ldd	r22, Z+27	; 0x1b
    1ae6:	74 8d       	ldd	r23, Z+28	; 0x1c
    1ae8:	e9 85       	ldd	r30, Y+9	; 0x09
    1aea:	fa 85       	ldd	r31, Y+10	; 0x0a
    1aec:	26 81       	ldd	r18, Z+6	; 0x06
    1aee:	37 81       	ldd	r19, Z+7	; 0x07
    1af0:	40 85       	ldd	r20, Z+8	; 0x08
    1af2:	51 85       	ldd	r21, Z+9	; 0x09
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	fc 01       	movw	r30, r24
    1afa:	36 96       	adiw	r30, 0x06	; 6
    1afc:	cb 01       	movw	r24, r22
    1afe:	ba 01       	movw	r22, r20
    1b00:	a9 01       	movw	r20, r18
    1b02:	9f 01       	movw	r18, r30
    1b04:	c7 d5       	rcall	.+2958   	; 0x2694 <_ZNK8SdVolume6fatGetEmPm>
    1b06:	1f 86       	std	Y+15, r1	; 0x0f
    1b08:	88 23       	and	r24, r24
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <_ZN6SdFile7seekSetEm+0x1da>
    1b0c:	01 e0       	ldi	r16, 0x01	; 1
    1b0e:	0f 87       	std	Y+15, r16	; 0x0f
    1b10:	1f 85       	ldd	r17, Y+15	; 0x0f
    1b12:	11 23       	and	r17, r17
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <_ZN6SdFile7seekSetEm+0x1e4>
    1b16:	19 8a       	std	Y+17, r1	; 0x11
    1b18:	25 c0       	rjmp	.+74     	; 0x1b64 <_ZN6SdFile7seekSetEm+0x22e>
    1b1a:	18 8a       	std	Y+16, r1	; 0x10
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	ab 81       	ldd	r26, Y+3	; 0x03
    1b22:	bc 81       	ldd	r27, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	a1 05       	cpc	r26, r1
    1b28:	b1 05       	cpc	r27, r1
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <_ZN6SdFile7seekSetEm+0x1fa>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	88 8b       	std	Y+16, r24	; 0x10
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	ab 81       	ldd	r26, Y+3	; 0x03
    1b36:	bc 81       	ldd	r27, Y+4	; 0x04
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	a1 09       	sbc	r26, r1
    1b3c:	b1 09       	sbc	r27, r1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	ab 83       	std	Y+3, r26	; 0x03
    1b44:	bc 83       	std	Y+4, r27	; 0x04
    1b46:	e8 88       	ldd	r14, Y+16	; 0x10
    1b48:	ee 20       	and	r14, r14
    1b4a:	51 f6       	brne	.-108    	; 0x1ae0 <_ZN6SdFile7seekSetEm+0x1aa>
    1b4c:	e9 85       	ldd	r30, Y+9	; 0x09
    1b4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b54:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b56:	be 85       	ldd	r27, Y+14	; 0x0e
    1b58:	82 87       	std	Z+10, r24	; 0x0a
    1b5a:	93 87       	std	Z+11, r25	; 0x0b
    1b5c:	a4 87       	std	Z+12, r26	; 0x0c
    1b5e:	b5 87       	std	Z+13, r27	; 0x0d
    1b60:	01 e0       	ldi	r16, 0x01	; 1
    1b62:	09 8b       	std	Y+17, r16	; 0x11
    1b64:	89 89       	ldd	r24, Y+17	; 0x11
    1b66:	62 96       	adiw	r28, 0x12	; 18
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	08 95       	ret

00001b80 <_ZN6SdFile7seekEndEv>:
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <_ZN6SdFile7seekEndEv+0x6>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	23 89       	ldd	r18, Z+19	; 0x13
    1b94:	34 89       	ldd	r19, Z+20	; 0x14
    1b96:	45 89       	ldd	r20, Z+21	; 0x15
    1b98:	56 89       	ldd	r21, Z+22	; 0x16
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	ba 01       	movw	r22, r20
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	c9 de       	rcall	.-622    	; 0x1936 <_ZN6SdFile7seekSetEm>
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <_ZN6SdFile13cacheDirEntryEh>:
/** open() oflag - same as O_WRITE */
uint8_t const O_WRONLY = O_WRITE;
/** open() oflag for reading and writing */
uint8_t const O_RDWR = (O_READ | O_WRITE);
/** open() oflag mask for access modes */
uint8_t const O_ACCMODE = (O_READ | O_WRITE);
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <_ZN6SdFile13cacheDirEntryEh+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <_ZN6SdFile13cacheDirEntryEh+0x8>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <_ZN6SdFile13cacheDirEntryEh+0xa>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
/** The file offset shall be set to the end of the file prior to each write. */
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	86 85       	ldd	r24, Z+14	; 0x0e
    1bc8:	97 85       	ldd	r25, Z+15	; 0x0f
    1bca:	a0 89       	ldd	r26, Z+16	; 0x10
    1bcc:	b1 89       	ldd	r27, Z+17	; 0x11
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1bd4:	0e d4       	rcall	.+2076   	; 0x23f2 <_ZN8SdVolume13cacheRawBlockEmh>
    1bd6:	1e 82       	std	Y+6, r1	; 0x06
    1bd8:	88 23       	and	r24, r24
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <_ZN6SdFile13cacheDirEntryEh+0x32>
    1bdc:	21 e0       	ldi	r18, 0x01	; 1
    1bde:	2e 83       	std	Y+6, r18	; 0x06
    1be0:	3e 81       	ldd	r19, Y+6	; 0x06
    1be2:	33 23       	and	r19, r19
    1be4:	19 f0       	breq	.+6      	; 0x1bec <_ZN6SdFile13cacheDirEntryEh+0x3e>
    1be6:	1d 82       	std	Y+5, r1	; 0x05
    1be8:	1c 82       	std	Y+4, r1	; 0x04
    1bea:	12 c0       	rjmp	.+36     	; 0x1c10 <_ZN6SdFile13cacheDirEntryEh+0x62>
    1bec:	e9 81       	ldd	r30, Y+1	; 0x01
uint8_t const O_APPEND = 0X04;
    1bee:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf0:	82 89       	ldd	r24, Z+18	; 0x12
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	82 95       	swap	r24
    1bfc:	92 95       	swap	r25
    1bfe:	90 7f       	andi	r25, 0xF0	; 240
    1c00:	98 27       	eor	r25, r24
    1c02:	80 7f       	andi	r24, 0xF0	; 240
    1c04:	98 27       	eor	r25, r24
    1c06:	9c 01       	movw	r18, r24
    1c08:	23 58       	subi	r18, 0x83	; 131
    1c0a:	3d 4f       	sbci	r19, 0xFD	; 253
    1c0c:	3d 83       	std	Y+5, r19	; 0x05
    1c0e:	2c 83       	std	Y+4, r18	; 0x04
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	26 96       	adiw	r28, 0x06	; 6
/** synchronous writes - call sync() after each write */
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <_ZN6SdFile4syncEv>:
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	27 97       	sbiw	r28, 0x07	; 7
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	a0 dd       	rcall	.-1216   	; 0x1784 <_ZNK6SdFile6isOpenEv>
    1c44:	1f 82       	std	Y+7, r1	; 0x07
    1c46:	88 23       	and	r24, r24
    1c48:	11 f4       	brne	.+4      	; 0x1c4e <_ZN6SdFile4syncEv+0x28>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	8f 83       	std	Y+7, r24	; 0x07
    1c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c50:	88 23       	and	r24, r24
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <_ZN6SdFile4syncEv+0x32>
    1c54:	1e 82       	std	Y+6, r1	; 0x06
    1c56:	68 c0       	rjmp	.+208    	; 0x1d28 <_ZN6SdFile4syncEv+0x102>
    1c58:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5c:	84 81       	ldd	r24, Z+4	; 0x04
    1c5e:	88 23       	and	r24, r24
    1c60:	0c f0       	brlt	.+2      	; 0x1c64 <_ZN6SdFile4syncEv+0x3e>
    1c62:	60 c0       	rjmp	.+192    	; 0x1d24 <_ZN6SdFile4syncEv+0xfe>
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	a1 df       	rcall	.-190    	; 0x1bae <_ZN6SdFile13cacheDirEntryEh>
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <_ZN6SdFile4syncEv+0x56>
    1c78:	1e 82       	std	Y+6, r1	; 0x06
    1c7a:	56 c0       	rjmp	.+172    	; 0x1d28 <_ZN6SdFile4syncEv+0x102>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	53 dd       	rcall	.-1370   	; 0x1728 <_ZNK6SdFile5isDirEv>
    1c82:	1d 82       	std	Y+5, r1	; 0x05
    1c84:	88 23       	and	r24, r24
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <_ZN6SdFile4syncEv+0x66>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	88 23       	and	r24, r24
    1c90:	61 f0       	breq	.+24     	; 0x1caa <_ZN6SdFile4syncEv+0x84>
    1c92:	eb 81       	ldd	r30, Y+3	; 0x03
    1c94:	fc 81       	ldd	r31, Y+4	; 0x04
    1c96:	83 89       	ldd	r24, Z+19	; 0x13
    1c98:	94 89       	ldd	r25, Z+20	; 0x14
    1c9a:	a5 89       	ldd	r26, Z+21	; 0x15
    1c9c:	b6 89       	ldd	r27, Z+22	; 0x16
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	84 8f       	std	Z+28, r24	; 0x1c
    1ca4:	95 8f       	std	Z+29, r25	; 0x1d
    1ca6:	a6 8f       	std	Z+30, r26	; 0x1e
    1ca8:	b7 8f       	std	Z+31, r27	; 0x1f
    1caa:	eb 81       	ldd	r30, Y+3	; 0x03
    1cac:	fc 81       	ldd	r31, Y+4	; 0x04
    1cae:	87 89       	ldd	r24, Z+23	; 0x17
    1cb0:	90 8d       	ldd	r25, Z+24	; 0x18
    1cb2:	a1 8d       	ldd	r26, Z+25	; 0x19
    1cb4:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	93 8f       	std	Z+27, r25	; 0x1b
    1cbc:	82 8f       	std	Z+26, r24	; 0x1a
    1cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc2:	87 89       	ldd	r24, Z+23	; 0x17
    1cc4:	90 8d       	ldd	r25, Z+24	; 0x18
    1cc6:	a1 8d       	ldd	r26, Z+25	; 0x19
    1cc8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1cca:	cd 01       	movw	r24, r26
    1ccc:	aa 27       	eor	r26, r26
    1cce:	bb 27       	eor	r27, r27
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	95 8b       	std	Z+21, r25	; 0x15
    1cd6:	84 8b       	std	Z+20, r24	; 0x14
    1cd8:	80 91 7b 02 	lds	r24, 0x027B
    1cdc:	90 91 7c 02 	lds	r25, 0x027C
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	c9 f0       	breq	.+50     	; 0x1d16 <_ZN6SdFile4syncEv+0xf0>
    1ce4:	e0 91 7b 02 	lds	r30, 0x027B
    1ce8:	f0 91 7c 02 	lds	r31, 0x027C
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	48 5e       	subi	r20, 0xE8	; 232
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfa:	9c 01       	movw	r18, r24
    1cfc:	2a 5e       	subi	r18, 0xEA	; 234
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	ca 01       	movw	r24, r20
    1d02:	b9 01       	movw	r22, r18
    1d04:	09 95       	icall
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	80 8d       	ldd	r24, Z+24	; 0x18
    1d0c:	91 8d       	ldd	r25, Z+25	; 0x19
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	93 8b       	std	Z+19, r25	; 0x13
    1d14:	82 8b       	std	Z+18, r24	; 0x12
    1d16:	eb 81       	ldd	r30, Y+3	; 0x03
    1d18:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d20:	fc 81       	ldd	r31, Y+4	; 0x04
    1d22:	84 83       	std	Z+4, r24	; 0x04
    1d24:	02 d3       	rcall	.+1540   	; 0x232a <_ZN8SdVolume10cacheFlushEv>
    1d26:	8e 83       	std	Y+6, r24	; 0x06
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	27 96       	adiw	r28, 0x07	; 7
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <_ZN8SdVolume10writeBlockEmPKh>:
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	28 97       	sbiw	r28, 0x08	; 8
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	4b 83       	std	Y+3, r20	; 0x03
    1d56:	5c 83       	std	Y+4, r21	; 0x04
    1d58:	6d 83       	std	Y+5, r22	; 0x05
    1d5a:	7e 83       	std	Y+6, r23	; 0x06
    1d5c:	38 87       	std	Y+8, r19	; 0x08
    1d5e:	2f 83       	std	Y+7, r18	; 0x07
    return sdCard_->writeBlock(block, dst);
    1d60:	80 91 7d 04 	lds	r24, 0x047D
    1d64:	90 91 7e 04 	lds	r25, 0x047E
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	4d 81       	ldd	r20, Y+5	; 0x05
    1d6e:	5e 81       	ldd	r21, Y+6	; 0x06
    1d70:	ef 81       	ldd	r30, Y+7	; 0x07
    1d72:	f8 85       	ldd	r31, Y+8	; 0x08
    1d74:	ba 01       	movw	r22, r20
    1d76:	a9 01       	movw	r20, r18
    1d78:	9f 01       	movw	r18, r30
    1d7a:	b6 da       	rcall	.-2708   	; 0x12e8 <_ZN7Sd2Card10writeBlockEmPKh>
    1d7c:	28 96       	adiw	r28, 0x08	; 8
  }
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <_ZN8SdVolume9fatPutEOCEm>:
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <_ZN8SdVolume9fatPutEOCEm+0xa>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <_ZN8SdVolume9fatPutEOCEm+0xc>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <_ZN8SdVolume9fatPutEOCEm+0xe>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	4b 83       	std	Y+3, r20	; 0x03
    1da6:	5c 83       	std	Y+4, r21	; 0x04
    1da8:	6d 83       	std	Y+5, r22	; 0x05
    1daa:	7e 83       	std	Y+6, r23	; 0x06
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	4d 81       	ldd	r20, Y+5	; 0x05
    1db6:	5e 81       	ldd	r21, Y+6	; 0x06
    1db8:	ba 01       	movw	r22, r20
    1dba:	a9 01       	movw	r20, r18
    1dbc:	0f ef       	ldi	r16, 0xFF	; 255
    1dbe:	1f ef       	ldi	r17, 0xFF	; 255
    1dc0:	2f ef       	ldi	r18, 0xFF	; 255
    1dc2:	3f e0       	ldi	r19, 0x0F	; 15
    1dc4:	77 d3       	rcall	.+1774   	; 0x24b4 <_ZN8SdVolume6fatPutEmm>
    1dc6:	26 96       	adiw	r28, 0x06	; 6
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <_ZN6SdFile10addClusterEv>:
#include "FatStructs.h"
#include "Print.h"
//------------------------------------------------------------------------------
/**
 * Allow use of deprecated functions if non-zero
 */
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <_ZN6SdFile10addClusterEv+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <_ZN6SdFile10addClusterEv+0x8>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
#define ALLOW_DEPRECATED_FUNCTIONS 1
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	23 8d       	ldd	r18, Z+27	; 0x1b
    1df2:	34 8d       	ldd	r19, Z+28	; 0x1c
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	fc 01       	movw	r30, r24
    1dfa:	36 96       	adiw	r30, 0x06	; 6
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	9f 01       	movw	r18, r30
    1e08:	12 d5       	rcall	.+2596   	; 0x282e <_ZN8SdVolume15allocContiguousEmPm>
    1e0a:	1c 82       	std	Y+4, r1	; 0x04
    1e0c:	88 23       	and	r24, r24
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <_ZN6SdFile10addClusterEv+0x38>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	8c 83       	std	Y+4, r24	; 0x04
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	88 23       	and	r24, r24
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <_ZN6SdFile10addClusterEv+0x42>
    1e1a:	1b 82       	std	Y+3, r1	; 0x03
    1e1c:	1f c0       	rjmp	.+62     	; 0x1e5c <_ZN6SdFile10addClusterEv+0x80>
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
//------------------------------------------------------------------------------
// forward declaration since SdVolume is used in SdFile
class SdVolume;
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	87 89       	ldd	r24, Z+23	; 0x17
    1e24:	90 8d       	ldd	r25, Z+24	; 0x18
    1e26:	a1 8d       	ldd	r26, Z+25	; 0x19
    1e28:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	99 f4       	brne	.+38     	; 0x1e58 <_ZN6SdFile10addClusterEv+0x7c>
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
//==============================================================================
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	86 81       	ldd	r24, Z+6	; 0x06
    1e38:	97 81       	ldd	r25, Z+7	; 0x07
    1e3a:	a0 85       	ldd	r26, Z+8	; 0x08
    1e3c:	b1 85       	ldd	r27, Z+9	; 0x09
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	87 8b       	std	Z+23, r24	; 0x17
    1e44:	90 8f       	std	Z+24, r25	; 0x18
    1e46:	a1 8f       	std	Z+25, r26	; 0x19
    1e48:	b2 8f       	std	Z+26, r27	; 0x1a
    1e4a:	e9 81       	ldd	r30, Y+1	; 0x01
// SdFile class
    1e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4e:	84 81       	ldd	r24, Z+4	; 0x04
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	84 83       	std	Z+4, r24	; 0x04
    1e58:	81 e0       	ldi	r24, 0x01	; 1

// flags for ls()
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	0f 90       	pop	r0
/** ls() flag to print modify date */
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <_ZN6SdFile5writeEPKvj>:
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	a7 97       	sbiw	r28, 0x27	; 39
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	9f 8b       	std	Y+23, r25	; 0x17
    1e82:	8e 8b       	std	Y+22, r24	; 0x16
    1e84:	79 8f       	std	Y+25, r23	; 0x19
    1e86:	68 8f       	std	Y+24, r22	; 0x18
    1e88:	5b 8f       	std	Y+27, r21	; 0x1b
    1e8a:	4a 8f       	std	Y+26, r20	; 0x1a
    1e8c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e8e:	99 8d       	ldd	r25, Y+25	; 0x19
    1e90:	99 8b       	std	Y+17, r25	; 0x11
    1e92:	88 8b       	std	Y+16, r24	; 0x10
    1e94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e96:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e98:	9f 87       	std	Y+15, r25	; 0x0f
    1e9a:	8e 87       	std	Y+14, r24	; 0x0e
    1e9c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e9e:	9f 89       	ldd	r25, Y+23	; 0x17
    1ea0:	5a dc       	rcall	.-1868   	; 0x1756 <_ZNK6SdFile6isFileEv>
    1ea2:	88 23       	and	r24, r24
    1ea4:	49 f0       	breq	.+18     	; 0x1eb8 <_ZN6SdFile5writeEPKvj+0x4c>
    1ea6:	ee 89       	ldd	r30, Y+22	; 0x16
    1ea8:	ff 89       	ldd	r31, Y+23	; 0x17
    1eaa:	84 81       	ldd	r24, Z+4	; 0x04
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	82 70       	andi	r24, 0x02	; 2
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	19 f4       	brne	.+6      	; 0x1ebe <_ZN6SdFile5writeEPKvj+0x52>
    1eb8:	21 e0       	ldi	r18, 0x01	; 1
    1eba:	2e a3       	std	Y+38, r18	; 0x26
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <_ZN6SdFile5writeEPKvj+0x54>
    1ebe:	1e a2       	std	Y+38, r1	; 0x26
    1ec0:	8e a1       	ldd	r24, Y+38	; 0x26
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <_ZN6SdFile5writeEPKvj+0x5c>
    1ec6:	06 c2       	rjmp	.+1036   	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    1ec8:	ee 89       	ldd	r30, Y+22	; 0x16
    1eca:	ff 89       	ldd	r31, Y+23	; 0x17
    1ecc:	84 81       	ldd	r24, Z+4	; 0x04
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	84 70       	andi	r24, 0x04	; 4
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <_ZN6SdFile5writeEPKvj+0x70>
    1eda:	a8 c1       	rjmp	.+848    	; 0x222c <_ZN6SdFile5writeEPKvj+0x3c0>
    1edc:	ee 89       	ldd	r30, Y+22	; 0x16
    1ede:	ff 89       	ldd	r31, Y+23	; 0x17
    1ee0:	22 85       	ldd	r18, Z+10	; 0x0a
    1ee2:	33 85       	ldd	r19, Z+11	; 0x0b
    1ee4:	44 85       	ldd	r20, Z+12	; 0x0c
    1ee6:	55 85       	ldd	r21, Z+13	; 0x0d
    1ee8:	ee 89       	ldd	r30, Y+22	; 0x16
    1eea:	ff 89       	ldd	r31, Y+23	; 0x17
    1eec:	83 89       	ldd	r24, Z+19	; 0x13
    1eee:	94 89       	ldd	r25, Z+20	; 0x14
    1ef0:	a5 89       	ldd	r26, Z+21	; 0x15
    1ef2:	b6 89       	ldd	r27, Z+22	; 0x16
    1ef4:	28 17       	cp	r18, r24
    1ef6:	39 07       	cpc	r19, r25
    1ef8:	4a 07       	cpc	r20, r26
    1efa:	5b 07       	cpc	r21, r27
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <_ZN6SdFile5writeEPKvj+0x94>
    1efe:	96 c1       	rjmp	.+812    	; 0x222c <_ZN6SdFile5writeEPKvj+0x3c0>
    1f00:	8e 89       	ldd	r24, Y+22	; 0x16
    1f02:	9f 89       	ldd	r25, Y+23	; 0x17
    1f04:	3d de       	rcall	.-902    	; 0x1b80 <_ZN6SdFile7seekEndEv>
    1f06:	1d a2       	std	Y+37, r1	; 0x25
    1f08:	88 23       	and	r24, r24
    1f0a:	11 f4       	brne	.+4      	; 0x1f10 <_ZN6SdFile5writeEPKvj+0xa4>
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	4d a3       	std	Y+37, r20	; 0x25
    1f10:	5d a1       	ldd	r21, Y+37	; 0x25
    1f12:	55 23       	and	r21, r21
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <_ZN6SdFile5writeEPKvj+0xac>
    1f16:	de c1       	rjmp	.+956    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    1f18:	89 c1       	rjmp	.+786    	; 0x222c <_ZN6SdFile5writeEPKvj+0x3c0>
    1f1a:	ee 89       	ldd	r30, Y+22	; 0x16
    1f1c:	ff 89       	ldd	r31, Y+23	; 0x17
    1f1e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f20:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f22:	ee 89       	ldd	r30, Y+22	; 0x16
    1f24:	ff 89       	ldd	r31, Y+23	; 0x17
    1f26:	22 85       	ldd	r18, Z+10	; 0x0a
    1f28:	33 85       	ldd	r19, Z+11	; 0x0b
    1f2a:	44 85       	ldd	r20, Z+12	; 0x0c
    1f2c:	55 85       	ldd	r21, Z+13	; 0x0d
    1f2e:	ba 01       	movw	r22, r20
    1f30:	a9 01       	movw	r20, r18
    1f32:	40 dc       	rcall	.-1920   	; 0x17b4 <_ZNK8SdVolume14blockOfClusterEm>
    1f34:	8d 87       	std	Y+13, r24	; 0x0d
    1f36:	ee 89       	ldd	r30, Y+22	; 0x16
    1f38:	ff 89       	ldd	r31, Y+23	; 0x17
    1f3a:	82 85       	ldd	r24, Z+10	; 0x0a
    1f3c:	93 85       	ldd	r25, Z+11	; 0x0b
    1f3e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f40:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f42:	91 70       	andi	r25, 0x01	; 1
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_ZN6SdFile5writeEPKvj+0xe4>
    1f4e:	79 c0       	rjmp	.+242    	; 0x2042 <_ZN6SdFile5writeEPKvj+0x1d6>
    1f50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <_ZN6SdFile5writeEPKvj+0xee>
    1f58:	74 c0       	rjmp	.+232    	; 0x2042 <_ZN6SdFile5writeEPKvj+0x1d6>
    1f5a:	ee 89       	ldd	r30, Y+22	; 0x16
    1f5c:	ff 89       	ldd	r31, Y+23	; 0x17
    1f5e:	86 81       	ldd	r24, Z+6	; 0x06
    1f60:	97 81       	ldd	r25, Z+7	; 0x07
    1f62:	a0 85       	ldd	r26, Z+8	; 0x08
    1f64:	b1 85       	ldd	r27, Z+9	; 0x09
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	a1 05       	cpc	r26, r1
    1f6a:	b1 05       	cpc	r27, r1
    1f6c:	21 f5       	brne	.+72     	; 0x1fb6 <_ZN6SdFile5writeEPKvj+0x14a>
    1f6e:	ee 89       	ldd	r30, Y+22	; 0x16
    1f70:	ff 89       	ldd	r31, Y+23	; 0x17
    1f72:	87 89       	ldd	r24, Z+23	; 0x17
    1f74:	90 8d       	ldd	r25, Z+24	; 0x18
    1f76:	a1 8d       	ldd	r26, Z+25	; 0x19
    1f78:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	a1 05       	cpc	r26, r1
    1f7e:	b1 05       	cpc	r27, r1
    1f80:	69 f4       	brne	.+26     	; 0x1f9c <_ZN6SdFile5writeEPKvj+0x130>
    1f82:	8e 89       	ldd	r24, Y+22	; 0x16
    1f84:	9f 89       	ldd	r25, Y+23	; 0x17
    1f86:	2a df       	rcall	.-428    	; 0x1ddc <_ZN6SdFile10addClusterEv>
    1f88:	1c a2       	std	Y+36, r1	; 0x24
    1f8a:	88 23       	and	r24, r24
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <_ZN6SdFile5writeEPKvj+0x126>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	8c a3       	std	Y+36, r24	; 0x24
    1f92:	9c a1       	ldd	r25, Y+36	; 0x24
    1f94:	99 23       	and	r25, r25
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <_ZN6SdFile5writeEPKvj+0x12e>
    1f98:	9d c1       	rjmp	.+826    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    1f9a:	53 c0       	rjmp	.+166    	; 0x2042 <_ZN6SdFile5writeEPKvj+0x1d6>
    1f9c:	ee 89       	ldd	r30, Y+22	; 0x16
    1f9e:	ff 89       	ldd	r31, Y+23	; 0x17
    1fa0:	87 89       	ldd	r24, Z+23	; 0x17
    1fa2:	90 8d       	ldd	r25, Z+24	; 0x18
    1fa4:	a1 8d       	ldd	r26, Z+25	; 0x19
    1fa6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1fa8:	ee 89       	ldd	r30, Y+22	; 0x16
    1faa:	ff 89       	ldd	r31, Y+23	; 0x17
    1fac:	86 83       	std	Z+6, r24	; 0x06
    1fae:	97 83       	std	Z+7, r25	; 0x07
    1fb0:	a0 87       	std	Z+8, r26	; 0x08
    1fb2:	b1 87       	std	Z+9, r27	; 0x09
    1fb4:	46 c0       	rjmp	.+140    	; 0x2042 <_ZN6SdFile5writeEPKvj+0x1d6>
    1fb6:	ee 89       	ldd	r30, Y+22	; 0x16
    1fb8:	ff 89       	ldd	r31, Y+23	; 0x17
    1fba:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fbc:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fbe:	ee 89       	ldd	r30, Y+22	; 0x16
    1fc0:	ff 89       	ldd	r31, Y+23	; 0x17
    1fc2:	26 81       	ldd	r18, Z+6	; 0x06
    1fc4:	37 81       	ldd	r19, Z+7	; 0x07
    1fc6:	40 85       	ldd	r20, Z+8	; 0x08
    1fc8:	51 85       	ldd	r21, Z+9	; 0x09
    1fca:	fe 01       	movw	r30, r28
    1fcc:	72 96       	adiw	r30, 0x12	; 18
    1fce:	ba 01       	movw	r22, r20
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	9f 01       	movw	r18, r30
    1fd4:	5f d3       	rcall	.+1726   	; 0x2694 <_ZNK8SdVolume6fatGetEmPm>
    1fd6:	1b a2       	std	Y+35, r1	; 0x23
    1fd8:	88 23       	and	r24, r24
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <_ZN6SdFile5writeEPKvj+0x174>
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	2b a3       	std	Y+35, r18	; 0x23
    1fe0:	4b a1       	ldd	r20, Y+35	; 0x23
    1fe2:	44 23       	and	r20, r20
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <_ZN6SdFile5writeEPKvj+0x180>
    1fe6:	1a a2       	std	Y+34, r1	; 0x22
    1fe8:	19 a2       	std	Y+33, r1	; 0x21
    1fea:	7c c1       	rjmp	.+760    	; 0x22e4 <_ZN6SdFile5writeEPKvj+0x478>
    1fec:	ee 89       	ldd	r30, Y+22	; 0x16
    1fee:	ff 89       	ldd	r31, Y+23	; 0x17
    1ff0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ff2:	94 8d       	ldd	r25, Z+28	; 0x1c
    1ff4:	2a 89       	ldd	r18, Y+18	; 0x12
    1ff6:	3b 89       	ldd	r19, Y+19	; 0x13
    1ff8:	4c 89       	ldd	r20, Y+20	; 0x14
    1ffa:	5d 89       	ldd	r21, Y+21	; 0x15
    1ffc:	ba 01       	movw	r22, r20
    1ffe:	a9 01       	movw	r20, r18
    2000:	5a dc       	rcall	.-1868   	; 0x18b6 <_ZNK8SdVolume5isEOCEm>
    2002:	8f a3       	std	Y+39, r24	; 0x27
    2004:	5f a1       	ldd	r21, Y+39	; 0x27
    2006:	55 23       	and	r21, r21
    2008:	11 f0       	breq	.+4      	; 0x200e <_ZN6SdFile5writeEPKvj+0x1a2>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8f a3       	std	Y+39, r24	; 0x27
    200e:	8f a1       	ldd	r24, Y+39	; 0x27
    2010:	88 23       	and	r24, r24
    2012:	69 f0       	breq	.+26     	; 0x202e <_ZN6SdFile5writeEPKvj+0x1c2>
    2014:	8e 89       	ldd	r24, Y+22	; 0x16
    2016:	9f 89       	ldd	r25, Y+23	; 0x17
    2018:	e1 de       	rcall	.-574    	; 0x1ddc <_ZN6SdFile10addClusterEv>
    201a:	18 a2       	std	Y+32, r1	; 0x20
    201c:	88 23       	and	r24, r24
    201e:	11 f4       	brne	.+4      	; 0x2024 <_ZN6SdFile5writeEPKvj+0x1b8>
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	98 a3       	std	Y+32, r25	; 0x20
    2024:	28 a1       	ldd	r18, Y+32	; 0x20
    2026:	22 23       	and	r18, r18
    2028:	09 f0       	breq	.+2      	; 0x202c <_ZN6SdFile5writeEPKvj+0x1c0>
    202a:	54 c1       	rjmp	.+680    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    202c:	0a c0       	rjmp	.+20     	; 0x2042 <_ZN6SdFile5writeEPKvj+0x1d6>
    202e:	8a 89       	ldd	r24, Y+18	; 0x12
    2030:	9b 89       	ldd	r25, Y+19	; 0x13
    2032:	ac 89       	ldd	r26, Y+20	; 0x14
    2034:	bd 89       	ldd	r27, Y+21	; 0x15
    2036:	ee 89       	ldd	r30, Y+22	; 0x16
    2038:	ff 89       	ldd	r31, Y+23	; 0x17
    203a:	86 83       	std	Z+6, r24	; 0x06
    203c:	97 83       	std	Z+7, r25	; 0x07
    203e:	a0 87       	std	Z+8, r26	; 0x08
    2040:	b1 87       	std	Z+9, r27	; 0x09
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	32 e0       	ldi	r19, 0x02	; 2
    2046:	8b 85       	ldd	r24, Y+11	; 0x0b
    2048:	9c 85       	ldd	r25, Y+12	; 0x0c
    204a:	a9 01       	movw	r20, r18
    204c:	48 1b       	sub	r20, r24
    204e:	59 0b       	sbc	r21, r25
    2050:	ca 01       	movw	r24, r20
    2052:	9a 87       	std	Y+10, r25	; 0x0a
    2054:	89 87       	std	Y+9, r24	; 0x09
    2056:	29 85       	ldd	r18, Y+9	; 0x09
    2058:	3a 85       	ldd	r19, Y+10	; 0x0a
    205a:	8e 85       	ldd	r24, Y+14	; 0x0e
    205c:	9f 85       	ldd	r25, Y+15	; 0x0f
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	20 f4       	brcc	.+8      	; 0x206c <_ZN6SdFile5writeEPKvj+0x200>
    2064:	8e 85       	ldd	r24, Y+14	; 0x0e
    2066:	9f 85       	ldd	r25, Y+15	; 0x0f
    2068:	9a 87       	std	Y+10, r25	; 0x0a
    206a:	89 87       	std	Y+9, r24	; 0x09
    206c:	ee 89       	ldd	r30, Y+22	; 0x16
    206e:	ff 89       	ldd	r31, Y+23	; 0x17
    2070:	83 8d       	ldd	r24, Z+27	; 0x1b
    2072:	94 8d       	ldd	r25, Z+28	; 0x1c
    2074:	ee 89       	ldd	r30, Y+22	; 0x16
    2076:	ff 89       	ldd	r31, Y+23	; 0x17
    2078:	26 81       	ldd	r18, Z+6	; 0x06
    207a:	37 81       	ldd	r19, Z+7	; 0x07
    207c:	40 85       	ldd	r20, Z+8	; 0x08
    207e:	51 85       	ldd	r21, Z+9	; 0x09
    2080:	ba 01       	movw	r22, r20
    2082:	a9 01       	movw	r20, r18
    2084:	c0 db       	rcall	.-2176   	; 0x1806 <_ZNK8SdVolume17clusterStartBlockEm>
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	8d 85       	ldd	r24, Y+13	; 0x0d
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e0       	ldi	r26, 0x00	; 0
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	a4 1f       	adc	r26, r20
    209a:	b5 1f       	adc	r27, r21
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	af 83       	std	Y+7, r26	; 0x07
    20a2:	b8 87       	std	Y+8, r27	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	52 e0       	ldi	r21, 0x02	; 2
    20aa:	80 30       	cpi	r24, 0x00	; 0
    20ac:	95 07       	cpc	r25, r21
    20ae:	d9 f5       	brne	.+118    	; 0x2126 <_ZN6SdFile5writeEPKvj+0x2ba>
    20b0:	20 91 02 01 	lds	r18, 0x0102
    20b4:	30 91 03 01 	lds	r19, 0x0103
    20b8:	40 91 04 01 	lds	r20, 0x0104
    20bc:	50 91 05 01 	lds	r21, 0x0105
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	af 81       	ldd	r26, Y+7	; 0x07
    20c6:	b8 85       	ldd	r27, Y+8	; 0x08
    20c8:	28 17       	cp	r18, r24
    20ca:	39 07       	cpc	r19, r25
    20cc:	4a 07       	cpc	r20, r26
    20ce:	5b 07       	cpc	r21, r27
    20d0:	61 f4       	brne	.+24     	; 0x20ea <_ZN6SdFile5writeEPKvj+0x27e>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	af ef       	ldi	r26, 0xFF	; 255
    20d8:	bf ef       	ldi	r27, 0xFF	; 255
    20da:	80 93 02 01 	sts	0x0102, r24
    20de:	90 93 03 01 	sts	0x0103, r25
    20e2:	a0 93 04 01 	sts	0x0104, r26
    20e6:	b0 93 05 01 	sts	0x0105, r27
    20ea:	ee 89       	ldd	r30, Y+22	; 0x16
    20ec:	ff 89       	ldd	r31, Y+23	; 0x17
    20ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    20f0:	94 8d       	ldd	r25, Z+28	; 0x1c
    20f2:	2d 81       	ldd	r18, Y+5	; 0x05
    20f4:	3e 81       	ldd	r19, Y+6	; 0x06
    20f6:	4f 81       	ldd	r20, Y+7	; 0x07
    20f8:	58 85       	ldd	r21, Y+8	; 0x08
    20fa:	e8 89       	ldd	r30, Y+16	; 0x10
    20fc:	f9 89       	ldd	r31, Y+17	; 0x11
    20fe:	ba 01       	movw	r22, r20
    2100:	a9 01       	movw	r20, r18
    2102:	9f 01       	movw	r18, r30
    2104:	1b de       	rcall	.-970    	; 0x1d3c <_ZN8SdVolume10writeBlockEmPKh>
    2106:	1f 8e       	std	Y+31, r1	; 0x1f
    2108:	88 23       	and	r24, r24
    210a:	11 f4       	brne	.+4      	; 0x2110 <_ZN6SdFile5writeEPKvj+0x2a4>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
    2110:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2112:	99 23       	and	r25, r25
    2114:	09 f0       	breq	.+2      	; 0x2118 <_ZN6SdFile5writeEPKvj+0x2ac>
    2116:	de c0       	rjmp	.+444    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    2118:	88 89       	ldd	r24, Y+16	; 0x10
    211a:	99 89       	ldd	r25, Y+17	; 0x11
    211c:	80 50       	subi	r24, 0x00	; 0
    211e:	9e 4f       	sbci	r25, 0xFE	; 254
    2120:	99 8b       	std	Y+17, r25	; 0x11
    2122:	88 8b       	std	Y+16, r24	; 0x10
    2124:	64 c0       	rjmp	.+200    	; 0x21ee <_ZN6SdFile5writeEPKvj+0x382>
    2126:	8b 85       	ldd	r24, Y+11	; 0x0b
    2128:	9c 85       	ldd	r25, Y+12	; 0x0c
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	49 f5       	brne	.+82     	; 0x2180 <_ZN6SdFile5writeEPKvj+0x314>
    212e:	ee 89       	ldd	r30, Y+22	; 0x16
    2130:	ff 89       	ldd	r31, Y+23	; 0x17
    2132:	22 85       	ldd	r18, Z+10	; 0x0a
    2134:	33 85       	ldd	r19, Z+11	; 0x0b
    2136:	44 85       	ldd	r20, Z+12	; 0x0c
    2138:	55 85       	ldd	r21, Z+13	; 0x0d
    213a:	ee 89       	ldd	r30, Y+22	; 0x16
    213c:	ff 89       	ldd	r31, Y+23	; 0x17
    213e:	83 89       	ldd	r24, Z+19	; 0x13
    2140:	94 89       	ldd	r25, Z+20	; 0x14
    2142:	a5 89       	ldd	r26, Z+21	; 0x15
    2144:	b6 89       	ldd	r27, Z+22	; 0x16
    2146:	28 17       	cp	r18, r24
    2148:	39 07       	cpc	r19, r25
    214a:	4a 07       	cpc	r20, r26
    214c:	5b 07       	cpc	r21, r27
    214e:	c0 f0       	brcs	.+48     	; 0x2180 <_ZN6SdFile5writeEPKvj+0x314>
    2150:	ec d0       	rcall	.+472    	; 0x232a <_ZN8SdVolume10cacheFlushEv>
    2152:	1e 8e       	std	Y+30, r1	; 0x1e
    2154:	88 23       	and	r24, r24
    2156:	11 f4       	brne	.+4      	; 0x215c <_ZN6SdFile5writeEPKvj+0x2f0>
    2158:	21 e0       	ldi	r18, 0x01	; 1
    215a:	2e 8f       	std	Y+30, r18	; 0x1e
    215c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    215e:	44 23       	and	r20, r20
    2160:	09 f0       	breq	.+2      	; 0x2164 <_ZN6SdFile5writeEPKvj+0x2f8>
    2162:	b8 c0       	rjmp	.+368    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	af 81       	ldd	r26, Y+7	; 0x07
    216a:	b8 85       	ldd	r27, Y+8	; 0x08
    216c:	80 93 02 01 	sts	0x0102, r24
    2170:	90 93 03 01 	sts	0x0103, r25
    2174:	a0 93 04 01 	sts	0x0104, r26
    2178:	b0 93 05 01 	sts	0x0105, r27
    217c:	90 db       	rcall	.-2272   	; 0x189e <_ZN8SdVolume13cacheSetDirtyEv>
    217e:	11 c0       	rjmp	.+34     	; 0x21a2 <_ZN6SdFile5writeEPKvj+0x336>
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	af 81       	ldd	r26, Y+7	; 0x07
    2186:	b8 85       	ldd	r27, Y+8	; 0x08
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	31 d1       	rcall	.+610    	; 0x23f2 <_ZN8SdVolume13cacheRawBlockEmh>
    2190:	1d 8e       	std	Y+29, r1	; 0x1d
    2192:	88 23       	and	r24, r24
    2194:	11 f4       	brne	.+4      	; 0x219a <_ZN6SdFile5writeEPKvj+0x32e>
    2196:	51 e0       	ldi	r21, 0x01	; 1
    2198:	5d 8f       	std	Y+29, r21	; 0x1d
    219a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219c:	88 23       	and	r24, r24
    219e:	09 f0       	breq	.+2      	; 0x21a2 <_ZN6SdFile5writeEPKvj+0x336>
    21a0:	99 c0       	rjmp	.+306    	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    21a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a6:	83 58       	subi	r24, 0x83	; 131
    21a8:	9d 4f       	sbci	r25, 0xFD	; 253
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	82 0f       	add	r24, r18
    21b8:	93 1f       	adc	r25, r19
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	10 c0       	rjmp	.+32     	; 0x21e0 <_ZN6SdFile5writeEPKvj+0x374>
    21c0:	e8 89       	ldd	r30, Y+16	; 0x10
    21c2:	f9 89       	ldd	r31, Y+17	; 0x11
    21c4:	80 81       	ld	r24, Z
    21c6:	eb 81       	ldd	r30, Y+3	; 0x03
    21c8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ca:	80 83       	st	Z, r24
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	88 89       	ldd	r24, Y+16	; 0x10
    21d8:	99 89       	ldd	r25, Y+17	; 0x11
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	99 8b       	std	Y+17, r25	; 0x11
    21de:	88 8b       	std	Y+16, r24	; 0x10
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	3c 81       	ldd	r19, Y+4	; 0x04
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	28 17       	cp	r18, r24
    21ea:	39 07       	cpc	r19, r25
    21ec:	49 f7       	brne	.-46     	; 0x21c0 <_ZN6SdFile5writeEPKvj+0x354>
    21ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    21f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	a9 01       	movw	r20, r18
    21f8:	48 1b       	sub	r20, r24
    21fa:	59 0b       	sbc	r21, r25
    21fc:	ca 01       	movw	r24, r20
    21fe:	9f 87       	std	Y+15, r25	; 0x0f
    2200:	8e 87       	std	Y+14, r24	; 0x0e
    2202:	ee 89       	ldd	r30, Y+22	; 0x16
    2204:	ff 89       	ldd	r31, Y+23	; 0x17
    2206:	22 85       	ldd	r18, Z+10	; 0x0a
    2208:	33 85       	ldd	r19, Z+11	; 0x0b
    220a:	44 85       	ldd	r20, Z+12	; 0x0c
    220c:	55 85       	ldd	r21, Z+13	; 0x0d
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	cc 01       	movw	r24, r24
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	82 0f       	add	r24, r18
    221a:	93 1f       	adc	r25, r19
    221c:	a4 1f       	adc	r26, r20
    221e:	b5 1f       	adc	r27, r21
    2220:	ee 89       	ldd	r30, Y+22	; 0x16
    2222:	ff 89       	ldd	r31, Y+23	; 0x17
    2224:	82 87       	std	Z+10, r24	; 0x0a
    2226:	93 87       	std	Z+11, r25	; 0x0b
    2228:	a4 87       	std	Z+12, r26	; 0x0c
    222a:	b5 87       	std	Z+13, r27	; 0x0d
    222c:	8e 85       	ldd	r24, Y+14	; 0x0e
    222e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	09 f0       	breq	.+2      	; 0x2236 <_ZN6SdFile5writeEPKvj+0x3ca>
    2234:	72 ce       	rjmp	.-796    	; 0x1f1a <_ZN6SdFile5writeEPKvj+0xae>
    2236:	ee 89       	ldd	r30, Y+22	; 0x16
    2238:	ff 89       	ldd	r31, Y+23	; 0x17
    223a:	22 85       	ldd	r18, Z+10	; 0x0a
    223c:	33 85       	ldd	r19, Z+11	; 0x0b
    223e:	44 85       	ldd	r20, Z+12	; 0x0c
    2240:	55 85       	ldd	r21, Z+13	; 0x0d
    2242:	ee 89       	ldd	r30, Y+22	; 0x16
    2244:	ff 89       	ldd	r31, Y+23	; 0x17
    2246:	83 89       	ldd	r24, Z+19	; 0x13
    2248:	94 89       	ldd	r25, Z+20	; 0x14
    224a:	a5 89       	ldd	r26, Z+21	; 0x15
    224c:	b6 89       	ldd	r27, Z+22	; 0x16
    224e:	82 17       	cp	r24, r18
    2250:	93 07       	cpc	r25, r19
    2252:	a4 07       	cpc	r26, r20
    2254:	b5 07       	cpc	r27, r21
    2256:	a0 f4       	brcc	.+40     	; 0x2280 <_ZN6SdFile5writeEPKvj+0x414>
    2258:	ee 89       	ldd	r30, Y+22	; 0x16
    225a:	ff 89       	ldd	r31, Y+23	; 0x17
    225c:	82 85       	ldd	r24, Z+10	; 0x0a
    225e:	93 85       	ldd	r25, Z+11	; 0x0b
    2260:	a4 85       	ldd	r26, Z+12	; 0x0c
    2262:	b5 85       	ldd	r27, Z+13	; 0x0d
    2264:	ee 89       	ldd	r30, Y+22	; 0x16
    2266:	ff 89       	ldd	r31, Y+23	; 0x17
    2268:	83 8b       	std	Z+19, r24	; 0x13
    226a:	94 8b       	std	Z+20, r25	; 0x14
    226c:	a5 8b       	std	Z+21, r26	; 0x15
    226e:	b6 8b       	std	Z+22, r27	; 0x16
    2270:	ee 89       	ldd	r30, Y+22	; 0x16
    2272:	ff 89       	ldd	r31, Y+23	; 0x17
    2274:	84 81       	ldd	r24, Z+4	; 0x04
    2276:	80 68       	ori	r24, 0x80	; 128
    2278:	ee 89       	ldd	r30, Y+22	; 0x16
    227a:	ff 89       	ldd	r31, Y+23	; 0x17
    227c:	84 83       	std	Z+4, r24	; 0x04
    227e:	11 c0       	rjmp	.+34     	; 0x22a2 <_ZN6SdFile5writeEPKvj+0x436>
    2280:	80 91 7b 02 	lds	r24, 0x027B
    2284:	90 91 7c 02 	lds	r25, 0x027C
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	59 f0       	breq	.+22     	; 0x22a2 <_ZN6SdFile5writeEPKvj+0x436>
    228c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    228e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	39 f0       	breq	.+14     	; 0x22a2 <_ZN6SdFile5writeEPKvj+0x436>
    2294:	ee 89       	ldd	r30, Y+22	; 0x16
    2296:	ff 89       	ldd	r31, Y+23	; 0x17
    2298:	84 81       	ldd	r24, Z+4	; 0x04
    229a:	80 68       	ori	r24, 0x80	; 128
    229c:	ee 89       	ldd	r30, Y+22	; 0x16
    229e:	ff 89       	ldd	r31, Y+23	; 0x17
    22a0:	84 83       	std	Z+4, r24	; 0x04
    22a2:	ee 89       	ldd	r30, Y+22	; 0x16
    22a4:	ff 89       	ldd	r31, Y+23	; 0x17
    22a6:	84 81       	ldd	r24, Z+4	; 0x04
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	88 70       	andi	r24, 0x08	; 8
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	59 f0       	breq	.+22     	; 0x22ca <_ZN6SdFile5writeEPKvj+0x45e>
    22b4:	8e 89       	ldd	r24, Y+22	; 0x16
    22b6:	9f 89       	ldd	r25, Y+23	; 0x17
    22b8:	b6 dc       	rcall	.-1684   	; 0x1c26 <_ZN6SdFile4syncEv>
    22ba:	1c 8e       	std	Y+28, r1	; 0x1c
    22bc:	88 23       	and	r24, r24
    22be:	11 f4       	brne	.+4      	; 0x22c4 <_ZN6SdFile5writeEPKvj+0x458>
    22c0:	51 e0       	ldi	r21, 0x01	; 1
    22c2:	5c 8f       	std	Y+28, r21	; 0x1c
    22c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22c6:	88 23       	and	r24, r24
    22c8:	29 f4       	brne	.+10     	; 0x22d4 <_ZN6SdFile5writeEPKvj+0x468>
    22ca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    22cc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    22ce:	5a a3       	std	Y+34, r21	; 0x22
    22d0:	49 a3       	std	Y+33, r20	; 0x21
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <_ZN6SdFile5writeEPKvj+0x478>
    22d4:	8e 89       	ldd	r24, Y+22	; 0x16
    22d6:	9f 89       	ldd	r25, Y+23	; 0x17
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN5Print13setWriteErrorEi>
    22e0:	1a a2       	std	Y+34, r1	; 0x22
    22e2:	19 a2       	std	Y+33, r1	; 0x21
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	a7 96       	adiw	r28, 0x27	; 39
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <_ZN6SdFile5writeEh>:
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <_ZN6SdFile5writeEh+0x6>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	6b 83       	std	Y+3, r22	; 0x03
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	9e 01       	movw	r18, r28
    2312:	2d 5f       	subi	r18, 0xFD	; 253
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	b9 01       	movw	r22, r18
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	a7 dd       	rcall	.-1202   	; 0x1e6c <_ZN6SdFile5writeEPKvj>
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <_ZN8SdVolume10cacheFlushEv>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <_ZN8SdVolume10cacheFlushEv+0x6>
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
  if (cacheDirty_) {
    2336:	80 91 7f 04 	lds	r24, 0x047F
    233a:	88 23       	and	r24, r24
    233c:	09 f4       	brne	.+2      	; 0x2340 <_ZN8SdVolume10cacheFlushEv+0x16>
    233e:	50 c0       	rjmp	.+160    	; 0x23e0 <_ZN8SdVolume10cacheFlushEv+0xb6>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2340:	80 91 7d 04 	lds	r24, 0x047D
    2344:	90 91 7e 04 	lds	r25, 0x047E
    2348:	20 91 02 01 	lds	r18, 0x0102
    234c:	30 91 03 01 	lds	r19, 0x0103
    2350:	40 91 04 01 	lds	r20, 0x0104
    2354:	50 91 05 01 	lds	r21, 0x0105
    2358:	ed e7       	ldi	r30, 0x7D	; 125
    235a:	f2 e0       	ldi	r31, 0x02	; 2
    235c:	ba 01       	movw	r22, r20
    235e:	a9 01       	movw	r20, r18
    2360:	9f 01       	movw	r18, r30
    2362:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_ZN7Sd2Card10writeBlockEmPKh>
    2366:	1b 82       	std	Y+3, r1	; 0x03
    2368:	88 23       	and	r24, r24
    236a:	11 f4       	brne	.+4      	; 0x2370 <_ZN8SdVolume10cacheFlushEv+0x46>
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	8b 83       	std	Y+3, r24	; 0x03
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	88 23       	and	r24, r24
    2374:	11 f0       	breq	.+4      	; 0x237a <_ZN8SdVolume10cacheFlushEv+0x50>
      return false;
    2376:	1a 82       	std	Y+2, r1	; 0x02
    2378:	35 c0       	rjmp	.+106    	; 0x23e4 <_ZN8SdVolume10cacheFlushEv+0xba>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    237a:	80 91 80 04 	lds	r24, 0x0480
    237e:	90 91 81 04 	lds	r25, 0x0481
    2382:	a0 91 82 04 	lds	r26, 0x0482
    2386:	b0 91 83 04 	lds	r27, 0x0483
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	29 f1       	breq	.+74     	; 0x23dc <_ZN8SdVolume10cacheFlushEv+0xb2>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2392:	80 91 7d 04 	lds	r24, 0x047D
    2396:	90 91 7e 04 	lds	r25, 0x047E
    239a:	20 91 80 04 	lds	r18, 0x0480
    239e:	30 91 81 04 	lds	r19, 0x0481
    23a2:	40 91 82 04 	lds	r20, 0x0482
    23a6:	50 91 83 04 	lds	r21, 0x0483
    23aa:	ed e7       	ldi	r30, 0x7D	; 125
    23ac:	f2 e0       	ldi	r31, 0x02	; 2
    23ae:	ba 01       	movw	r22, r20
    23b0:	a9 01       	movw	r20, r18
    23b2:	9f 01       	movw	r18, r30
    23b4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_ZN7Sd2Card10writeBlockEmPKh>
    23b8:	19 82       	std	Y+1, r1	; 0x01
    23ba:	88 23       	and	r24, r24
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <_ZN8SdVolume10cacheFlushEv+0x98>
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	88 23       	and	r24, r24
    23c6:	11 f0       	breq	.+4      	; 0x23cc <_ZN8SdVolume10cacheFlushEv+0xa2>
        return false;
    23c8:	1a 82       	std	Y+2, r1	; 0x02
    23ca:	0c c0       	rjmp	.+24     	; 0x23e4 <_ZN8SdVolume10cacheFlushEv+0xba>
      }
      cacheMirrorBlock_ = 0;
    23cc:	10 92 80 04 	sts	0x0480, r1
    23d0:	10 92 81 04 	sts	0x0481, r1
    23d4:	10 92 82 04 	sts	0x0482, r1
    23d8:	10 92 83 04 	sts	0x0483, r1
    }
    cacheDirty_ = 0;
    23dc:	10 92 7f 04 	sts	0x047F, r1
  }
  return true;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	28 97       	sbiw	r28, 0x08	; 8
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	69 83       	std	Y+1, r22	; 0x01
    2408:	7a 83       	std	Y+2, r23	; 0x02
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	4d 83       	std	Y+5, r20	; 0x05
  if (cacheBlockNumber_ != blockNumber) {
    2410:	20 91 02 01 	lds	r18, 0x0102
    2414:	30 91 03 01 	lds	r19, 0x0103
    2418:	40 91 04 01 	lds	r20, 0x0104
    241c:	50 91 05 01 	lds	r21, 0x0105
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	ab 81       	ldd	r26, Y+3	; 0x03
    2426:	bc 81       	ldd	r27, Y+4	; 0x04
    2428:	28 17       	cp	r18, r24
    242a:	39 07       	cpc	r19, r25
    242c:	4a 07       	cpc	r20, r26
    242e:	5b 07       	cpc	r21, r27
    2430:	79 f1       	breq	.+94     	; 0x2490 <_ZN8SdVolume13cacheRawBlockEmh+0x9e>
    if (!cacheFlush()) return false;
    2432:	7b df       	rcall	.-266    	; 0x232a <_ZN8SdVolume10cacheFlushEv>
    2434:	18 86       	std	Y+8, r1	; 0x08
    2436:	88 23       	and	r24, r24
    2438:	11 f4       	brne	.+4      	; 0x243e <_ZN8SdVolume13cacheRawBlockEmh+0x4c>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	88 87       	std	Y+8, r24	; 0x08
    243e:	88 85       	ldd	r24, Y+8	; 0x08
    2440:	88 23       	and	r24, r24
    2442:	11 f0       	breq	.+4      	; 0x2448 <_ZN8SdVolume13cacheRawBlockEmh+0x56>
    2444:	1f 82       	std	Y+7, r1	; 0x07
    2446:	2c c0       	rjmp	.+88     	; 0x24a0 <_ZN8SdVolume13cacheRawBlockEmh+0xae>
    2448:	80 91 7d 04 	lds	r24, 0x047D
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    244c:	90 91 7e 04 	lds	r25, 0x047E
    2450:	29 81       	ldd	r18, Y+1	; 0x01
    2452:	3a 81       	ldd	r19, Y+2	; 0x02
    2454:	4b 81       	ldd	r20, Y+3	; 0x03
    2456:	5c 81       	ldd	r21, Y+4	; 0x04
    2458:	ed e7       	ldi	r30, 0x7D	; 125
    245a:	f2 e0       	ldi	r31, 0x02	; 2
    245c:	ba 01       	movw	r22, r20
    245e:	a9 01       	movw	r20, r18
    2460:	9f 01       	movw	r18, r30
    2462:	16 d9       	rcall	.-3540   	; 0x1690 <_ZN7Sd2Card9readBlockEmPh>
    2464:	1e 82       	std	Y+6, r1	; 0x06
    2466:	88 23       	and	r24, r24
    2468:	11 f4       	brne	.+4      	; 0x246e <_ZN8SdVolume13cacheRawBlockEmh+0x7c>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	8e 83       	std	Y+6, r24	; 0x06
    246e:	8e 81       	ldd	r24, Y+6	; 0x06
    2470:	88 23       	and	r24, r24
    2472:	11 f0       	breq	.+4      	; 0x2478 <_ZN8SdVolume13cacheRawBlockEmh+0x86>
    2474:	1f 82       	std	Y+7, r1	; 0x07
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <_ZN8SdVolume13cacheRawBlockEmh+0xae>
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    cacheBlockNumber_ = blockNumber;
    247c:	ab 81       	ldd	r26, Y+3	; 0x03
    247e:	bc 81       	ldd	r27, Y+4	; 0x04
    2480:	80 93 02 01 	sts	0x0102, r24
    2484:	90 93 03 01 	sts	0x0103, r25
    2488:	a0 93 04 01 	sts	0x0104, r26
    248c:	b0 93 05 01 	sts	0x0105, r27
    2490:	80 91 7f 04 	lds	r24, 0x047F
  }
  cacheDirty_ |= action;
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	89 2b       	or	r24, r25
    2498:	80 93 7f 04 	sts	0x047F, r24
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	8f 83       	std	Y+7, r24	; 0x07
  return true;
    24a0:	8f 81       	ldd	r24, Y+7	; 0x07
    24a2:	28 96       	adiw	r28, 0x08	; 8
    24a4:	0f b6       	in	r0, 0x3f	; 63
}
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	64 97       	sbiw	r28, 0x14	; 20
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	4f 83       	std	Y+7, r20	; 0x07
    24d2:	58 87       	std	Y+8, r21	; 0x08
    24d4:	69 87       	std	Y+9, r22	; 0x09
    24d6:	7a 87       	std	Y+10, r23	; 0x0a
    24d8:	0b 87       	std	Y+11, r16	; 0x0b
    24da:	1c 87       	std	Y+12, r17	; 0x0c
    24dc:	2d 87       	std	Y+13, r18	; 0x0d
    24de:	3e 87       	std	Y+14, r19	; 0x0e
  // error if reserved cluster
  if (cluster < 2) return false;
    24e0:	8f 81       	ldd	r24, Y+7	; 0x07
    24e2:	98 85       	ldd	r25, Y+8	; 0x08
    24e4:	a9 85       	ldd	r26, Y+9	; 0x09
    24e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	91 05       	cpc	r25, r1
    24ec:	a1 05       	cpc	r26, r1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	10 f4       	brcc	.+4      	; 0x24f6 <_ZN8SdVolume6fatPutEmm+0x42>
    24f2:	1c 8a       	std	Y+20, r1	; 0x14
    24f4:	c3 c0       	rjmp	.+390    	; 0x267c <_ZN8SdVolume6fatPutEmm+0x1c8>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    24f6:	ed 81       	ldd	r30, Y+5	; 0x05
    24f8:	fe 81       	ldd	r31, Y+6	; 0x06
    24fa:	81 85       	ldd	r24, Z+9	; 0x09
    24fc:	92 85       	ldd	r25, Z+10	; 0x0a
    24fe:	a3 85       	ldd	r26, Z+11	; 0x0b
    2500:	b4 85       	ldd	r27, Z+12	; 0x0c
    2502:	9c 01       	movw	r18, r24
    2504:	ad 01       	movw	r20, r26
    2506:	2f 5f       	subi	r18, 0xFF	; 255
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	4f 4f       	sbci	r20, 0xFF	; 255
    250c:	5f 4f       	sbci	r21, 0xFF	; 255
    250e:	8f 81       	ldd	r24, Y+7	; 0x07
    2510:	98 85       	ldd	r25, Y+8	; 0x08
    2512:	a9 85       	ldd	r26, Y+9	; 0x09
    2514:	ba 85       	ldd	r27, Y+10	; 0x0a
    2516:	28 17       	cp	r18, r24
    2518:	39 07       	cpc	r19, r25
    251a:	4a 07       	cpc	r20, r26
    251c:	5b 07       	cpc	r21, r27
    251e:	10 f4       	brcc	.+4      	; 0x2524 <_ZN8SdVolume6fatPutEmm+0x70>
    2520:	1c 8a       	std	Y+20, r1	; 0x14
    2522:	ac c0       	rjmp	.+344    	; 0x267c <_ZN8SdVolume6fatPutEmm+0x1c8>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2524:	ed 81       	ldd	r30, Y+5	; 0x05
    2526:	fe 81       	ldd	r31, Y+6	; 0x06
    2528:	83 89       	ldd	r24, Z+19	; 0x13
    252a:	94 89       	ldd	r25, Z+20	; 0x14
    252c:	a5 89       	ldd	r26, Z+21	; 0x15
    252e:	b6 89       	ldd	r27, Z+22	; 0x16
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	ab 83       	std	Y+3, r26	; 0x03
    2536:	bc 83       	std	Y+4, r27	; 0x04
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2538:	ed 81       	ldd	r30, Y+5	; 0x05
    253a:	fe 81       	ldd	r31, Y+6	; 0x06
    253c:	87 89       	ldd	r24, Z+23	; 0x17
    253e:	80 31       	cpi	r24, 0x10	; 16
    2540:	69 f4       	brne	.+26     	; 0x255c <_ZN8SdVolume6fatPutEmm+0xa8>
    2542:	8f 81       	ldd	r24, Y+7	; 0x07
    2544:	98 85       	ldd	r25, Y+8	; 0x08
    2546:	a9 85       	ldd	r26, Y+9	; 0x09
    2548:	ba 85       	ldd	r27, Y+10	; 0x0a
    254a:	29 2f       	mov	r18, r25
    254c:	3a 2f       	mov	r19, r26
    254e:	4b 2f       	mov	r20, r27
    2550:	55 27       	eor	r21, r21
    2552:	28 8b       	std	Y+16, r18	; 0x10
    2554:	39 8b       	std	Y+17, r19	; 0x11
    2556:	4a 8b       	std	Y+18, r20	; 0x12
    2558:	5b 8b       	std	Y+19, r21	; 0x13
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <_ZN8SdVolume6fatPutEmm+0xcc>
    255c:	8f 81       	ldd	r24, Y+7	; 0x07
    255e:	98 85       	ldd	r25, Y+8	; 0x08
    2560:	a9 85       	ldd	r26, Y+9	; 0x09
    2562:	ba 85       	ldd	r27, Y+10	; 0x0a
    2564:	9c 01       	movw	r18, r24
    2566:	ad 01       	movw	r20, r26
    2568:	68 94       	set
    256a:	16 f8       	bld	r1, 6
    256c:	56 95       	lsr	r21
    256e:	47 95       	ror	r20
    2570:	37 95       	ror	r19
    2572:	27 95       	ror	r18
    2574:	16 94       	lsr	r1
    2576:	d1 f7       	brne	.-12     	; 0x256c <_ZN8SdVolume6fatPutEmm+0xb8>
    2578:	28 8b       	std	Y+16, r18	; 0x10
    257a:	39 8b       	std	Y+17, r19	; 0x11
    257c:	4a 8b       	std	Y+18, r20	; 0x12
    257e:	5b 8b       	std	Y+19, r21	; 0x13
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	ab 81       	ldd	r26, Y+3	; 0x03
    2586:	bc 81       	ldd	r27, Y+4	; 0x04
    2588:	28 89       	ldd	r18, Y+16	; 0x10
    258a:	39 89       	ldd	r19, Y+17	; 0x11
    258c:	4a 89       	ldd	r20, Y+18	; 0x12
    258e:	5b 89       	ldd	r21, Y+19	; 0x13
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	a4 1f       	adc	r26, r20
    2596:	b5 1f       	adc	r27, r21
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	ab 83       	std	Y+3, r26	; 0x03
    259e:	bc 83       	std	Y+4, r27	; 0x04

  if (lba != cacheBlockNumber_) {
    25a0:	20 91 02 01 	lds	r18, 0x0102
    25a4:	30 91 03 01 	lds	r19, 0x0103
    25a8:	40 91 04 01 	lds	r20, 0x0104
    25ac:	50 91 05 01 	lds	r21, 0x0105
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	ab 81       	ldd	r26, Y+3	; 0x03
    25b6:	bc 81       	ldd	r27, Y+4	; 0x04
    25b8:	82 17       	cp	r24, r18
    25ba:	93 07       	cpc	r25, r19
    25bc:	a4 07       	cpc	r26, r20
    25be:	b5 07       	cpc	r27, r21
    25c0:	91 f0       	breq	.+36     	; 0x25e6 <_ZN8SdVolume6fatPutEmm+0x132>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	ab 81       	ldd	r26, Y+3	; 0x03
    25c8:	bc 81       	ldd	r27, Y+4	; 0x04
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	10 df       	rcall	.-480    	; 0x23f2 <_ZN8SdVolume13cacheRawBlockEmh>
    25d2:	1f 86       	std	Y+15, r1	; 0x0f
    25d4:	88 23       	and	r24, r24
    25d6:	11 f4       	brne	.+4      	; 0x25dc <_ZN8SdVolume6fatPutEmm+0x128>
    25d8:	31 e0       	ldi	r19, 0x01	; 1
    25da:	3f 87       	std	Y+15, r19	; 0x0f
    25dc:	4f 85       	ldd	r20, Y+15	; 0x0f
    25de:	44 23       	and	r20, r20
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <_ZN8SdVolume6fatPutEmm+0x132>
    25e2:	1c 8a       	std	Y+20, r1	; 0x14
    25e4:	4b c0       	rjmp	.+150    	; 0x267c <_ZN8SdVolume6fatPutEmm+0x1c8>
    25e6:	ed 81       	ldd	r30, Y+5	; 0x05
  }
  // store entry
  if (fatType_ == 16) {
    25e8:	fe 81       	ldd	r31, Y+6	; 0x06
    25ea:	87 89       	ldd	r24, Z+23	; 0x17
    25ec:	80 31       	cpi	r24, 0x10	; 16
    25ee:	89 f4       	brne	.+34     	; 0x2612 <_ZN8SdVolume6fatPutEmm+0x15e>
    25f0:	8f 81       	ldd	r24, Y+7	; 0x07
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    25f2:	98 85       	ldd	r25, Y+8	; 0x08
    25f4:	a9 85       	ldd	r26, Y+9	; 0x09
    25f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    25f8:	90 70       	andi	r25, 0x00	; 0
    25fa:	a0 70       	andi	r26, 0x00	; 0
    25fc:	b0 70       	andi	r27, 0x00	; 0
    25fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2600:	3c 85       	ldd	r19, Y+12	; 0x0c
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	fc 01       	movw	r30, r24
    2608:	e3 58       	subi	r30, 0x83	; 131
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	31 83       	std	Z+1, r19	; 0x01
    260e:	20 83       	st	Z, r18
    2610:	17 c0       	rjmp	.+46     	; 0x2640 <_ZN8SdVolume6fatPutEmm+0x18c>
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2614:	98 85       	ldd	r25, Y+8	; 0x08
    2616:	a9 85       	ldd	r26, Y+9	; 0x09
    2618:	ba 85       	ldd	r27, Y+10	; 0x0a
    261a:	8f 77       	andi	r24, 0x7F	; 127
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	a0 70       	andi	r26, 0x00	; 0
    2620:	b0 70       	andi	r27, 0x00	; 0
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	fc 01       	movw	r30, r24
    262c:	e3 58       	subi	r30, 0x83	; 131
    262e:	fd 4f       	sbci	r31, 0xFD	; 253
    2630:	8b 85       	ldd	r24, Y+11	; 0x0b
    2632:	9c 85       	ldd	r25, Y+12	; 0x0c
    2634:	ad 85       	ldd	r26, Y+13	; 0x0d
    2636:	be 85       	ldd	r27, Y+14	; 0x0e
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
    2640:	2e d9       	rcall	.-3492   	; 0x189e <_ZN8SdVolume13cacheSetDirtyEv>
  }
  cacheSetDirty();
    2642:	ed 81       	ldd	r30, Y+5	; 0x05
    2644:	fe 81       	ldd	r31, Y+6	; 0x06

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2646:	82 89       	ldd	r24, Z+18	; 0x12
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	b0 f0       	brcs	.+44     	; 0x2678 <_ZN8SdVolume6fatPutEmm+0x1c4>
    264c:	ed 81       	ldd	r30, Y+5	; 0x05
    264e:	fe 81       	ldd	r31, Y+6	; 0x06
    2650:	25 81       	ldd	r18, Z+5	; 0x05
    2652:	36 81       	ldd	r19, Z+6	; 0x06
    2654:	47 81       	ldd	r20, Z+7	; 0x07
    2656:	50 85       	ldd	r21, Z+8	; 0x08
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	ab 81       	ldd	r26, Y+3	; 0x03
    265e:	bc 81       	ldd	r27, Y+4	; 0x04
    2660:	82 0f       	add	r24, r18
    2662:	93 1f       	adc	r25, r19
    2664:	a4 1f       	adc	r26, r20
    2666:	b5 1f       	adc	r27, r21
    2668:	80 93 80 04 	sts	0x0480, r24
    266c:	90 93 81 04 	sts	0x0481, r25
    2670:	a0 93 82 04 	sts	0x0482, r26
    2674:	b0 93 83 04 	sts	0x0483, r27
    2678:	51 e0       	ldi	r21, 0x01	; 1
    267a:	5c 8b       	std	Y+20, r21	; 0x14
  return true;
    267c:	8c 89       	ldd	r24, Y+20	; 0x14
    267e:	64 96       	adiw	r28, 0x14	; 20
    2680:	0f b6       	in	r0, 0x3f	; 63
}
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	08 95       	ret

00002694 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	62 97       	sbiw	r28, 0x12	; 18
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	4f 83       	std	Y+7, r20	; 0x07
    26ae:	58 87       	std	Y+8, r21	; 0x08
    26b0:	69 87       	std	Y+9, r22	; 0x09
    26b2:	7a 87       	std	Y+10, r23	; 0x0a
    26b4:	3c 87       	std	Y+12, r19	; 0x0c
    26b6:	2b 87       	std	Y+11, r18	; 0x0b
  if (cluster > (clusterCount_ + 1)) return false;
    26b8:	ed 81       	ldd	r30, Y+5	; 0x05
    26ba:	fe 81       	ldd	r31, Y+6	; 0x06
    26bc:	81 85       	ldd	r24, Z+9	; 0x09
    26be:	92 85       	ldd	r25, Z+10	; 0x0a
    26c0:	a3 85       	ldd	r26, Z+11	; 0x0b
    26c2:	b4 85       	ldd	r27, Z+12	; 0x0c
    26c4:	9c 01       	movw	r18, r24
    26c6:	ad 01       	movw	r20, r26
    26c8:	2f 5f       	subi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	4f 4f       	sbci	r20, 0xFF	; 255
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	8f 81       	ldd	r24, Y+7	; 0x07
    26d2:	98 85       	ldd	r25, Y+8	; 0x08
    26d4:	a9 85       	ldd	r26, Y+9	; 0x09
    26d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    26d8:	28 17       	cp	r18, r24
    26da:	39 07       	cpc	r19, r25
    26dc:	4a 07       	cpc	r20, r26
    26de:	5b 07       	cpc	r21, r27
    26e0:	10 f4       	brcc	.+4      	; 0x26e6 <_ZNK8SdVolume6fatGetEmPm+0x52>
    26e2:	1a 8a       	std	Y+18, r1	; 0x12
    26e4:	9a c0       	rjmp	.+308    	; 0x281a <_ZNK8SdVolume6fatGetEmPm+0x186>
  uint32_t lba = fatStartBlock_;
    26e6:	ed 81       	ldd	r30, Y+5	; 0x05
    26e8:	fe 81       	ldd	r31, Y+6	; 0x06
    26ea:	83 89       	ldd	r24, Z+19	; 0x13
    26ec:	94 89       	ldd	r25, Z+20	; 0x14
    26ee:	a5 89       	ldd	r26, Z+21	; 0x15
    26f0:	b6 89       	ldd	r27, Z+22	; 0x16
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	ab 83       	std	Y+3, r26	; 0x03
    26f8:	bc 83       	std	Y+4, r27	; 0x04
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    26fa:	ed 81       	ldd	r30, Y+5	; 0x05
    26fc:	fe 81       	ldd	r31, Y+6	; 0x06
    26fe:	87 89       	ldd	r24, Z+23	; 0x17
    2700:	80 31       	cpi	r24, 0x10	; 16
    2702:	69 f4       	brne	.+26     	; 0x271e <_ZNK8SdVolume6fatGetEmPm+0x8a>
    2704:	8f 81       	ldd	r24, Y+7	; 0x07
    2706:	98 85       	ldd	r25, Y+8	; 0x08
    2708:	a9 85       	ldd	r26, Y+9	; 0x09
    270a:	ba 85       	ldd	r27, Y+10	; 0x0a
    270c:	29 2f       	mov	r18, r25
    270e:	3a 2f       	mov	r19, r26
    2710:	4b 2f       	mov	r20, r27
    2712:	55 27       	eor	r21, r21
    2714:	2e 87       	std	Y+14, r18	; 0x0e
    2716:	3f 87       	std	Y+15, r19	; 0x0f
    2718:	48 8b       	std	Y+16, r20	; 0x10
    271a:	59 8b       	std	Y+17, r21	; 0x11
    271c:	12 c0       	rjmp	.+36     	; 0x2742 <_ZNK8SdVolume6fatGetEmPm+0xae>
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	a9 85       	ldd	r26, Y+9	; 0x09
    2724:	ba 85       	ldd	r27, Y+10	; 0x0a
    2726:	9c 01       	movw	r18, r24
    2728:	ad 01       	movw	r20, r26
    272a:	68 94       	set
    272c:	16 f8       	bld	r1, 6
    272e:	56 95       	lsr	r21
    2730:	47 95       	ror	r20
    2732:	37 95       	ror	r19
    2734:	27 95       	ror	r18
    2736:	16 94       	lsr	r1
    2738:	d1 f7       	brne	.-12     	; 0x272e <_ZNK8SdVolume6fatGetEmPm+0x9a>
    273a:	2e 87       	std	Y+14, r18	; 0x0e
    273c:	3f 87       	std	Y+15, r19	; 0x0f
    273e:	48 8b       	std	Y+16, r20	; 0x10
    2740:	59 8b       	std	Y+17, r21	; 0x11
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	ab 81       	ldd	r26, Y+3	; 0x03
    2748:	bc 81       	ldd	r27, Y+4	; 0x04
    274a:	2e 85       	ldd	r18, Y+14	; 0x0e
    274c:	3f 85       	ldd	r19, Y+15	; 0x0f
    274e:	48 89       	ldd	r20, Y+16	; 0x10
    2750:	59 89       	ldd	r21, Y+17	; 0x11
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	a4 1f       	adc	r26, r20
    2758:	b5 1f       	adc	r27, r21
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	ab 83       	std	Y+3, r26	; 0x03
    2760:	bc 83       	std	Y+4, r27	; 0x04
  if (lba != cacheBlockNumber_) {
    2762:	20 91 02 01 	lds	r18, 0x0102
    2766:	30 91 03 01 	lds	r19, 0x0103
    276a:	40 91 04 01 	lds	r20, 0x0104
    276e:	50 91 05 01 	lds	r21, 0x0105
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	ab 81       	ldd	r26, Y+3	; 0x03
    2778:	bc 81       	ldd	r27, Y+4	; 0x04
    277a:	82 17       	cp	r24, r18
    277c:	93 07       	cpc	r25, r19
    277e:	a4 07       	cpc	r26, r20
    2780:	b5 07       	cpc	r27, r21
    2782:	91 f0       	breq	.+36     	; 0x27a8 <_ZNK8SdVolume6fatGetEmPm+0x114>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	ab 81       	ldd	r26, Y+3	; 0x03
    278a:	bc 81       	ldd	r27, Y+4	; 0x04
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	2f de       	rcall	.-930    	; 0x23f2 <_ZN8SdVolume13cacheRawBlockEmh>
    2794:	1d 86       	std	Y+13, r1	; 0x0d
    2796:	88 23       	and	r24, r24
    2798:	11 f4       	brne	.+4      	; 0x279e <_ZNK8SdVolume6fatGetEmPm+0x10a>
    279a:	31 e0       	ldi	r19, 0x01	; 1
    279c:	3d 87       	std	Y+13, r19	; 0x0d
    279e:	4d 85       	ldd	r20, Y+13	; 0x0d
    27a0:	44 23       	and	r20, r20
    27a2:	11 f0       	breq	.+4      	; 0x27a8 <_ZNK8SdVolume6fatGetEmPm+0x114>
    27a4:	1a 8a       	std	Y+18, r1	; 0x12
    27a6:	39 c0       	rjmp	.+114    	; 0x281a <_ZNK8SdVolume6fatGetEmPm+0x186>
    27a8:	ed 81       	ldd	r30, Y+5	; 0x05
  }
  if (fatType_ == 16) {
    27aa:	fe 81       	ldd	r31, Y+6	; 0x06
    27ac:	87 89       	ldd	r24, Z+23	; 0x17
    27ae:	80 31       	cpi	r24, 0x10	; 16
    27b0:	c1 f4       	brne	.+48     	; 0x27e2 <_ZNK8SdVolume6fatGetEmPm+0x14e>
    27b2:	8f 81       	ldd	r24, Y+7	; 0x07
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    27b4:	98 85       	ldd	r25, Y+8	; 0x08
    27b6:	a9 85       	ldd	r26, Y+9	; 0x09
    27b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    27ba:	90 70       	andi	r25, 0x00	; 0
    27bc:	a0 70       	andi	r26, 0x00	; 0
    27be:	b0 70       	andi	r27, 0x00	; 0
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	fc 01       	movw	r30, r24
    27c6:	e3 58       	subi	r30, 0x83	; 131
    27c8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	cc 01       	movw	r24, r24
    27d0:	a0 e0       	ldi	r26, 0x00	; 0
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    27d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    27d8:	80 83       	st	Z, r24
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	a2 83       	std	Z+2, r26	; 0x02
    27de:	b3 83       	std	Z+3, r27	; 0x03
    27e0:	1a c0       	rjmp	.+52     	; 0x2816 <_ZNK8SdVolume6fatGetEmPm+0x182>
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    27e4:	98 85       	ldd	r25, Y+8	; 0x08
    27e6:	a9 85       	ldd	r26, Y+9	; 0x09
    27e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    27ea:	8f 77       	andi	r24, 0x7F	; 127
    27ec:	90 70       	andi	r25, 0x00	; 0
    27ee:	a0 70       	andi	r26, 0x00	; 0
    27f0:	b0 70       	andi	r27, 0x00	; 0
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	fc 01       	movw	r30, r24
    27fc:	e3 58       	subi	r30, 0x83	; 131
    27fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	a2 81       	ldd	r26, Z+2	; 0x02
    2806:	b3 81       	ldd	r27, Z+3	; 0x03
    2808:	bf 70       	andi	r27, 0x0F	; 15
    280a:	eb 85       	ldd	r30, Y+11	; 0x0b
    280c:	fc 85       	ldd	r31, Y+12	; 0x0c
    280e:	80 83       	st	Z, r24
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	a2 83       	std	Z+2, r26	; 0x02
    2814:	b3 83       	std	Z+3, r27	; 0x03
    2816:	51 e0       	ldi	r21, 0x01	; 1
  }
  return true;
    2818:	5a 8b       	std	Y+18, r21	; 0x12
    281a:	8a 89       	ldd	r24, Y+18	; 0x12
    281c:	62 96       	adiw	r28, 0x12	; 18
}
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	a2 97       	sbiw	r28, 0x22	; 34
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	9f 8b       	std	Y+23, r25	; 0x17
    284c:	8e 8b       	std	Y+22, r24	; 0x16
    284e:	48 8f       	std	Y+24, r20	; 0x18
    2850:	59 8f       	std	Y+25, r21	; 0x19
    2852:	6a 8f       	std	Y+26, r22	; 0x1a
    2854:	7b 8f       	std	Y+27, r23	; 0x1b
    2856:	3d 8f       	std	Y+29, r19	; 0x1d
    2858:	2c 8f       	std	Y+28, r18	; 0x1c

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    285a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    285c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	a2 81       	ldd	r26, Z+2	; 0x02
    2864:	b3 81       	ldd	r27, Z+3	; 0x03
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	a1 05       	cpc	r26, r1
    286a:	b1 05       	cpc	r27, r1
    286c:	79 f0       	breq	.+30     	; 0x288c <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    286e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2870:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	a2 81       	ldd	r26, Z+2	; 0x02
    2878:	b3 81       	ldd	r27, Z+3	; 0x03
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	a1 1d       	adc	r26, r1
    287e:	b1 1d       	adc	r27, r1
    2880:	8e 87       	std	Y+14, r24	; 0x0e
    2882:	9f 87       	std	Y+15, r25	; 0x0f
    2884:	a8 8b       	std	Y+16, r26	; 0x10
    2886:	b9 8b       	std	Y+17, r27	; 0x11

    // don't save new start location
    setStart = false;
    2888:	1d 86       	std	Y+13, r1	; 0x0d
    288a:	16 c0       	rjmp	.+44     	; 0x28b8 <_ZN8SdVolume15allocContiguousEmPm+0x8a>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    288c:	ee 89       	ldd	r30, Y+22	; 0x16
    288e:	ff 89       	ldd	r31, Y+23	; 0x17
    2890:	80 81       	ld	r24, Z
    2892:	91 81       	ldd	r25, Z+1	; 0x01
    2894:	a2 81       	ldd	r26, Z+2	; 0x02
    2896:	b3 81       	ldd	r27, Z+3	; 0x03
    2898:	8e 87       	std	Y+14, r24	; 0x0e
    289a:	9f 87       	std	Y+15, r25	; 0x0f
    289c:	a8 8b       	std	Y+16, r26	; 0x10
    289e:	b9 8b       	std	Y+17, r27	; 0x11

    // save next search start if one cluster
    setStart = 1 == count;
    28a0:	1d 86       	std	Y+13, r1	; 0x0d
    28a2:	88 8d       	ldd	r24, Y+24	; 0x18
    28a4:	99 8d       	ldd	r25, Y+25	; 0x19
    28a6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    28a8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	91 05       	cpc	r25, r1
    28ae:	a1 05       	cpc	r26, r1
    28b0:	b1 05       	cpc	r27, r1
    28b2:	11 f4       	brne	.+4      	; 0x28b8 <_ZN8SdVolume15allocContiguousEmPm+0x8a>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	8d 87       	std	Y+13, r24	; 0x0d
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    28b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    28bc:	a8 89       	ldd	r26, Y+16	; 0x10
    28be:	b9 89       	ldd	r27, Y+17	; 0x11
    28c0:	89 87       	std	Y+9, r24	; 0x09
    28c2:	9a 87       	std	Y+10, r25	; 0x0a
    28c4:	ab 87       	std	Y+11, r26	; 0x0b
    28c6:	bc 87       	std	Y+12, r27	; 0x0c

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    28c8:	ee 89       	ldd	r30, Y+22	; 0x16
    28ca:	ff 89       	ldd	r31, Y+23	; 0x17
    28cc:	81 85       	ldd	r24, Z+9	; 0x09
    28ce:	92 85       	ldd	r25, Z+10	; 0x0a
    28d0:	a3 85       	ldd	r26, Z+11	; 0x0b
    28d2:	b4 85       	ldd	r27, Z+12	; 0x0c
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	a1 1d       	adc	r26, r1
    28d8:	b1 1d       	adc	r27, r1
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	af 83       	std	Y+7, r26	; 0x07
    28e0:	b8 87       	std	Y+8, r27	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    28e2:	19 82       	std	Y+1, r1	; 0x01
    28e4:	1a 82       	std	Y+2, r1	; 0x02
    28e6:	1b 82       	std	Y+3, r1	; 0x03
    28e8:	1c 82       	std	Y+4, r1	; 0x04
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    28ea:	ee 89       	ldd	r30, Y+22	; 0x16
    28ec:	ff 89       	ldd	r31, Y+23	; 0x17
    28ee:	21 85       	ldd	r18, Z+9	; 0x09
    28f0:	32 85       	ldd	r19, Z+10	; 0x0a
    28f2:	43 85       	ldd	r20, Z+11	; 0x0b
    28f4:	54 85       	ldd	r21, Z+12	; 0x0c
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	ab 81       	ldd	r26, Y+3	; 0x03
    28fc:	bc 81       	ldd	r27, Y+4	; 0x04
    28fe:	82 17       	cp	r24, r18
    2900:	93 07       	cpc	r25, r19
    2902:	a4 07       	cpc	r26, r20
    2904:	b5 07       	cpc	r27, r21
    2906:	10 f0       	brcs	.+4      	; 0x290c <_ZN8SdVolume15allocContiguousEmPm+0xde>
    2908:	1a a2       	std	Y+34, r1	; 0x22
    290a:	00 c1       	rjmp	.+512    	; 0x2b0c <_ZN8SdVolume15allocContiguousEmPm+0x2de>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    290c:	29 85       	ldd	r18, Y+9	; 0x09
    290e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2910:	4b 85       	ldd	r20, Y+11	; 0x0b
    2912:	5c 85       	ldd	r21, Y+12	; 0x0c
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	af 81       	ldd	r26, Y+7	; 0x07
    291a:	b8 85       	ldd	r27, Y+8	; 0x08
    291c:	82 17       	cp	r24, r18
    291e:	93 07       	cpc	r25, r19
    2920:	a4 07       	cpc	r26, r20
    2922:	b5 07       	cpc	r27, r21
    2924:	80 f4       	brcc	.+32     	; 0x2946 <_ZN8SdVolume15allocContiguousEmPm+0x118>
      bgnCluster = endCluster = 2;
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	89 87       	std	Y+9, r24	; 0x09
    2930:	9a 87       	std	Y+10, r25	; 0x0a
    2932:	ab 87       	std	Y+11, r26	; 0x0b
    2934:	bc 87       	std	Y+12, r27	; 0x0c
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	ab 85       	ldd	r26, Y+11	; 0x0b
    293c:	bc 85       	ldd	r27, Y+12	; 0x0c
    293e:	8e 87       	std	Y+14, r24	; 0x0e
    2940:	9f 87       	std	Y+15, r25	; 0x0f
    2942:	a8 8b       	std	Y+16, r26	; 0x10
    2944:	b9 8b       	std	Y+17, r27	; 0x11
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2946:	8e 89       	ldd	r24, Y+22	; 0x16
    2948:	9f 89       	ldd	r25, Y+23	; 0x17
    294a:	29 85       	ldd	r18, Y+9	; 0x09
    294c:	3a 85       	ldd	r19, Y+10	; 0x0a
    294e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2950:	5c 85       	ldd	r21, Y+12	; 0x0c
    2952:	fe 01       	movw	r30, r28
    2954:	72 96       	adiw	r30, 0x12	; 18
    2956:	ba 01       	movw	r22, r20
    2958:	a9 01       	movw	r20, r18
    295a:	9f 01       	movw	r18, r30
    295c:	9b de       	rcall	.-714    	; 0x2694 <_ZNK8SdVolume6fatGetEmPm>
    295e:	19 a2       	std	Y+33, r1	; 0x21
    2960:	88 23       	and	r24, r24
    2962:	11 f4       	brne	.+4      	; 0x2968 <_ZN8SdVolume15allocContiguousEmPm+0x13a>
    2964:	01 e0       	ldi	r16, 0x01	; 1
    2966:	09 a3       	std	Y+33, r16	; 0x21
    2968:	19 a1       	ldd	r17, Y+33	; 0x21
    296a:	11 23       	and	r17, r17
    296c:	11 f0       	breq	.+4      	; 0x2972 <_ZN8SdVolume15allocContiguousEmPm+0x144>
    296e:	1a a2       	std	Y+34, r1	; 0x22
    2970:	cd c0       	rjmp	.+410    	; 0x2b0c <_ZN8SdVolume15allocContiguousEmPm+0x2de>
    2972:	8a 89       	ldd	r24, Y+18	; 0x12

    if (f != 0) {
    2974:	9b 89       	ldd	r25, Y+19	; 0x13
    2976:	ac 89       	ldd	r26, Y+20	; 0x14
    2978:	bd 89       	ldd	r27, Y+21	; 0x15
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	a1 05       	cpc	r26, r1
    297e:	b1 05       	cpc	r27, r1
    2980:	61 f0       	breq	.+24     	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x16c>
    2982:	89 85       	ldd	r24, Y+9	; 0x09
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	ab 85       	ldd	r26, Y+11	; 0x0b
    2988:	bc 85       	ldd	r27, Y+12	; 0x0c
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	a1 1d       	adc	r26, r1
    298e:	b1 1d       	adc	r27, r1
    2990:	8e 87       	std	Y+14, r24	; 0x0e
    2992:	9f 87       	std	Y+15, r25	; 0x0f
    2994:	a8 8b       	std	Y+16, r26	; 0x10
    2996:	b9 8b       	std	Y+17, r27	; 0x11
    2998:	1f c0       	rjmp	.+62     	; 0x29d8 <_ZN8SdVolume15allocContiguousEmPm+0x1aa>
    299a:	29 85       	ldd	r18, Y+9	; 0x09
    } else if ((endCluster - bgnCluster + 1) == count) {
    299c:	3a 85       	ldd	r19, Y+10	; 0x0a
    299e:	4b 85       	ldd	r20, Y+11	; 0x0b
    29a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    29a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    29a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    29a6:	a8 89       	ldd	r26, Y+16	; 0x10
    29a8:	b9 89       	ldd	r27, Y+17	; 0x11
    29aa:	79 01       	movw	r14, r18
    29ac:	8a 01       	movw	r16, r20
    29ae:	e8 1a       	sub	r14, r24
    29b0:	f9 0a       	sbc	r15, r25
    29b2:	0a 0b       	sbc	r16, r26
    29b4:	1b 0b       	sbc	r17, r27
    29b6:	d8 01       	movw	r26, r16
    29b8:	c7 01       	movw	r24, r14
    29ba:	9c 01       	movw	r18, r24
    29bc:	ad 01       	movw	r20, r26
    29be:	2f 5f       	subi	r18, 0xFF	; 255
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	4f 4f       	sbci	r20, 0xFF	; 255
    29c4:	5f 4f       	sbci	r21, 0xFF	; 255
    29c6:	88 8d       	ldd	r24, Y+24	; 0x18
    29c8:	99 8d       	ldd	r25, Y+25	; 0x19
    29ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    29cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    29ce:	28 17       	cp	r18, r24
    29d0:	39 07       	cpc	r19, r25
    29d2:	4a 07       	cpc	r20, r26
    29d4:	5b 07       	cpc	r21, r27
    29d6:	b9 f0       	breq	.+46     	; 0x2a06 <_ZN8SdVolume15allocContiguousEmPm+0x1d8>
    29d8:	89 81       	ldd	r24, Y+1	; 0x01

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	ab 81       	ldd	r26, Y+3	; 0x03
    29de:	bc 81       	ldd	r27, Y+4	; 0x04
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	a1 1d       	adc	r26, r1
    29e4:	b1 1d       	adc	r27, r1
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	ab 83       	std	Y+3, r26	; 0x03
    29ec:	bc 83       	std	Y+4, r27	; 0x04
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    29f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	a1 1d       	adc	r26, r1
    29fa:	b1 1d       	adc	r27, r1
    29fc:	89 87       	std	Y+9, r24	; 0x09
    29fe:	9a 87       	std	Y+10, r25	; 0x0a
    2a00:	ab 87       	std	Y+11, r26	; 0x0b
    2a02:	bc 87       	std	Y+12, r27	; 0x0c
    2a04:	72 cf       	rjmp	.-284    	; 0x28ea <_ZN8SdVolume15allocContiguousEmPm+0xbc>
    2a06:	8e 89       	ldd	r24, Y+22	; 0x16
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2a08:	9f 89       	ldd	r25, Y+23	; 0x17
    2a0a:	29 85       	ldd	r18, Y+9	; 0x09
    2a0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a10:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a12:	ba 01       	movw	r22, r20
    2a14:	a9 01       	movw	r20, r18
    2a16:	bb d9       	rcall	.-3210   	; 0x1d8e <_ZN8SdVolume9fatPutEOCEm>
    2a18:	18 a2       	std	Y+32, r1	; 0x20
    2a1a:	88 23       	and	r24, r24
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    2a1e:	01 e0       	ldi	r16, 0x01	; 1
    2a20:	08 a3       	std	Y+32, r16	; 0x20
    2a22:	18 a1       	ldd	r17, Y+32	; 0x20
    2a24:	11 23       	and	r17, r17
    2a26:	41 f1       	breq	.+80     	; 0x2a78 <_ZN8SdVolume15allocContiguousEmPm+0x24a>
    2a28:	1a a2       	std	Y+34, r1	; 0x22
    2a2a:	70 c0       	rjmp	.+224    	; 0x2b0c <_ZN8SdVolume15allocContiguousEmPm+0x2de>
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2a30:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a32:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a34:	ac 01       	movw	r20, r24
    2a36:	bd 01       	movw	r22, r26
    2a38:	41 50       	subi	r20, 0x01	; 1
    2a3a:	50 40       	sbci	r21, 0x00	; 0
    2a3c:	60 40       	sbci	r22, 0x00	; 0
    2a3e:	70 40       	sbci	r23, 0x00	; 0
    2a40:	8e 89       	ldd	r24, Y+22	; 0x16
    2a42:	9f 89       	ldd	r25, Y+23	; 0x17
    2a44:	09 85       	ldd	r16, Y+9	; 0x09
    2a46:	1a 85       	ldd	r17, Y+10	; 0x0a
    2a48:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a4c:	33 dd       	rcall	.-1434   	; 0x24b4 <_ZN8SdVolume6fatPutEmm>
    2a4e:	1f 8e       	std	Y+31, r1	; 0x1f
    2a50:	88 23       	and	r24, r24
    2a52:	11 f4       	brne	.+4      	; 0x2a58 <_ZN8SdVolume15allocContiguousEmPm+0x22a>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	8f 8f       	std	Y+31, r24	; 0x1f
    2a58:	ef 8c       	ldd	r14, Y+31	; 0x1f
    2a5a:	ee 20       	and	r14, r14
    2a5c:	11 f0       	breq	.+4      	; 0x2a62 <_ZN8SdVolume15allocContiguousEmPm+0x234>
    2a5e:	1a a2       	std	Y+34, r1	; 0x22
    2a60:	55 c0       	rjmp	.+170    	; 0x2b0c <_ZN8SdVolume15allocContiguousEmPm+0x2de>
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	ab 85       	ldd	r26, Y+11	; 0x0b
    endCluster--;
    2a68:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	a1 09       	sbc	r26, r1
    2a6e:	b1 09       	sbc	r27, r1
    2a70:	89 87       	std	Y+9, r24	; 0x09
    2a72:	9a 87       	std	Y+10, r25	; 0x0a
    2a74:	ab 87       	std	Y+11, r26	; 0x0b
    2a76:	bc 87       	std	Y+12, r27	; 0x0c
    2a78:	29 85       	ldd	r18, Y+9	; 0x09
    2a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a7c:	4b 85       	ldd	r20, Y+11	; 0x0b
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2a7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a84:	a8 89       	ldd	r26, Y+16	; 0x10
    2a86:	b9 89       	ldd	r27, Y+17	; 0x11
    2a88:	82 17       	cp	r24, r18
    2a8a:	93 07       	cpc	r25, r19
    2a8c:	a4 07       	cpc	r26, r20
    2a8e:	b5 07       	cpc	r27, r21
    2a90:	68 f2       	brcs	.-102    	; 0x2a2c <_ZN8SdVolume15allocContiguousEmPm+0x1fe>
    2a92:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a94:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a96:	80 81       	ld	r24, Z
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	a1 05       	cpc	r26, r1
    2aa2:	b1 05       	cpc	r27, r1
    2aa4:	b9 f0       	breq	.+46     	; 0x2ad4 <_ZN8SdVolume15allocContiguousEmPm+0x2a6>
    2aa6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2aa8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2aaa:	40 81       	ld	r20, Z
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2aac:	51 81       	ldd	r21, Z+1	; 0x01
    2aae:	62 81       	ldd	r22, Z+2	; 0x02
    2ab0:	73 81       	ldd	r23, Z+3	; 0x03
    2ab2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ab4:	9f 89       	ldd	r25, Y+23	; 0x17
    2ab6:	0e 85       	ldd	r16, Y+14	; 0x0e
    2ab8:	1f 85       	ldd	r17, Y+15	; 0x0f
    2aba:	28 89       	ldd	r18, Y+16	; 0x10
    2abc:	39 89       	ldd	r19, Y+17	; 0x11
    2abe:	fa dc       	rcall	.-1548   	; 0x24b4 <_ZN8SdVolume6fatPutEmm>
    2ac0:	1e 8e       	std	Y+30, r1	; 0x1e
    2ac2:	88 23       	and	r24, r24
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <_ZN8SdVolume15allocContiguousEmPm+0x29c>
    2ac6:	01 e0       	ldi	r16, 0x01	; 1
    2ac8:	0e 8f       	std	Y+30, r16	; 0x1e
    2aca:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2acc:	11 23       	and	r17, r17
    2ace:	11 f0       	breq	.+4      	; 0x2ad4 <_ZN8SdVolume15allocContiguousEmPm+0x2a6>
    2ad0:	1a a2       	std	Y+34, r1	; 0x22
    2ad2:	1c c0       	rjmp	.+56     	; 0x2b0c <_ZN8SdVolume15allocContiguousEmPm+0x2de>
    2ad4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2ad6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ad8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ada:	9f 85       	ldd	r25, Y+15	; 0x0f
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2adc:	a8 89       	ldd	r26, Y+16	; 0x10
    2ade:	b9 89       	ldd	r27, Y+17	; 0x11
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
    2ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aea:	88 23       	and	r24, r24
    2aec:	69 f0       	breq	.+26     	; 0x2b08 <_ZN8SdVolume15allocContiguousEmPm+0x2da>
    2aee:	8e 85       	ldd	r24, Y+14	; 0x0e

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2af0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2af2:	a8 89       	ldd	r26, Y+16	; 0x10
    2af4:	b9 89       	ldd	r27, Y+17	; 0x11
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	a1 1d       	adc	r26, r1
    2afa:	b1 1d       	adc	r27, r1
    2afc:	ee 89       	ldd	r30, Y+22	; 0x16
    2afe:	ff 89       	ldd	r31, Y+23	; 0x17
    2b00:	80 83       	st	Z, r24
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	a2 83       	std	Z+2, r26	; 0x02
    2b06:	b3 83       	std	Z+3, r27	; 0x03
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	8a a3       	std	Y+34, r24	; 0x22
    2b0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b0e:	a2 96       	adiw	r28, 0x22	; 34

  return true;
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
}
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	08 95       	ret

00002b28 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <_ZN7Sd2CardC1Ev+0x6>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	15 82       	std	Z+5, r1	; 0x05
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	16 82       	std	Z+6, r1	; 0x06
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	11 86       	std	Z+9, r1	; 0x09
    2b48:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4c:	13 86       	std	Z+11, r1	; 0x0b
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <_ZN8SdVolumeC1Ev+0x6>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	e9 81       	ldd	r30, Y+1	; 0x01
    2b68:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	80 83       	st	Z, r24
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	a2 83       	std	Z+2, r26	; 0x02
    2b78:	b3 83       	std	Z+3, r27	; 0x03
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	17 8a       	std	Z+23, r1	; 0x17
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <_ZN7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <_ZN7SDClassC1Ev+0x6>
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	c5 df       	rcall	.-118    	; 0x2b28 <_ZN7Sd2CardC1Ev>
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	0c 96       	adiw	r24, 0x0c	; 12
    2ba4:	d9 df       	rcall	.-78     	; 0x2b58 <_ZN8SdVolumeC1Ev>
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	8a 96       	adiw	r24, 0x2a	; 42
    2bac:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN6SdFileC1Ev>
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <_Z41__static_initialization_and_destruction_0ii>:
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	7c 83       	std	Y+4, r23	; 0x04
    2bcc:	6b 83       	std	Y+3, r22	; 0x03
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	49 f4       	brne	.+18     	; 0x2bea <_Z41__static_initialization_and_destruction_0ii+0x30>
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	2f ef       	ldi	r18, 0xFF	; 255
    2bde:	8f 3f       	cpi	r24, 0xFF	; 255
    2be0:	92 07       	cpc	r25, r18
    2be2:	19 f4       	brne	.+6      	; 0x2bea <_Z41__static_initialization_and_destruction_0ii+0x30>
    2be4:	84 e8       	ldi	r24, 0x84	; 132
    2be6:	94 e0       	ldi	r25, 0x04	; 4
    2be8:	d0 df       	rcall	.-96     	; 0x2b8a <_ZN7SDClassC1Ev>
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	6f ef       	ldi	r22, 0xFF	; 255
    2c06:	7f ef       	ldi	r23, 0xFF	; 255
    2c08:	d8 df       	rcall	.-80     	; 0x2bba <_Z41__static_initialization_and_destruction_0ii>
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <_ZN12FirmataClass11systemResetEv>:
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <_ZN12FirmataClass11systemResetEv+0x6>
    2c16:	0f 92       	push	r0
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	9b 83       	std	Y+3, r25	; 0x03
    2c1e:	8a 83       	std	Y+2, r24	; 0x02
{
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    2c20:	ea 81       	ldd	r30, Y+2	; 0x02
    2c22:	fb 81       	ldd	r31, Y+3	; 0x03
    2c24:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    2c26:	ea 81       	ldd	r30, Y+2	; 0x02
    2c28:	fb 81       	ldd	r31, Y+3	; 0x03
    2c2a:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    2c2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c30:	17 82       	std	Z+7, r1	; 0x07


  for(i=0; i<MAX_DATA_BYTES; i++) {
    2c32:	19 82       	std	Y+1, r1	; 0x01
    2c34:	0d c0       	rjmp	.+26     	; 0x2c50 <_ZN12FirmataClass11systemResetEv+0x40>
    storedInputData[i] = 0;
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c40:	82 0f       	add	r24, r18
    2c42:	93 1f       	adc	r25, r19
    2c44:	fc 01       	movw	r30, r24
    2c46:	38 96       	adiw	r30, 0x08	; 8
    2c48:	10 82       	st	Z, r1
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	80 32       	cpi	r24, 0x20	; 32
    2c54:	80 f3       	brcs	.-32     	; 0x2c36 <_ZN12FirmataClass11systemResetEv+0x26>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    2c56:	ea 81       	ldd	r30, Y+2	; 0x02
    2c58:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5a:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    2c5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c60:	12 a6       	std	Z+42, r1	; 0x2a
    2c62:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    2c64:	ea 81       	ldd	r30, Y+2	; 0x02
    2c66:	fb 81       	ldd	r31, Y+3	; 0x03
    2c68:	85 a9       	ldd	r24, Z+53	; 0x35
    2c6a:	96 a9       	ldd	r25, Z+54	; 0x36
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	31 f0       	breq	.+12     	; 0x2c7c <_ZN12FirmataClass11systemResetEv+0x6c>
    (*currentSystemResetCallback)();
    2c70:	ea 81       	ldd	r30, Y+2	; 0x02
    2c72:	fb 81       	ldd	r31, Y+3	; 0x03
    2c74:	05 a8       	ldd	r0, Z+53	; 0x35
    2c76:	f6 a9       	ldd	r31, Z+54	; 0x36
    2c78:	e0 2d       	mov	r30, r0
    2c7a:	09 95       	icall

  //flush(); //TODO uncomment when Firmata is a subclass of HardwareSerial
}
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <_ZN12FirmataClassC1ER6Stream>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <_ZN12FirmataClassC1ER6Stream+0x6>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <_ZN12FirmataClassC1ER6Stream+0x8>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	7c 83       	std	Y+4, r23	; 0x04
    2c9a:	6b 83       	std	Y+3, r22	; 0x03
    2c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	91 83       	std	Z+1, r25	; 0x01
    2ca6:	80 83       	st	Z, r24
{
  firmwareVersionCount = 0;
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	12 82       	std	Z+2, r1	; 0x02
  systemReset();
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	ae df       	rcall	.-164    	; 0x2c10 <_ZN12FirmataClass11systemResetEv>
    2cb4:	0f 90       	pop	r0
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <_Z41__static_initialization_and_destruction_0ii>:
  }
}


// make one instance for the user to use
FirmataClass Firmata(Serial);
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <_Z41__static_initialization_and_destruction_0ii+0x8>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	7c 83       	std	Y+4, r23	; 0x04
    2cd4:	6b 83       	std	Y+3, r22	; 0x03
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	91 05       	cpc	r25, r1
    2cde:	61 f4       	brne	.+24     	; 0x2cf8 <_Z41__static_initialization_and_destruction_0ii+0x36>
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	2f ef       	ldi	r18, 0xFF	; 255
    2ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce8:	92 07       	cpc	r25, r18
    2cea:	31 f4       	brne	.+12     	; 0x2cf8 <_Z41__static_initialization_and_destruction_0ii+0x36>
    2cec:	8d ec       	ldi	r24, 0xCD	; 205
    2cee:	94 e0       	ldi	r25, 0x04	; 4
    2cf0:	2c eb       	ldi	r18, 0xBC	; 188
    2cf2:	35 e0       	ldi	r19, 0x05	; 5
    2cf4:	b9 01       	movw	r22, r18
    2cf6:	c8 df       	rcall	.-112    	; 0x2c88 <_ZN12FirmataClassC1ER6Stream>
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <_GLOBAL__I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	6f ef       	ldi	r22, 0xFF	; 255
    2d14:	7f ef       	ldi	r23, 0xFF	; 255
    2d16:	d5 df       	rcall	.-86     	; 0x2cc2 <_Z41__static_initialization_and_destruction_0ii>
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <_Z41__static_initialization_and_destruction_0ii>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    2d1e:	0f 93       	push	r16
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <_Z41__static_initialization_and_destruction_0ii+0xa>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	7c 83       	std	Y+4, r23	; 0x04
    2d32:	6b 83       	std	Y+3, r22	; 0x03
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	69 f4       	brne	.+26     	; 0x2d58 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	2f ef       	ldi	r18, 0xFF	; 255
    2d44:	8f 3f       	cpi	r24, 0xFF	; 255
    2d46:	92 07       	cpc	r25, r18
    2d48:	39 f4       	brne	.+14     	; 0x2d58 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2d4a:	88 e0       	ldi	r24, 0x08	; 8
    2d4c:	95 e0       	ldi	r25, 0x05	; 5
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	00 e0       	ldi	r16, 0x00	; 0
    2d56:	a1 d4       	rcall	.+2370   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	0f 91       	pop	r16
    2d66:	08 95       	ret

00002d68 <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	6f ef       	ldi	r22, 0xFF	; 255
    2d76:	7f ef       	ldi	r23, 0xFF	; 255
    2d78:	d2 df       	rcall	.-92     	; 0x2d1e <_Z41__static_initialization_and_destruction_0ii>
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <_Z41__static_initialization_and_destruction_0ii>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    2d80:	0f 93       	push	r16
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <_Z41__static_initialization_and_destruction_0ii+0xa>
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	7c 83       	std	Y+4, r23	; 0x04
    2d94:	6b 83       	std	Y+3, r22	; 0x03
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	69 f4       	brne	.+26     	; 0x2dba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	2f ef       	ldi	r18, 0xFF	; 255
    2da6:	8f 3f       	cpi	r24, 0xFF	; 255
    2da8:	92 07       	cpc	r25, r18
    2daa:	39 f4       	brne	.+14     	; 0x2dba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2dac:	8e e0       	ldi	r24, 0x0E	; 14
    2dae:	95 e0       	ldi	r25, 0x05	; 5
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	00 e0       	ldi	r16, 0x00	; 0
    2db8:	70 d4       	rcall	.+2272   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	0f 91       	pop	r16
    2dc8:	08 95       	ret

00002dca <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	6f ef       	ldi	r22, 0xFF	; 255
    2dd8:	7f ef       	ldi	r23, 0xFF	; 255
    2dda:	d2 df       	rcall	.-92     	; 0x2d80 <_Z41__static_initialization_and_destruction_0ii>
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <_ZN13EthernetClassC1Ev>:
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <_ZN13EthernetClassC1Ev+0x6>
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	0d d5       	rcall	.+2586   	; 0x3810 <_ZN9IPAddressC1Ev>
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <_Z41__static_initialization_and_destruction_0ii>:
IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}

EthernetClass Ethernet;
    2e00:	0f 93       	push	r16
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <_Z41__static_initialization_and_destruction_0ii+0xa>
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	7c 83       	std	Y+4, r23	; 0x04
    2e14:	6b 83       	std	Y+3, r22	; 0x03
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	81 f4       	brne	.+32     	; 0x2e40 <_Z41__static_initialization_and_destruction_0ii+0x40>
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	2f ef       	ldi	r18, 0xFF	; 255
    2e26:	8f 3f       	cpi	r24, 0xFF	; 255
    2e28:	92 07       	cpc	r25, r18
    2e2a:	51 f4       	brne	.+20     	; 0x2e40 <_Z41__static_initialization_and_destruction_0ii+0x40>
    2e2c:	8c e1       	ldi	r24, 0x1C	; 28
    2e2e:	95 e0       	ldi	r25, 0x05	; 5
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	00 e0       	ldi	r16, 0x00	; 0
    2e38:	30 d4       	rcall	.+2144   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2e3a:	84 e1       	ldi	r24, 0x14	; 20
    2e3c:	95 e0       	ldi	r25, 0x05	; 5
    2e3e:	d1 df       	rcall	.-94     	; 0x2de2 <_ZN13EthernetClassC1Ev>
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	0f 91       	pop	r16
    2e4e:	08 95       	ret

00002e50 <_GLOBAL__I__ZN13EthernetClass6_stateE>:
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	6f ef       	ldi	r22, 0xFF	; 255
    2e5e:	7f ef       	ldi	r23, 0xFF	; 255
    2e60:	cf df       	rcall	.-98     	; 0x2e00 <_Z41__static_initialization_and_destruction_0ii>
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <_Z41__static_initialization_and_destruction_0ii>:
    2e68:	0f 93       	push	r16
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <_Z41__static_initialization_and_destruction_0ii+0xa>
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	7c 83       	std	Y+4, r23	; 0x04
    2e7c:	6b 83       	std	Y+3, r22	; 0x03
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	81 30       	cpi	r24, 0x01	; 1
    2e84:	91 05       	cpc	r25, r1
    2e86:	69 f4       	brne	.+26     	; 0x2ea2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	2f ef       	ldi	r18, 0xFF	; 255
    2e8e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e90:	92 07       	cpc	r25, r18
    2e92:	39 f4       	brne	.+14     	; 0x2ea2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2e94:	82 e2       	ldi	r24, 0x22	; 34
    2e96:	95 e0       	ldi	r25, 0x05	; 5
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	00 e0       	ldi	r16, 0x00	; 0
    2ea0:	fc d3       	rcall	.+2040   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2ea2:	0f 90       	pop	r0
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	0f 91       	pop	r16
    2eb0:	08 95       	ret

00002eb2 <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	6f ef       	ldi	r22, 0xFF	; 255
    2ec0:	7f ef       	ldi	r23, 0xFF	; 255
    2ec2:	d2 df       	rcall	.-92     	; 0x2e68 <_Z41__static_initialization_and_destruction_0ii>
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <_Z41__static_initialization_and_destruction_0ii>:
    2eca:	0f 93       	push	r16
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <_Z41__static_initialization_and_destruction_0ii+0xa>
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	7c 83       	std	Y+4, r23	; 0x04
    2ede:	6b 83       	std	Y+3, r22	; 0x03
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	69 f4       	brne	.+26     	; 0x2f04 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	2f ef       	ldi	r18, 0xFF	; 255
    2ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef2:	92 07       	cpc	r25, r18
    2ef4:	39 f4       	brne	.+14     	; 0x2f04 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2ef6:	88 e2       	ldi	r24, 0x28	; 40
    2ef8:	95 e0       	ldi	r25, 0x05	; 5
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	00 e0       	ldi	r16, 0x00	; 0
    2f02:	cb d3       	rcall	.+1942   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2f04:	0f 90       	pop	r0
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	0f 91       	pop	r16
    2f12:	08 95       	ret

00002f14 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	6f ef       	ldi	r22, 0xFF	; 255
    2f22:	7f ef       	ldi	r23, 0xFF	; 255
    2f24:	d2 df       	rcall	.-92     	; 0x2eca <_Z41__static_initialization_and_destruction_0ii>
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <_Z41__static_initialization_and_destruction_0ii>:
    2f2c:	0f 93       	push	r16
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <_Z41__static_initialization_and_destruction_0ii+0xa>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	7c 83       	std	Y+4, r23	; 0x04
    2f40:	6b 83       	std	Y+3, r22	; 0x03
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	9a 81       	ldd	r25, Y+2	; 0x02
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	2f ef       	ldi	r18, 0xFF	; 255
    2f52:	8f 3f       	cpi	r24, 0xFF	; 255
    2f54:	92 07       	cpc	r25, r18
    2f56:	39 f4       	brne	.+14     	; 0x2f66 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2f58:	8e e2       	ldi	r24, 0x2E	; 46
    2f5a:	95 e0       	ldi	r25, 0x05	; 5
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	00 e0       	ldi	r16, 0x00	; 0
    2f64:	9a d3       	rcall	.+1844   	; 0x369a <_ZN9IPAddressC1Ehhhh>
    2f66:	0f 90       	pop	r0

  while (_remaining)
  {
    read();
  }
}
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	0f 91       	pop	r16
    2f74:	08 95       	ret

00002f76 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	6f ef       	ldi	r22, 0xFF	; 255
    2f84:	7f ef       	ldi	r23, 0xFF	; 255
    2f86:	d2 df       	rcall	.-92     	; 0x2f2c <_Z41__static_initialization_and_destruction_0ii>
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <_Z10store_charhP11ring_buffer>:
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	00 d0       	rcall	.+0      	; 0x2f94 <_Z10store_charhP11ring_buffer+0x6>
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <_Z10store_charhP11ring_buffer+0x8>
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <_Z10store_charhP11ring_buffer+0xa>
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
    2f9e:	7d 83       	std	Y+5, r23	; 0x05
    2fa0:	6c 83       	std	Y+4, r22	; 0x04
    2fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	e0 5c       	subi	r30, 0xC0	; 192
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	01 96       	adiw	r24, 0x01	; 1
    2fb2:	8f 73       	andi	r24, 0x3F	; 63
    2fb4:	90 70       	andi	r25, 0x00	; 0
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	29 81       	ldd	r18, Y+1	; 0x01
    2fbc:	3a 81       	ldd	r19, Y+2	; 0x02
    2fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	ee 5b       	subi	r30, 0xBE	; 190
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	1e 82       	std	Y+6, r1	; 0x06
    2fce:	28 17       	cp	r18, r24
    2fd0:	39 07       	cpc	r19, r25
    2fd2:	11 f0       	breq	.+4      	; 0x2fd8 <_Z10store_charhP11ring_buffer+0x4a>
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	8e 83       	std	Y+6, r24	; 0x06
    2fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fda:	88 23       	and	r24, r24
    2fdc:	b9 f0       	breq	.+46     	; 0x300c <_Z10store_charhP11ring_buffer+0x7e>
    2fde:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	e0 5c       	subi	r30, 0xC0	; 192
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	20 81       	ld	r18, Z
    2fea:	31 81       	ldd	r19, Z+1	; 0x01
    2fec:	8c 81       	ldd	r24, Y+4	; 0x04
    2fee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	e2 0f       	add	r30, r18
    2ff4:	f3 1f       	adc	r31, r19
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	80 83       	st	Z, r24
    2ffa:	29 81       	ldd	r18, Y+1	; 0x01
    2ffc:	3a 81       	ldd	r19, Y+2	; 0x02
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	9d 81       	ldd	r25, Y+5	; 0x05
    3002:	fc 01       	movw	r30, r24
    3004:	e0 5c       	subi	r30, 0xC0	; 192
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	31 83       	std	Z+1, r19	; 0x01
    300a:	20 83       	st	Z, r18
    300c:	26 96       	adiw	r28, 0x06	; 6
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <_Z11serialEventv>:
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <__vector_18>:
    302c:	1f 92       	push	r1
    302e:	0f 92       	push	r0
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	0f 92       	push	r0
    3034:	11 24       	eor	r1, r1
    3036:	2f 93       	push	r18
    3038:	3f 93       	push	r19
    303a:	4f 93       	push	r20
    303c:	5f 93       	push	r21
    303e:	6f 93       	push	r22
    3040:	7f 93       	push	r23
    3042:	8f 93       	push	r24
    3044:	9f 93       	push	r25
    3046:	af 93       	push	r26
    3048:	bf 93       	push	r27
    304a:	ef 93       	push	r30
    304c:	ff 93       	push	r31
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <__vector_18+0x28>
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	e0 ec       	ldi	r30, 0xC0	; 192
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	84 70       	andi	r24, 0x04	; 4
    3066:	90 70       	andi	r25, 0x00	; 0
    3068:	1b 82       	std	Y+3, r1	; 0x03
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	11 f4       	brne	.+4      	; 0x3072 <__vector_18+0x46>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	8b 83       	std	Y+3, r24	; 0x03
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	88 23       	and	r24, r24
    3076:	51 f0       	breq	.+20     	; 0x308c <__vector_18+0x60>
    3078:	e6 ec       	ldi	r30, 0xC6	; 198
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	24 e3       	ldi	r18, 0x34	; 52
    3082:	35 e0       	ldi	r19, 0x05	; 5
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	b9 01       	movw	r22, r18
    3088:	82 df       	rcall	.-252    	; 0x2f8e <_Z10store_charhP11ring_buffer>
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <__vector_18+0x68>
    308c:	e6 ec       	ldi	r30, 0xC6	; 198
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	ff 91       	pop	r31
    30a0:	ef 91       	pop	r30
    30a2:	bf 91       	pop	r27
    30a4:	af 91       	pop	r26
    30a6:	9f 91       	pop	r25
    30a8:	8f 91       	pop	r24
    30aa:	7f 91       	pop	r23
    30ac:	6f 91       	pop	r22
    30ae:	5f 91       	pop	r21
    30b0:	4f 91       	pop	r20
    30b2:	3f 91       	pop	r19
    30b4:	2f 91       	pop	r18
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <__vector_19>:
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	0f 92       	push	r0
    30c8:	11 24       	eor	r1, r1
    30ca:	2f 93       	push	r18
    30cc:	3f 93       	push	r19
    30ce:	8f 93       	push	r24
    30d0:	9f 93       	push	r25
    30d2:	af 93       	push	r26
    30d4:	bf 93       	push	r27
    30d6:	ef 93       	push	r30
    30d8:	ff 93       	push	r31
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <__vector_19+0x20>
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	20 91 b8 05 	lds	r18, 0x05B8
    30e8:	30 91 b9 05 	lds	r19, 0x05B9
    30ec:	80 91 ba 05 	lds	r24, 0x05BA
    30f0:	90 91 bb 05 	lds	r25, 0x05BB
    30f4:	1a 82       	std	Y+2, r1	; 0x02
    30f6:	28 17       	cp	r18, r24
    30f8:	39 07       	cpc	r19, r25
    30fa:	11 f4       	brne	.+4      	; 0x3100 <__vector_19+0x40>
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	8a 83       	std	Y+2, r24	; 0x02
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	88 23       	and	r24, r24
    3104:	41 f0       	breq	.+16     	; 0x3116 <__vector_19+0x56>
    3106:	a1 ec       	ldi	r26, 0xC1	; 193
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e1 ec       	ldi	r30, 0xC1	; 193
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	8f 7d       	andi	r24, 0xDF	; 223
    3112:	8c 93       	st	X, r24
    3114:	18 c0       	rjmp	.+48     	; 0x3146 <__vector_19+0x86>
    3116:	80 91 ba 05 	lds	r24, 0x05BA
    311a:	90 91 bb 05 	lds	r25, 0x05BB
    311e:	fc 01       	movw	r30, r24
    3120:	e8 58       	subi	r30, 0x88	; 136
    3122:	fa 4f       	sbci	r31, 0xFA	; 250
    3124:	80 81       	ld	r24, Z
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	80 91 ba 05 	lds	r24, 0x05BA
    312c:	90 91 bb 05 	lds	r25, 0x05BB
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	8f 73       	andi	r24, 0x3F	; 63
    3134:	90 70       	andi	r25, 0x00	; 0
    3136:	90 93 bb 05 	sts	0x05BB, r25
    313a:	80 93 ba 05 	sts	0x05BA, r24
    313e:	e6 ec       	ldi	r30, 0xC6	; 198
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	80 83       	st	Z, r24
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	ff 91       	pop	r31
    3150:	ef 91       	pop	r30
    3152:	bf 91       	pop	r27
    3154:	af 91       	pop	r26
    3156:	9f 91       	pop	r25
    3158:	8f 91       	pop	r24
    315a:	3f 91       	pop	r19
    315c:	2f 91       	pop	r18
    315e:	0f 90       	pop	r0
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	0f 90       	pop	r0
    3164:	1f 90       	pop	r1
    3166:	18 95       	reti

00003168 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    3168:	8f 92       	push	r8
    316a:	9f 92       	push	r9
    316c:	af 92       	push	r10
    316e:	bf 92       	push	r11
    3170:	cf 92       	push	r12
    3172:	df 92       	push	r13
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	62 97       	sbiw	r28, 0x12	; 18
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	7c 83       	std	Y+4, r23	; 0x04
    3196:	6b 83       	std	Y+3, r22	; 0x03
    3198:	5e 83       	std	Y+6, r21	; 0x06
    319a:	4d 83       	std	Y+5, r20	; 0x05
    319c:	38 87       	std	Y+8, r19	; 0x08
    319e:	2f 83       	std	Y+7, r18	; 0x07
    31a0:	1a 87       	std	Y+10, r17	; 0x0a
    31a2:	09 87       	std	Y+9, r16	; 0x09
    31a4:	fc 86       	std	Y+12, r15	; 0x0c
    31a6:	eb 86       	std	Y+11, r14	; 0x0b
    31a8:	de 86       	std	Y+14, r13	; 0x0e
    31aa:	cd 86       	std	Y+13, r12	; 0x0d
    31ac:	b8 8a       	std	Y+16, r11	; 0x10
    31ae:	af 86       	std	Y+15, r10	; 0x0f
    31b0:	9a 8a       	std	Y+18, r9	; 0x12
    31b2:	89 8a       	std	Y+17, r8	; 0x11
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN6StreamC2Ev>
    31bc:	e9 81       	ldd	r30, Y+1	; 0x01
    31be:	fa 81       	ldd	r31, Y+2	; 0x02
    31c0:	88 e3       	ldi	r24, 0x38	; 56
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	91 83       	std	Z+1, r25	; 0x01
    31c6:	80 83       	st	Z, r24
    31c8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ca:	fa 81       	ldd	r31, Y+2	; 0x02
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	95 87       	std	Z+13, r25	; 0x0d
    31d2:	84 87       	std	Z+12, r24	; 0x0c
    31d4:	e9 81       	ldd	r30, Y+1	; 0x01
    31d6:	fa 81       	ldd	r31, Y+2	; 0x02
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	97 87       	std	Z+15, r25	; 0x0f
    31de:	86 87       	std	Z+14, r24	; 0x0e
    31e0:	e9 81       	ldd	r30, Y+1	; 0x01
    31e2:	fa 81       	ldd	r31, Y+2	; 0x02
    31e4:	8f 81       	ldd	r24, Y+7	; 0x07
    31e6:	98 85       	ldd	r25, Y+8	; 0x08
    31e8:	91 8b       	std	Z+17, r25	; 0x11
    31ea:	80 8b       	std	Z+16, r24	; 0x10
    31ec:	e9 81       	ldd	r30, Y+1	; 0x01
    31ee:	fa 81       	ldd	r31, Y+2	; 0x02
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	93 8b       	std	Z+19, r25	; 0x13
    31f6:	82 8b       	std	Z+18, r24	; 0x12
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    31fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3200:	95 8b       	std	Z+21, r25	; 0x15
    3202:	84 8b       	std	Z+20, r24	; 0x14
    3204:	e9 81       	ldd	r30, Y+1	; 0x01
    3206:	fa 81       	ldd	r31, Y+2	; 0x02
    3208:	8d 85       	ldd	r24, Y+13	; 0x0d
    320a:	9e 85       	ldd	r25, Y+14	; 0x0e
    320c:	97 8b       	std	Z+23, r25	; 0x17
    320e:	86 8b       	std	Z+22, r24	; 0x16
    3210:	e9 81       	ldd	r30, Y+1	; 0x01
    3212:	fa 81       	ldd	r31, Y+2	; 0x02
    3214:	8f 85       	ldd	r24, Y+15	; 0x0f
    3216:	98 89       	ldd	r25, Y+16	; 0x10
    3218:	91 8f       	std	Z+25, r25	; 0x19
    321a:	80 8f       	std	Z+24, r24	; 0x18
    321c:	e9 81       	ldd	r30, Y+1	; 0x01
    321e:	fa 81       	ldd	r31, Y+2	; 0x02
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	9a 89       	ldd	r25, Y+18	; 0x12
    3224:	93 8f       	std	Z+27, r25	; 0x1b
    3226:	82 8f       	std	Z+26, r24	; 0x1a
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	84 8f       	std	Z+28, r24	; 0x1c
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	8a a1       	ldd	r24, Y+34	; 0x22
    3236:	85 8f       	std	Z+29, r24	; 0x1d
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	8b a1       	ldd	r24, Y+35	; 0x23
    323e:	86 8f       	std	Z+30, r24	; 0x1e
    3240:	e9 81       	ldd	r30, Y+1	; 0x01
    3242:	fa 81       	ldd	r31, Y+2	; 0x02
    3244:	8c a1       	ldd	r24, Y+36	; 0x24
    3246:	87 8f       	std	Z+31, r24	; 0x1f
    3248:	e9 81       	ldd	r30, Y+1	; 0x01
    324a:	fa 81       	ldd	r31, Y+2	; 0x02
    324c:	8d a1       	ldd	r24, Y+37	; 0x25
    324e:	80 a3       	std	Z+32, r24	; 0x20
    3250:	62 96       	adiw	r28, 0x12	; 18
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	ff 90       	pop	r15
    3266:	ef 90       	pop	r14
    3268:	df 90       	pop	r13
    326a:	cf 90       	pop	r12
    326c:	bf 90       	pop	r11
    326e:	af 90       	pop	r10
    3270:	9f 90       	pop	r9
    3272:	8f 90       	pop	r8
    3274:	08 95       	ret

00003276 <_ZN14HardwareSerial9availableEv>:
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <_ZN14HardwareSerial9availableEv+0x6>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	9a 83       	std	Y+2, r25	; 0x02
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	e9 81       	ldd	r30, Y+1	; 0x01
    3286:	fa 81       	ldd	r31, Y+2	; 0x02
    3288:	84 85       	ldd	r24, Z+12	; 0x0c
    328a:	95 85       	ldd	r25, Z+13	; 0x0d
    328c:	fc 01       	movw	r30, r24
    328e:	e0 5c       	subi	r30, 0xC0	; 192
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	20 81       	ld	r18, Z
    3294:	31 81       	ldd	r19, Z+1	; 0x01
    3296:	e9 81       	ldd	r30, Y+1	; 0x01
    3298:	fa 81       	ldd	r31, Y+2	; 0x02
    329a:	84 85       	ldd	r24, Z+12	; 0x0c
    329c:	95 85       	ldd	r25, Z+13	; 0x0d
    329e:	fc 01       	movw	r30, r24
    32a0:	ee 5b       	subi	r30, 0xBE	; 190
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	a9 01       	movw	r20, r18
    32aa:	48 1b       	sub	r20, r24
    32ac:	59 0b       	sbc	r21, r25
    32ae:	ca 01       	movw	r24, r20
    32b0:	80 5c       	subi	r24, 0xC0	; 192
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	8f 73       	andi	r24, 0x3F	; 63
    32b6:	90 70       	andi	r25, 0x00	; 0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <_Z14serialEventRunv>:
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	0f 92       	push	r0
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	8c eb       	ldi	r24, 0xBC	; 188
    32ce:	95 e0       	ldi	r25, 0x05	; 5
    32d0:	d2 df       	rcall	.-92     	; 0x3276 <_ZN14HardwareSerial9availableEv>
    32d2:	19 82       	std	Y+1, r1	; 0x01
    32d4:	00 97       	sbiw	r24, 0x00	; 0
    32d6:	11 f0       	breq	.+4      	; 0x32dc <_Z14serialEventRunv+0x1a>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	88 23       	and	r24, r24
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <_Z14serialEventRunv+0x22>
    32e2:	9d de       	rcall	.-710    	; 0x301e <_Z11serialEventv>
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <_ZN14HardwareSerial4peekEv>:
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <_ZN14HardwareSerial4peekEv+0x6>
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <_ZN14HardwareSerial4peekEv+0x8>
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	84 85       	ldd	r24, Z+12	; 0x0c
    3304:	95 85       	ldd	r25, Z+13	; 0x0d
    3306:	fc 01       	movw	r30, r24
    3308:	e0 5c       	subi	r30, 0xC0	; 192
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	20 81       	ld	r18, Z
    330e:	31 81       	ldd	r19, Z+1	; 0x01
    3310:	e9 81       	ldd	r30, Y+1	; 0x01
    3312:	fa 81       	ldd	r31, Y+2	; 0x02
    3314:	84 85       	ldd	r24, Z+12	; 0x0c
    3316:	95 85       	ldd	r25, Z+13	; 0x0d
    3318:	fc 01       	movw	r30, r24
    331a:	ee 5b       	subi	r30, 0xBE	; 190
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	1d 82       	std	Y+5, r1	; 0x05
    3324:	28 17       	cp	r18, r24
    3326:	39 07       	cpc	r19, r25
    3328:	11 f4       	brne	.+4      	; 0x332e <_ZN14HardwareSerial4peekEv+0x42>
    332a:	21 e0       	ldi	r18, 0x01	; 1
    332c:	2d 83       	std	Y+5, r18	; 0x05
    332e:	3d 81       	ldd	r19, Y+5	; 0x05
    3330:	33 23       	and	r19, r19
    3332:	29 f0       	breq	.+10     	; 0x333e <_ZN14HardwareSerial4peekEv+0x52>
    3334:	8f ef       	ldi	r24, 0xFF	; 255
    3336:	9f ef       	ldi	r25, 0xFF	; 255
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
    333c:	15 c0       	rjmp	.+42     	; 0x3368 <_ZN14HardwareSerial4peekEv+0x7c>
    333e:	e9 81       	ldd	r30, Y+1	; 0x01
    3340:	fa 81       	ldd	r31, Y+2	; 0x02
    3342:	24 85       	ldd	r18, Z+12	; 0x0c
    3344:	35 85       	ldd	r19, Z+13	; 0x0d
    3346:	e9 81       	ldd	r30, Y+1	; 0x01
    3348:	fa 81       	ldd	r31, Y+2	; 0x02
    334a:	84 85       	ldd	r24, Z+12	; 0x0c
    334c:	95 85       	ldd	r25, Z+13	; 0x0d
    334e:	fc 01       	movw	r30, r24
    3350:	ee 5b       	subi	r30, 0xBE	; 190
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	f9 01       	movw	r30, r18
    335a:	e8 0f       	add	r30, r24
    335c:	f9 1f       	adc	r31, r25
    335e:	80 81       	ld	r24, Z
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	3c 83       	std	Y+4, r19	; 0x04
    3366:	2b 83       	std	Y+3, r18	; 0x03
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <_ZN14HardwareSerial4readEv>:
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <_ZN14HardwareSerial4readEv+0x6>
    3382:	00 d0       	rcall	.+0      	; 0x3384 <_ZN14HardwareSerial4readEv+0x8>
    3384:	00 d0       	rcall	.+0      	; 0x3386 <_ZN14HardwareSerial4readEv+0xa>
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	9b 83       	std	Y+3, r25	; 0x03
    338c:	8a 83       	std	Y+2, r24	; 0x02
    338e:	ea 81       	ldd	r30, Y+2	; 0x02
    3390:	fb 81       	ldd	r31, Y+3	; 0x03
    3392:	84 85       	ldd	r24, Z+12	; 0x0c
    3394:	95 85       	ldd	r25, Z+13	; 0x0d
    3396:	fc 01       	movw	r30, r24
    3398:	e0 5c       	subi	r30, 0xC0	; 192
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	20 81       	ld	r18, Z
    339e:	31 81       	ldd	r19, Z+1	; 0x01
    33a0:	ea 81       	ldd	r30, Y+2	; 0x02
    33a2:	fb 81       	ldd	r31, Y+3	; 0x03
    33a4:	84 85       	ldd	r24, Z+12	; 0x0c
    33a6:	95 85       	ldd	r25, Z+13	; 0x0d
    33a8:	fc 01       	movw	r30, r24
    33aa:	ee 5b       	subi	r30, 0xBE	; 190
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	1e 82       	std	Y+6, r1	; 0x06
    33b4:	28 17       	cp	r18, r24
    33b6:	39 07       	cpc	r19, r25
    33b8:	11 f4       	brne	.+4      	; 0x33be <_ZN14HardwareSerial4readEv+0x42>
    33ba:	21 e0       	ldi	r18, 0x01	; 1
    33bc:	2e 83       	std	Y+6, r18	; 0x06
    33be:	3e 81       	ldd	r19, Y+6	; 0x06
    33c0:	33 23       	and	r19, r19
    33c2:	29 f0       	breq	.+10     	; 0x33ce <_ZN14HardwareSerial4readEv+0x52>
    33c4:	8f ef       	ldi	r24, 0xFF	; 255
    33c6:	9f ef       	ldi	r25, 0xFF	; 255
    33c8:	9d 83       	std	Y+5, r25	; 0x05
    33ca:	8c 83       	std	Y+4, r24	; 0x04
    33cc:	2c c0       	rjmp	.+88     	; 0x3426 <_ZN14HardwareSerial4readEv+0xaa>
    33ce:	ea 81       	ldd	r30, Y+2	; 0x02
    33d0:	fb 81       	ldd	r31, Y+3	; 0x03
    33d2:	24 85       	ldd	r18, Z+12	; 0x0c
    33d4:	35 85       	ldd	r19, Z+13	; 0x0d
    33d6:	ea 81       	ldd	r30, Y+2	; 0x02
    33d8:	fb 81       	ldd	r31, Y+3	; 0x03
    33da:	84 85       	ldd	r24, Z+12	; 0x0c
    33dc:	95 85       	ldd	r25, Z+13	; 0x0d
    33de:	fc 01       	movw	r30, r24
    33e0:	ee 5b       	subi	r30, 0xBE	; 190
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	f9 01       	movw	r30, r18
    33ea:	e8 0f       	add	r30, r24
    33ec:	f9 1f       	adc	r31, r25
    33ee:	80 81       	ld	r24, Z
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	ea 81       	ldd	r30, Y+2	; 0x02
    33f4:	fb 81       	ldd	r31, Y+3	; 0x03
    33f6:	24 85       	ldd	r18, Z+12	; 0x0c
    33f8:	35 85       	ldd	r19, Z+13	; 0x0d
    33fa:	ea 81       	ldd	r30, Y+2	; 0x02
    33fc:	fb 81       	ldd	r31, Y+3	; 0x03
    33fe:	84 85       	ldd	r24, Z+12	; 0x0c
    3400:	95 85       	ldd	r25, Z+13	; 0x0d
    3402:	fc 01       	movw	r30, r24
    3404:	ee 5b       	subi	r30, 0xBE	; 190
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	8f 73       	andi	r24, 0x3F	; 63
    3410:	90 70       	andi	r25, 0x00	; 0
    3412:	f9 01       	movw	r30, r18
    3414:	ee 5b       	subi	r30, 0xBE	; 190
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	28 2f       	mov	r18, r24
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	3d 83       	std	Y+5, r19	; 0x05
    3424:	2c 83       	std	Y+4, r18	; 0x04
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	9d 81       	ldd	r25, Y+5	; 0x05
    342a:	26 96       	adiw	r28, 0x06	; 6
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <_ZN14HardwareSerial5flushEv>:
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	00 d0       	rcall	.+0      	; 0x3442 <_ZN14HardwareSerial5flushEv+0x6>
    3442:	0f 92       	push	r0
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	e9 81       	ldd	r30, Y+1	; 0x01
    344e:	fa 81       	ldd	r31, Y+2	; 0x02
    3450:	91 a1       	ldd	r25, Z+33	; 0x21
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	89 27       	eor	r24, r25
    3456:	88 23       	and	r24, r24
    3458:	79 f4       	brne	.+30     	; 0x3478 <_ZN14HardwareSerial5flushEv+0x3c>
    345a:	e9 81       	ldd	r30, Y+1	; 0x01
    345c:	fa 81       	ldd	r31, Y+2	; 0x02
    345e:	04 88       	ldd	r0, Z+20	; 0x14
    3460:	f5 89       	ldd	r31, Z+21	; 0x15
    3462:	e0 2d       	mov	r30, r0
    3464:	80 81       	ld	r24, Z
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	80 74       	andi	r24, 0x40	; 64
    346c:	90 70       	andi	r25, 0x00	; 0
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	19 f4       	brne	.+6      	; 0x3478 <_ZN14HardwareSerial5flushEv+0x3c>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	8b 83       	std	Y+3, r24	; 0x03
    3476:	01 c0       	rjmp	.+2      	; 0x347a <_ZN14HardwareSerial5flushEv+0x3e>
    3478:	1b 82       	std	Y+3, r1	; 0x03
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	88 23       	and	r24, r24
    347e:	31 f7       	brne	.-52     	; 0x344c <_ZN14HardwareSerial5flushEv+0x10>
    3480:	e9 81       	ldd	r30, Y+1	; 0x01
    3482:	fa 81       	ldd	r31, Y+2	; 0x02
    3484:	11 a2       	std	Z+33, r1	; 0x21
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	08 95       	ret

00003492 <_ZN14HardwareSerial5writeEh>:
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	00 d0       	rcall	.+0      	; 0x3498 <_ZN14HardwareSerial5writeEh+0x6>
    3498:	00 d0       	rcall	.+0      	; 0x349a <_ZN14HardwareSerial5writeEh+0x8>
    349a:	00 d0       	rcall	.+0      	; 0x349c <_ZN14HardwareSerial5writeEh+0xa>
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
    34a4:	6d 83       	std	Y+5, r22	; 0x05
    34a6:	eb 81       	ldd	r30, Y+3	; 0x03
    34a8:	fc 81       	ldd	r31, Y+4	; 0x04
    34aa:	86 85       	ldd	r24, Z+14	; 0x0e
    34ac:	97 85       	ldd	r25, Z+15	; 0x0f
    34ae:	fc 01       	movw	r30, r24
    34b0:	e0 5c       	subi	r30, 0xC0	; 192
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	01 96       	adiw	r24, 0x01	; 1
    34ba:	8f 73       	andi	r24, 0x3F	; 63
    34bc:	90 70       	andi	r25, 0x00	; 0
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	29 81       	ldd	r18, Y+1	; 0x01
    34c4:	3a 81       	ldd	r19, Y+2	; 0x02
    34c6:	eb 81       	ldd	r30, Y+3	; 0x03
    34c8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ca:	86 85       	ldd	r24, Z+14	; 0x0e
    34cc:	97 85       	ldd	r25, Z+15	; 0x0f
    34ce:	fc 01       	movw	r30, r24
    34d0:	ee 5b       	subi	r30, 0xBE	; 190
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	1e 82       	std	Y+6, r1	; 0x06
    34da:	28 17       	cp	r18, r24
    34dc:	39 07       	cpc	r19, r25
    34de:	11 f4       	brne	.+4      	; 0x34e4 <_ZN14HardwareSerial5writeEh+0x52>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	8e 83       	std	Y+6, r24	; 0x06
    34e4:	8e 81       	ldd	r24, Y+6	; 0x06
    34e6:	88 23       	and	r24, r24
    34e8:	61 f7       	brne	.-40     	; 0x34c2 <_ZN14HardwareSerial5writeEh+0x30>
    34ea:	eb 81       	ldd	r30, Y+3	; 0x03
    34ec:	fc 81       	ldd	r31, Y+4	; 0x04
    34ee:	26 85       	ldd	r18, Z+14	; 0x0e
    34f0:	37 85       	ldd	r19, Z+15	; 0x0f
    34f2:	eb 81       	ldd	r30, Y+3	; 0x03
    34f4:	fc 81       	ldd	r31, Y+4	; 0x04
    34f6:	86 85       	ldd	r24, Z+14	; 0x0e
    34f8:	97 85       	ldd	r25, Z+15	; 0x0f
    34fa:	fc 01       	movw	r30, r24
    34fc:	e0 5c       	subi	r30, 0xC0	; 192
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	f9 01       	movw	r30, r18
    3506:	e8 0f       	add	r30, r24
    3508:	f9 1f       	adc	r31, r25
    350a:	8d 81       	ldd	r24, Y+5	; 0x05
    350c:	80 83       	st	Z, r24
    350e:	eb 81       	ldd	r30, Y+3	; 0x03
    3510:	fc 81       	ldd	r31, Y+4	; 0x04
    3512:	86 85       	ldd	r24, Z+14	; 0x0e
    3514:	97 85       	ldd	r25, Z+15	; 0x0f
    3516:	29 81       	ldd	r18, Y+1	; 0x01
    3518:	3a 81       	ldd	r19, Y+2	; 0x02
    351a:	fc 01       	movw	r30, r24
    351c:	e0 5c       	subi	r30, 0xC0	; 192
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	31 83       	std	Z+1, r19	; 0x01
    3522:	20 83       	st	Z, r18
    3524:	eb 81       	ldd	r30, Y+3	; 0x03
    3526:	fc 81       	ldd	r31, Y+4	; 0x04
    3528:	a6 89       	ldd	r26, Z+22	; 0x16
    352a:	b7 89       	ldd	r27, Z+23	; 0x17
    352c:	eb 81       	ldd	r30, Y+3	; 0x03
    352e:	fc 81       	ldd	r31, Y+4	; 0x04
    3530:	06 88       	ldd	r0, Z+22	; 0x16
    3532:	f7 89       	ldd	r31, Z+23	; 0x17
    3534:	e0 2d       	mov	r30, r0
    3536:	80 81       	ld	r24, Z
    3538:	48 2f       	mov	r20, r24
    353a:	eb 81       	ldd	r30, Y+3	; 0x03
    353c:	fc 81       	ldd	r31, Y+4	; 0x04
    353e:	87 8d       	ldd	r24, Z+31	; 0x1f
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	02 2e       	mov	r0, r18
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <_ZN14HardwareSerial5writeEh+0xbe>
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	0a 94       	dec	r0
    3552:	e2 f7       	brpl	.-8      	; 0x354c <_ZN14HardwareSerial5writeEh+0xba>
    3554:	84 2b       	or	r24, r20
    3556:	8c 93       	st	X, r24
    3558:	eb 81       	ldd	r30, Y+3	; 0x03
    355a:	fc 81       	ldd	r31, Y+4	; 0x04
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	81 a3       	std	Z+33, r24	; 0x21
    3560:	eb 81       	ldd	r30, Y+3	; 0x03
    3562:	fc 81       	ldd	r31, Y+4	; 0x04
    3564:	a4 89       	ldd	r26, Z+20	; 0x14
    3566:	b5 89       	ldd	r27, Z+21	; 0x15
    3568:	eb 81       	ldd	r30, Y+3	; 0x03
    356a:	fc 81       	ldd	r31, Y+4	; 0x04
    356c:	04 88       	ldd	r0, Z+20	; 0x14
    356e:	f5 89       	ldd	r31, Z+21	; 0x15
    3570:	e0 2d       	mov	r30, r0
    3572:	80 81       	ld	r24, Z
    3574:	80 64       	ori	r24, 0x40	; 64
    3576:	8c 93       	st	X, r24
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	26 96       	adiw	r28, 0x06	; 6
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <_Z41__static_initialization_and_destruction_0ii>:
    358e:	8f 92       	push	r8
    3590:	9f 92       	push	r9
    3592:	af 92       	push	r10
    3594:	bf 92       	push	r11
    3596:	cf 92       	push	r12
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <_Z41__static_initialization_and_destruction_0ii+0x1a>
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <_Z41__static_initialization_and_destruction_0ii+0x1c>
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	9a 83       	std	Y+2, r25	; 0x02
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	7c 83       	std	Y+4, r23	; 0x04
    35b4:	6b 83       	std	Y+3, r22	; 0x03
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	91 05       	cpc	r25, r1
    35be:	09 f0       	breq	.+2      	; 0x35c2 <_Z41__static_initialization_and_destruction_0ii+0x34>
    35c0:	3d c0       	rjmp	.+122    	; 0x363c <_Z41__static_initialization_and_destruction_0ii+0xae>
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	2f ef       	ldi	r18, 0xFF	; 255
    35c8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ca:	92 07       	cpc	r25, r18
    35cc:	b9 f5       	brne	.+110    	; 0x363c <_Z41__static_initialization_and_destruction_0ii+0xae>
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <_Z41__static_initialization_and_destruction_0ii+0x42>
    35d0:	00 d0       	rcall	.+0      	; 0x35d2 <_Z41__static_initialization_and_destruction_0ii+0x44>
    35d2:	0f 92       	push	r0
    35d4:	ed b7       	in	r30, 0x3d	; 61
    35d6:	fe b7       	in	r31, 0x3e	; 62
    35d8:	31 96       	adiw	r30, 0x01	; 1
    35da:	2c eb       	ldi	r18, 0xBC	; 188
    35dc:	35 e0       	ldi	r19, 0x05	; 5
    35de:	44 e3       	ldi	r20, 0x34	; 52
    35e0:	55 e0       	ldi	r21, 0x05	; 5
    35e2:	a8 e7       	ldi	r26, 0x78	; 120
    35e4:	b5 e0       	ldi	r27, 0x05	; 5
    35e6:	84 e0       	ldi	r24, 0x04	; 4
    35e8:	80 83       	st	Z, r24
    35ea:	83 e0       	ldi	r24, 0x03	; 3
    35ec:	81 83       	std	Z+1, r24	; 0x01
    35ee:	87 e0       	ldi	r24, 0x07	; 7
    35f0:	82 83       	std	Z+2, r24	; 0x02
    35f2:	85 e0       	ldi	r24, 0x05	; 5
    35f4:	83 83       	std	Z+3, r24	; 0x03
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	84 83       	std	Z+4, r24	; 0x04
    35fa:	c9 01       	movw	r24, r18
    35fc:	ba 01       	movw	r22, r20
    35fe:	ad 01       	movw	r20, r26
    3600:	25 ec       	ldi	r18, 0xC5	; 197
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	04 ec       	ldi	r16, 0xC4	; 196
    3606:	10 e0       	ldi	r17, 0x00	; 0
    3608:	0f 2e       	mov	r0, r31
    360a:	f0 ec       	ldi	r31, 0xC0	; 192
    360c:	ef 2e       	mov	r14, r31
    360e:	ff 24       	eor	r15, r15
    3610:	f0 2d       	mov	r31, r0
    3612:	0f 2e       	mov	r0, r31
    3614:	f1 ec       	ldi	r31, 0xC1	; 193
    3616:	cf 2e       	mov	r12, r31
    3618:	dd 24       	eor	r13, r13
    361a:	f0 2d       	mov	r31, r0
    361c:	0f 2e       	mov	r0, r31
    361e:	f2 ec       	ldi	r31, 0xC2	; 194
    3620:	af 2e       	mov	r10, r31
    3622:	bb 24       	eor	r11, r11
    3624:	f0 2d       	mov	r31, r0
    3626:	0f 2e       	mov	r0, r31
    3628:	f6 ec       	ldi	r31, 0xC6	; 198
    362a:	8f 2e       	mov	r8, r31
    362c:	99 24       	eor	r9, r9
    362e:	f0 2d       	mov	r31, r0
    3630:	9b dd       	rcall	.-1226   	; 0x3168 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	1f 91       	pop	r17
    364a:	0f 91       	pop	r16
    364c:	ff 90       	pop	r15
    364e:	ef 90       	pop	r14
    3650:	df 90       	pop	r13
    3652:	cf 90       	pop	r12
    3654:	bf 90       	pop	r11
    3656:	af 90       	pop	r10
    3658:	9f 90       	pop	r9
    365a:	8f 90       	pop	r8
    365c:	08 95       	ret

0000365e <_GLOBAL__I_rx_buffer>:
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	6f ef       	ldi	r22, 0xFF	; 255
    366c:	7f ef       	ldi	r23, 0xFF	; 255
    366e:	8f df       	rcall	.-226    	; 0x358e <_Z41__static_initialization_and_destruction_0ii>
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	08 95       	ret

00003676 <_ZN9PrintableC2Ev>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	00 d0       	rcall	.+0      	; 0x367c <_ZN9PrintableC2Ev+0x6>
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	82 e3       	ldi	r24, 0x32	; 50
    368a:	91 e0       	ldi	r25, 0x01	; 1
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <_ZN9IPAddressC1Ehhhh>:
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
    369a:	0f 93       	push	r16
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <_ZN9IPAddressC1Ehhhh+0x8>
    36a2:	00 d0       	rcall	.+0      	; 0x36a4 <_ZN9IPAddressC1Ehhhh+0xa>
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <_ZN9IPAddressC1Ehhhh+0xc>
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	9a 83       	std	Y+2, r25	; 0x02
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	6b 83       	std	Y+3, r22	; 0x03
    36b0:	4c 83       	std	Y+4, r20	; 0x04
    36b2:	2d 83       	std	Y+5, r18	; 0x05
    36b4:	0e 83       	std	Y+6, r16	; 0x06
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	dd df       	rcall	.-70     	; 0x3676 <_ZN9PrintableC2Ev>
    36bc:	e9 81       	ldd	r30, Y+1	; 0x01
    36be:	fa 81       	ldd	r31, Y+2	; 0x02
    36c0:	88 e4       	ldi	r24, 0x48	; 72
    36c2:	91 e0       	ldi	r25, 0x01	; 1
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	80 83       	st	Z, r24
    36c8:	e9 81       	ldd	r30, Y+1	; 0x01
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    36ca:	fa 81       	ldd	r31, Y+2	; 0x02
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	82 83       	std	Z+2, r24	; 0x02
    36d0:	e9 81       	ldd	r30, Y+1	; 0x01
  Lesser General Public License for more details.
    36d2:	fa 81       	ldd	r31, Y+2	; 0x02
    36d4:	8c 81       	ldd	r24, Y+4	; 0x04
    36d6:	83 83       	std	Z+3, r24	; 0x03
    36d8:	e9 81       	ldd	r30, Y+1	; 0x01

    36da:	fa 81       	ldd	r31, Y+2	; 0x02
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	84 83       	std	Z+4, r24	; 0x04
    36e0:	e9 81       	ldd	r30, Y+1	; 0x01
  You should have received a copy of the GNU Lesser General Public
    36e2:	fa 81       	ldd	r31, Y+2	; 0x02
    36e4:	8e 81       	ldd	r24, Y+6	; 0x06
    36e6:	85 83       	std	Z+5, r24	; 0x05
    36e8:	26 96       	adiw	r28, 0x06	; 6
  License along with this library; if not, write to the Free Software
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	0f 91       	pop	r16
    36fa:	08 95       	ret

000036fc <_Z41__static_initialization_and_destruction_0ii>:
    36fc:	0f 93       	push	r16
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <_Z41__static_initialization_and_destruction_0ii+0x8>
    3704:	00 d0       	rcall	.+0      	; 0x3706 <_Z41__static_initialization_and_destruction_0ii+0xa>
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	7c 83       	std	Y+4, r23	; 0x04
    3710:	6b 83       	std	Y+3, r22	; 0x03
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	81 30       	cpi	r24, 0x01	; 1
    3718:	91 05       	cpc	r25, r1
    371a:	69 f4       	brne	.+26     	; 0x3736 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	9c 81       	ldd	r25, Y+4	; 0x04
    3720:	2f ef       	ldi	r18, 0xFF	; 255
    3722:	8f 3f       	cpi	r24, 0xFF	; 255
    3724:	92 07       	cpc	r25, r18
    3726:	39 f4       	brne	.+14     	; 0x3736 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    3728:	8e ed       	ldi	r24, 0xDE	; 222
    372a:	95 e0       	ldi	r25, 0x05	; 5
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	00 e0       	ldi	r16, 0x00	; 0
    3734:	b2 df       	rcall	.-156    	; 0x369a <_ZN9IPAddressC1Ehhhh>
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	0f 91       	pop	r16
    3744:	08 95       	ret

00003746 <_GLOBAL__I__ZN9IPAddressC2Ev>:
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	6f ef       	ldi	r22, 0xFF	; 255
    3754:	7f ef       	ldi	r23, 0xFF	; 255
    3756:	d2 df       	rcall	.-92     	; 0x36fc <_Z41__static_initialization_and_destruction_0ii>
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <_ZNK9IPAddress7printToER5Print>:
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	28 97       	sbiw	r28, 0x08	; 8
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
    3776:	78 87       	std	Y+8, r23	; 0x08
    3778:	6f 83       	std	Y+7, r22	; 0x07
    377a:	1c 82       	std	Y+4, r1	; 0x04
    377c:	1b 82       	std	Y+3, r1	; 0x03
    377e:	1a 82       	std	Y+2, r1	; 0x02
    3780:	19 82       	std	Y+1, r1	; 0x01
    3782:	26 c0       	rjmp	.+76     	; 0x37d0 <_ZNK9IPAddress7printToER5Print+0x72>
    3784:	29 81       	ldd	r18, Y+1	; 0x01
    3786:	3a 81       	ldd	r19, Y+2	; 0x02
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	82 0f       	add	r24, r18
    378e:	93 1f       	adc	r25, r19
    3790:	fc 01       	movw	r30, r24
    3792:	32 96       	adiw	r30, 0x02	; 2
    3794:	20 81       	ld	r18, Z
    3796:	8f 81       	ldd	r24, Y+7	; 0x07
    3798:	98 85       	ldd	r25, Y+8	; 0x08
    379a:	62 2f       	mov	r22, r18
    379c:	4a e0       	ldi	r20, 0x0A	; 10
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	ab d1       	rcall	.+854    	; 0x3af8 <_ZN5Print5printEhi>
    37a2:	9c 01       	movw	r18, r24
    37a4:	8b 81       	ldd	r24, Y+3	; 0x03
    37a6:	9c 81       	ldd	r25, Y+4	; 0x04
    37a8:	82 0f       	add	r24, r18
    37aa:	93 1f       	adc	r25, r19
    37ac:	9c 83       	std	Y+4, r25	; 0x04
    37ae:	8b 83       	std	Y+3, r24	; 0x03
    37b0:	8f 81       	ldd	r24, Y+7	; 0x07
    37b2:	98 85       	ldd	r25, Y+8	; 0x08
    37b4:	6e e2       	ldi	r22, 0x2E	; 46
    37b6:	92 d0       	rcall	.+292    	; 0x38dc <_ZN5Print5printEc>
    37b8:	9c 01       	movw	r18, r24
    37ba:	8b 81       	ldd	r24, Y+3	; 0x03
    37bc:	9c 81       	ldd	r25, Y+4	; 0x04
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19
    37c2:	9c 83       	std	Y+4, r25	; 0x04
    37c4:	8b 83       	std	Y+3, r24	; 0x03
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	83 30       	cpi	r24, 0x03	; 3
    37d6:	91 05       	cpc	r25, r1
    37d8:	ac f2       	brlt	.-86     	; 0x3784 <_ZNK9IPAddress7printToER5Print+0x26>
    37da:	ed 81       	ldd	r30, Y+5	; 0x05
    37dc:	fe 81       	ldd	r31, Y+6	; 0x06
    37de:	25 81       	ldd	r18, Z+5	; 0x05
    37e0:	8f 81       	ldd	r24, Y+7	; 0x07
    37e2:	98 85       	ldd	r25, Y+8	; 0x08
    37e4:	62 2f       	mov	r22, r18
    37e6:	4a e0       	ldi	r20, 0x0A	; 10
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	86 d1       	rcall	.+780    	; 0x3af8 <_ZN5Print5printEhi>
    37ec:	9c 01       	movw	r18, r24
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	9c 83       	std	Y+4, r25	; 0x04
    37f8:	8b 83       	std	Y+3, r24	; 0x03
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	9c 81       	ldd	r25, Y+4	; 0x04
    37fe:	28 96       	adiw	r28, 0x08	; 8
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <_ZN9IPAddressC1Ev>:
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	00 d0       	rcall	.+0      	; 0x3816 <_ZN9IPAddressC1Ev+0x6>
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	9a 83       	std	Y+2, r25	; 0x02
    381c:	89 83       	std	Y+1, r24	; 0x01
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	9a 81       	ldd	r25, Y+2	; 0x02
    3822:	29 df       	rcall	.-430    	; 0x3676 <_ZN9PrintableC2Ev>
    3824:	e9 81       	ldd	r30, Y+1	; 0x01
    3826:	fa 81       	ldd	r31, Y+2	; 0x02
    3828:	88 e4       	ldi	r24, 0x48	; 72
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	80 83       	st	Z, r24
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	02 96       	adiw	r24, 0x02	; 2
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	44 e0       	ldi	r20, 0x04	; 4
    383c:	50 e0       	ldi	r21, 0x00	; 0
    383e:	0e 94 95 00 	call	0x12a	; 0x12a <memset>
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <_ZN5Print5writeEPKhj>:
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	29 97       	sbiw	r28, 0x09	; 9
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	9c 83       	std	Y+4, r25	; 0x04
    3862:	8b 83       	std	Y+3, r24	; 0x03
    3864:	7e 83       	std	Y+6, r23	; 0x06
    3866:	6d 83       	std	Y+5, r22	; 0x05
    3868:	58 87       	std	Y+8, r21	; 0x08
    386a:	4f 83       	std	Y+7, r20	; 0x07
    386c:	1a 82       	std	Y+2, r1	; 0x02
    386e:	19 82       	std	Y+1, r1	; 0x01
    3870:	1b c0       	rjmp	.+54     	; 0x38a8 <_ZN5Print5writeEPKhj+0x5c>
    3872:	eb 81       	ldd	r30, Y+3	; 0x03
    3874:	fc 81       	ldd	r31, Y+4	; 0x04
    3876:	01 90       	ld	r0, Z+
    3878:	f0 81       	ld	r31, Z
    387a:	e0 2d       	mov	r30, r0
    387c:	20 81       	ld	r18, Z
    387e:	31 81       	ldd	r19, Z+1	; 0x01
    3880:	ed 81       	ldd	r30, Y+5	; 0x05
    3882:	fe 81       	ldd	r31, Y+6	; 0x06
    3884:	40 81       	ld	r20, Z
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	01 96       	adiw	r24, 0x01	; 1
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	9c 81       	ldd	r25, Y+4	; 0x04
    3894:	64 2f       	mov	r22, r20
    3896:	f9 01       	movw	r30, r18
    3898:	09 95       	icall
    389a:	9c 01       	movw	r18, r24
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	9a 81       	ldd	r25, Y+2	; 0x02
    38a0:	82 0f       	add	r24, r18
    38a2:	93 1f       	adc	r25, r19
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	19 86       	std	Y+9, r1	; 0x09
    38aa:	8f 81       	ldd	r24, Y+7	; 0x07
    38ac:	98 85       	ldd	r25, Y+8	; 0x08
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	11 f0       	breq	.+4      	; 0x38b6 <_ZN5Print5writeEPKhj+0x6a>
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	89 87       	std	Y+9, r24	; 0x09
    38b6:	8f 81       	ldd	r24, Y+7	; 0x07
    38b8:	98 85       	ldd	r25, Y+8	; 0x08
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	98 87       	std	Y+8, r25	; 0x08
    38be:	8f 83       	std	Y+7, r24	; 0x07
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	88 23       	and	r24, r24
    38c4:	b1 f6       	brne	.-84     	; 0x3872 <_ZN5Print5writeEPKhj+0x26>
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	29 96       	adiw	r28, 0x09	; 9
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <_ZN5Print5printEc>:
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <_ZN5Print5printEc+0x6>
    38e2:	0f 92       	push	r0
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	6b 83       	std	Y+3, r22	; 0x03
    38ee:	e9 81       	ldd	r30, Y+1	; 0x01
    38f0:	fa 81       	ldd	r31, Y+2	; 0x02
    38f2:	01 90       	ld	r0, Z+
    38f4:	f0 81       	ld	r31, Z
    38f6:	e0 2d       	mov	r30, r0
    38f8:	01 90       	ld	r0, Z+
    38fa:	f0 81       	ld	r31, Z
    38fc:	e0 2d       	mov	r30, r0
    38fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	62 2f       	mov	r22, r18
    3906:	09 95       	icall
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <_ZN5Print5writeEPKc>:
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <_ZN5Print5writeEPKc+0xe>
    3922:	00 d0       	rcall	.+0      	; 0x3924 <_ZN5Print5writeEPKc+0x10>
    3924:	00 d0       	rcall	.+0      	; 0x3926 <_ZN5Print5writeEPKc+0x12>
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	7c 83       	std	Y+4, r23	; 0x04
    3930:	6b 83       	std	Y+3, r22	; 0x03
    3932:	8b 81       	ldd	r24, Y+3	; 0x03
    3934:	9c 81       	ldd	r25, Y+4	; 0x04
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	19 f4       	brne	.+6      	; 0x3940 <_ZN5Print5writeEPKc+0x2c>
    393a:	1e 82       	std	Y+6, r1	; 0x06
    393c:	1d 82       	std	Y+5, r1	; 0x05
    393e:	17 c0       	rjmp	.+46     	; 0x396e <_ZN5Print5writeEPKc+0x5a>
    3940:	e9 81       	ldd	r30, Y+1	; 0x01
    3942:	fa 81       	ldd	r31, Y+2	; 0x02
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	fc 01       	movw	r30, r24
    394a:	32 96       	adiw	r30, 0x02	; 2
    394c:	e0 80       	ld	r14, Z
    394e:	f1 80       	ldd	r15, Z+1	; 0x01
    3950:	0b 81       	ldd	r16, Y+3	; 0x03
    3952:	1c 81       	ldd	r17, Y+4	; 0x04
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	9c 81       	ldd	r25, Y+4	; 0x04
    3958:	0e 94 9c 00 	call	0x138	; 0x138 <strlen>
    395c:	9c 01       	movw	r18, r24
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	9a 81       	ldd	r25, Y+2	; 0x02
    3962:	b8 01       	movw	r22, r16
    3964:	a9 01       	movw	r20, r18
    3966:	f7 01       	movw	r30, r14
    3968:	09 95       	icall
    396a:	9e 83       	std	Y+6, r25	; 0x06
    396c:	8d 83       	std	Y+5, r24	; 0x05
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	26 96       	adiw	r28, 0x06	; 6
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	08 95       	ret

0000398c <_ZN5Print11printNumberEmh>:
    398c:	1f 93       	push	r17
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	e0 97       	sbiw	r28, 0x30	; 48
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	9a a7       	std	Y+42, r25	; 0x2a
    39a4:	89 a7       	std	Y+41, r24	; 0x29
    39a6:	4b a7       	std	Y+43, r20	; 0x2b
    39a8:	5c a7       	std	Y+44, r21	; 0x2c
    39aa:	6d a7       	std	Y+45, r22	; 0x2d
    39ac:	7e a7       	std	Y+46, r23	; 0x2e
    39ae:	2f a7       	std	Y+47, r18	; 0x2f
    39b0:	ce 01       	movw	r24, r28
    39b2:	08 96       	adiw	r24, 0x08	; 8
    39b4:	80 96       	adiw	r24, 0x20	; 32
    39b6:	9f 83       	std	Y+7, r25	; 0x07
    39b8:	8e 83       	std	Y+6, r24	; 0x06
    39ba:	ee 81       	ldd	r30, Y+6	; 0x06
    39bc:	ff 81       	ldd	r31, Y+7	; 0x07
    39be:	10 82       	st	Z, r1
    39c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39c2:	82 30       	cpi	r24, 0x02	; 2
    39c4:	10 f4       	brcc	.+4      	; 0x39ca <_ZN5Print11printNumberEmh+0x3e>
    39c6:	8a e0       	ldi	r24, 0x0A	; 10
    39c8:	8f a7       	std	Y+47, r24	; 0x2f
    39ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    39cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    39ce:	ad a5       	ldd	r26, Y+45	; 0x2d
    39d0:	be a5       	ldd	r27, Y+46	; 0x2e
    39d2:	8a 83       	std	Y+2, r24	; 0x02
    39d4:	9b 83       	std	Y+3, r25	; 0x03
    39d6:	ac 83       	std	Y+4, r26	; 0x04
    39d8:	bd 83       	std	Y+5, r27	; 0x05
    39da:	8f a5       	ldd	r24, Y+47	; 0x2f
    39dc:	28 2f       	mov	r18, r24
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    39e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    39e8:	ad a5       	ldd	r26, Y+45	; 0x2d
    39ea:	be a5       	ldd	r27, Y+46	; 0x2e
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	69 d2       	rcall	.+1234   	; 0x3ec4 <__udivmodsi4>
    39f2:	da 01       	movw	r26, r20
    39f4:	c9 01       	movw	r24, r18
    39f6:	8b a7       	std	Y+43, r24	; 0x2b
    39f8:	9c a7       	std	Y+44, r25	; 0x2c
    39fa:	ad a7       	std	Y+45, r26	; 0x2d
    39fc:	be a7       	std	Y+46, r27	; 0x2e
    39fe:	1a 81       	ldd	r17, Y+2	; 0x02
    3a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a02:	88 2f       	mov	r24, r24
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	a0 e0       	ldi	r26, 0x00	; 0
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	2b a5       	ldd	r18, Y+43	; 0x2b
    3a0c:	3c a5       	ldd	r19, Y+44	; 0x2c
    3a0e:	4d a5       	ldd	r20, Y+45	; 0x2d
    3a10:	5e a5       	ldd	r21, Y+46	; 0x2e
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	24 d2       	rcall	.+1096   	; 0x3e60 <__mulsi3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	91 2f       	mov	r25, r17
    3a1e:	98 1b       	sub	r25, r24
    3a20:	89 2f       	mov	r24, r25
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	8e 81       	ldd	r24, Y+6	; 0x06
    3a26:	9f 81       	ldd	r25, Y+7	; 0x07
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	9f 83       	std	Y+7, r25	; 0x07
    3a2c:	8e 83       	std	Y+6, r24	; 0x06
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	8a 30       	cpi	r24, 0x0A	; 10
    3a32:	24 f4       	brge	.+8      	; 0x3a3c <_ZN5Print11printNumberEmh+0xb0>
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	80 5d       	subi	r24, 0xD0	; 208
    3a38:	88 ab       	std	Y+48, r24	; 0x30
    3a3a:	03 c0       	rjmp	.+6      	; 0x3a42 <_ZN5Print11printNumberEmh+0xb6>
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	89 5c       	subi	r24, 0xC9	; 201
    3a40:	88 ab       	std	Y+48, r24	; 0x30
    3a42:	ee 81       	ldd	r30, Y+6	; 0x06
    3a44:	ff 81       	ldd	r31, Y+7	; 0x07
    3a46:	88 a9       	ldd	r24, Y+48	; 0x30
    3a48:	80 83       	st	Z, r24
    3a4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a4e:	ad a5       	ldd	r26, Y+45	; 0x2d
    3a50:	be a5       	ldd	r27, Y+46	; 0x2e
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	a1 05       	cpc	r26, r1
    3a56:	b1 05       	cpc	r27, r1
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <_ZN5Print11printNumberEmh+0xd0>
    3a5a:	b7 cf       	rjmp	.-146    	; 0x39ca <_ZN5Print11printNumberEmh+0x3e>
    3a5c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a60:	2e 81       	ldd	r18, Y+6	; 0x06
    3a62:	3f 81       	ldd	r19, Y+7	; 0x07
    3a64:	b9 01       	movw	r22, r18
    3a66:	56 df       	rcall	.-340    	; 0x3914 <_ZN5Print5writeEPKc>
    3a68:	e0 96       	adiw	r28, 0x30	; 48
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	08 95       	ret

00003a7c <_ZN5Print5printEmi>:
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	2a 97       	sbiw	r28, 0x0a	; 10
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	4b 83       	std	Y+3, r20	; 0x03
    3a96:	5c 83       	std	Y+4, r21	; 0x04
    3a98:	6d 83       	std	Y+5, r22	; 0x05
    3a9a:	7e 83       	std	Y+6, r23	; 0x06
    3a9c:	38 87       	std	Y+8, r19	; 0x08
    3a9e:	2f 83       	std	Y+7, r18	; 0x07
    3aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    3aa2:	98 85       	ldd	r25, Y+8	; 0x08
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	81 f4       	brne	.+32     	; 0x3ac8 <_ZN5Print5printEmi+0x4c>
    3aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    3aac:	01 90       	ld	r0, Z+
    3aae:	f0 81       	ld	r31, Z
    3ab0:	e0 2d       	mov	r30, r0
    3ab2:	01 90       	ld	r0, Z+
    3ab4:	f0 81       	ld	r31, Z
    3ab6:	e0 2d       	mov	r30, r0
    3ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	9a 81       	ldd	r25, Y+2	; 0x02
    3abe:	62 2f       	mov	r22, r18
    3ac0:	09 95       	icall
    3ac2:	9a 87       	std	Y+10, r25	; 0x0a
    3ac4:	89 87       	std	Y+9, r24	; 0x09
    3ac6:	0d c0       	rjmp	.+26     	; 0x3ae2 <_ZN5Print5printEmi+0x66>
    3ac8:	ef 81       	ldd	r30, Y+7	; 0x07
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	2b 81       	ldd	r18, Y+3	; 0x03
    3ad0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ad2:	4d 81       	ldd	r20, Y+5	; 0x05
    3ad4:	5e 81       	ldd	r21, Y+6	; 0x06
    3ad6:	ba 01       	movw	r22, r20
    3ad8:	a9 01       	movw	r20, r18
    3ada:	2e 2f       	mov	r18, r30
    3adc:	57 df       	rcall	.-338    	; 0x398c <_ZN5Print11printNumberEmh>
    3ade:	9a 87       	std	Y+10, r25	; 0x0a
    3ae0:	89 87       	std	Y+9, r24	; 0x09
    3ae2:	89 85       	ldd	r24, Y+9	; 0x09
    3ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae6:	2a 96       	adiw	r28, 0x0a	; 10
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	08 95       	ret

00003af8 <_ZN5Print5printEhi>:
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <_ZN5Print5printEhi+0x6>
    3afe:	00 d0       	rcall	.+0      	; 0x3b00 <_ZN5Print5printEhi+0x8>
    3b00:	0f 92       	push	r0
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
    3b0a:	6b 83       	std	Y+3, r22	; 0x03
    3b0c:	5d 83       	std	Y+5, r21	; 0x05
    3b0e:	4c 83       	std	Y+4, r20	; 0x04
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e0       	ldi	r20, 0x00	; 0
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b20:	fd 81       	ldd	r31, Y+5	; 0x05
    3b22:	ba 01       	movw	r22, r20
    3b24:	a9 01       	movw	r20, r18
    3b26:	9f 01       	movw	r18, r30
    3b28:	a9 df       	rcall	.-174    	; 0x3a7c <_ZN5Print5printEmi>
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	cf 91       	pop	r28
    3b36:	df 91       	pop	r29
    3b38:	08 95       	ret

00003b3a <main>:
    3b3a:	df 93       	push	r29
    3b3c:	cf 93       	push	r28
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
    3b42:	c0 d0       	rcall	.+384    	; 0x3cc4 <init>
    3b44:	0e 94 c6 00 	call	0x18c	; 0x18c <setup>
    3b48:	0e 94 a5 00 	call	0x14a	; 0x14a <loop>
    3b4c:	81 e6       	ldi	r24, 0x61	; 97
    3b4e:	99 e1       	ldi	r25, 0x19	; 25
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	d1 f3       	breq	.-12     	; 0x3b48 <main+0xe>
    3b54:	b6 db       	rcall	.-2196   	; 0x32c2 <_Z14serialEventRunv>
    3b56:	f8 cf       	rjmp	.-16     	; 0x3b48 <main+0xe>

00003b58 <__cxa_pure_virtual>:
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <__vector_16>:
    3b66:	1f 92       	push	r1
    3b68:	0f 92       	push	r0
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	0f 92       	push	r0
    3b6e:	11 24       	eor	r1, r1
    3b70:	2f 93       	push	r18
    3b72:	3f 93       	push	r19
    3b74:	8f 93       	push	r24
    3b76:	9f 93       	push	r25
    3b78:	af 93       	push	r26
    3b7a:	bf 93       	push	r27
    3b7c:	80 91 e8 05 	lds	r24, 0x05E8
    3b80:	90 91 e9 05 	lds	r25, 0x05E9
    3b84:	a0 91 ea 05 	lds	r26, 0x05EA
    3b88:	b0 91 eb 05 	lds	r27, 0x05EB
    3b8c:	30 91 ec 05 	lds	r19, 0x05EC
    3b90:	01 96       	adiw	r24, 0x01	; 1
    3b92:	a1 1d       	adc	r26, r1
    3b94:	b1 1d       	adc	r27, r1
    3b96:	23 2f       	mov	r18, r19
    3b98:	2d 5f       	subi	r18, 0xFD	; 253
    3b9a:	2d 37       	cpi	r18, 0x7D	; 125
    3b9c:	20 f0       	brcs	.+8      	; 0x3ba6 <__vector_16+0x40>
    3b9e:	2d 57       	subi	r18, 0x7D	; 125
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	a1 1d       	adc	r26, r1
    3ba4:	b1 1d       	adc	r27, r1
    3ba6:	20 93 ec 05 	sts	0x05EC, r18
    3baa:	80 93 e8 05 	sts	0x05E8, r24
    3bae:	90 93 e9 05 	sts	0x05E9, r25
    3bb2:	a0 93 ea 05 	sts	0x05EA, r26
    3bb6:	b0 93 eb 05 	sts	0x05EB, r27
    3bba:	80 91 e4 05 	lds	r24, 0x05E4
    3bbe:	90 91 e5 05 	lds	r25, 0x05E5
    3bc2:	a0 91 e6 05 	lds	r26, 0x05E6
    3bc6:	b0 91 e7 05 	lds	r27, 0x05E7
    3bca:	01 96       	adiw	r24, 0x01	; 1
    3bcc:	a1 1d       	adc	r26, r1
    3bce:	b1 1d       	adc	r27, r1
    3bd0:	80 93 e4 05 	sts	0x05E4, r24
    3bd4:	90 93 e5 05 	sts	0x05E5, r25
    3bd8:	a0 93 e6 05 	sts	0x05E6, r26
    3bdc:	b0 93 e7 05 	sts	0x05E7, r27
    3be0:	bf 91       	pop	r27
    3be2:	af 91       	pop	r26
    3be4:	9f 91       	pop	r25
    3be6:	8f 91       	pop	r24
    3be8:	3f 91       	pop	r19
    3bea:	2f 91       	pop	r18
    3bec:	0f 90       	pop	r0
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	0f 90       	pop	r0
    3bf2:	1f 90       	pop	r1
    3bf4:	18 95       	reti

00003bf6 <millis>:
    3bf6:	8f b7       	in	r24, 0x3f	; 63
    3bf8:	f8 94       	cli
    3bfa:	20 91 e8 05 	lds	r18, 0x05E8
    3bfe:	30 91 e9 05 	lds	r19, 0x05E9
    3c02:	40 91 ea 05 	lds	r20, 0x05EA
    3c06:	50 91 eb 05 	lds	r21, 0x05EB
    3c0a:	8f bf       	out	0x3f, r24	; 63
    3c0c:	b9 01       	movw	r22, r18
    3c0e:	ca 01       	movw	r24, r20
    3c10:	08 95       	ret

00003c12 <delay>:
    3c12:	9b 01       	movw	r18, r22
    3c14:	ac 01       	movw	r20, r24
    3c16:	7f b7       	in	r23, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	80 91 e4 05 	lds	r24, 0x05E4
    3c1e:	90 91 e5 05 	lds	r25, 0x05E5
    3c22:	a0 91 e6 05 	lds	r26, 0x05E6
    3c26:	b0 91 e7 05 	lds	r27, 0x05E7
    3c2a:	66 b5       	in	r22, 0x26	; 38
    3c2c:	a8 9b       	sbis	0x15, 0	; 21
    3c2e:	05 c0       	rjmp	.+10     	; 0x3c3a <delay+0x28>
    3c30:	6f 3f       	cpi	r22, 0xFF	; 255
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <delay+0x28>
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	a1 1d       	adc	r26, r1
    3c38:	b1 1d       	adc	r27, r1
    3c3a:	7f bf       	out	0x3f, r23	; 63
    3c3c:	ba 2f       	mov	r27, r26
    3c3e:	a9 2f       	mov	r26, r25
    3c40:	98 2f       	mov	r25, r24
    3c42:	88 27       	eor	r24, r24
    3c44:	86 0f       	add	r24, r22
    3c46:	91 1d       	adc	r25, r1
    3c48:	a1 1d       	adc	r26, r1
    3c4a:	b1 1d       	adc	r27, r1
    3c4c:	62 e0       	ldi	r22, 0x02	; 2
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	aa 1f       	adc	r26, r26
    3c54:	bb 1f       	adc	r27, r27
    3c56:	6a 95       	dec	r22
    3c58:	d1 f7       	brne	.-12     	; 0x3c4e <delay+0x3c>
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	2d c0       	rjmp	.+90     	; 0x3cb8 <delay+0xa6>
    3c5e:	ff b7       	in	r31, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	80 91 e4 05 	lds	r24, 0x05E4
    3c66:	90 91 e5 05 	lds	r25, 0x05E5
    3c6a:	a0 91 e6 05 	lds	r26, 0x05E6
    3c6e:	b0 91 e7 05 	lds	r27, 0x05E7
    3c72:	e6 b5       	in	r30, 0x26	; 38
    3c74:	a8 9b       	sbis	0x15, 0	; 21
    3c76:	05 c0       	rjmp	.+10     	; 0x3c82 <delay+0x70>
    3c78:	ef 3f       	cpi	r30, 0xFF	; 255
    3c7a:	19 f0       	breq	.+6      	; 0x3c82 <delay+0x70>
    3c7c:	01 96       	adiw	r24, 0x01	; 1
    3c7e:	a1 1d       	adc	r26, r1
    3c80:	b1 1d       	adc	r27, r1
    3c82:	ff bf       	out	0x3f, r31	; 63
    3c84:	ba 2f       	mov	r27, r26
    3c86:	a9 2f       	mov	r26, r25
    3c88:	98 2f       	mov	r25, r24
    3c8a:	88 27       	eor	r24, r24
    3c8c:	8e 0f       	add	r24, r30
    3c8e:	91 1d       	adc	r25, r1
    3c90:	a1 1d       	adc	r26, r1
    3c92:	b1 1d       	adc	r27, r1
    3c94:	e2 e0       	ldi	r30, 0x02	; 2
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	aa 1f       	adc	r26, r26
    3c9c:	bb 1f       	adc	r27, r27
    3c9e:	ea 95       	dec	r30
    3ca0:	d1 f7       	brne	.-12     	; 0x3c96 <delay+0x84>
    3ca2:	86 1b       	sub	r24, r22
    3ca4:	97 0b       	sbc	r25, r23
    3ca6:	88 5e       	subi	r24, 0xE8	; 232
    3ca8:	93 40       	sbci	r25, 0x03	; 3
    3caa:	c8 f2       	brcs	.-78     	; 0x3c5e <delay+0x4c>
    3cac:	21 50       	subi	r18, 0x01	; 1
    3cae:	30 40       	sbci	r19, 0x00	; 0
    3cb0:	40 40       	sbci	r20, 0x00	; 0
    3cb2:	50 40       	sbci	r21, 0x00	; 0
    3cb4:	68 51       	subi	r22, 0x18	; 24
    3cb6:	7c 4f       	sbci	r23, 0xFC	; 252
    3cb8:	21 15       	cp	r18, r1
    3cba:	31 05       	cpc	r19, r1
    3cbc:	41 05       	cpc	r20, r1
    3cbe:	51 05       	cpc	r21, r1
    3cc0:	71 f6       	brne	.-100    	; 0x3c5e <delay+0x4c>
    3cc2:	08 95       	ret

00003cc4 <init>:
    3cc4:	78 94       	sei
    3cc6:	84 b5       	in	r24, 0x24	; 36
    3cc8:	82 60       	ori	r24, 0x02	; 2
    3cca:	84 bd       	out	0x24, r24	; 36
    3ccc:	84 b5       	in	r24, 0x24	; 36
    3cce:	81 60       	ori	r24, 0x01	; 1
    3cd0:	84 bd       	out	0x24, r24	; 36
    3cd2:	85 b5       	in	r24, 0x25	; 37
    3cd4:	82 60       	ori	r24, 0x02	; 2
    3cd6:	85 bd       	out	0x25, r24	; 37
    3cd8:	85 b5       	in	r24, 0x25	; 37
    3cda:	81 60       	ori	r24, 0x01	; 1
    3cdc:	85 bd       	out	0x25, r24	; 37
    3cde:	ee e6       	ldi	r30, 0x6E	; 110
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	81 60       	ori	r24, 0x01	; 1
    3ce6:	80 83       	st	Z, r24
    3ce8:	e1 e8       	ldi	r30, 0x81	; 129
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	10 82       	st	Z, r1
    3cee:	80 81       	ld	r24, Z
    3cf0:	82 60       	ori	r24, 0x02	; 2
    3cf2:	80 83       	st	Z, r24
    3cf4:	80 81       	ld	r24, Z
    3cf6:	81 60       	ori	r24, 0x01	; 1
    3cf8:	80 83       	st	Z, r24
    3cfa:	e0 e8       	ldi	r30, 0x80	; 128
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	80 81       	ld	r24, Z
    3d00:	81 60       	ori	r24, 0x01	; 1
    3d02:	80 83       	st	Z, r24
    3d04:	e1 eb       	ldi	r30, 0xB1	; 177
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	84 60       	ori	r24, 0x04	; 4
    3d0c:	80 83       	st	Z, r24
    3d0e:	e0 eb       	ldi	r30, 0xB0	; 176
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	81 60       	ori	r24, 0x01	; 1
    3d16:	80 83       	st	Z, r24
    3d18:	ea e7       	ldi	r30, 0x7A	; 122
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	84 60       	ori	r24, 0x04	; 4
    3d20:	80 83       	st	Z, r24
    3d22:	80 81       	ld	r24, Z
    3d24:	82 60       	ori	r24, 0x02	; 2
    3d26:	80 83       	st	Z, r24
    3d28:	80 81       	ld	r24, Z
    3d2a:	81 60       	ori	r24, 0x01	; 1
    3d2c:	80 83       	st	Z, r24
    3d2e:	80 81       	ld	r24, Z
    3d30:	80 68       	ori	r24, 0x80	; 128
    3d32:	80 83       	st	Z, r24
    3d34:	10 92 c1 00 	sts	0x00C1, r1
    3d38:	08 95       	ret

00003d3a <pinMode>:
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	48 2f       	mov	r20, r24
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	ca 01       	movw	r24, r20
    3d44:	86 56       	subi	r24, 0x66	; 102
    3d46:	9f 4f       	sbci	r25, 0xFF	; 255
    3d48:	fc 01       	movw	r30, r24
    3d4a:	34 91       	lpm	r19, Z+
    3d4c:	4a 57       	subi	r20, 0x7A	; 122
    3d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d50:	fa 01       	movw	r30, r20
    3d52:	84 91       	lpm	r24, Z+
    3d54:	88 23       	and	r24, r24
    3d56:	69 f1       	breq	.+90     	; 0x3db2 <pinMode+0x78>
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e8 59       	subi	r30, 0x98	; 152
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	a5 91       	lpm	r26, Z+
    3d66:	b4 91       	lpm	r27, Z+
    3d68:	fc 01       	movw	r30, r24
    3d6a:	ee 58       	subi	r30, 0x8E	; 142
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	c5 91       	lpm	r28, Z+
    3d70:	d4 91       	lpm	r29, Z+
    3d72:	66 23       	and	r22, r22
    3d74:	51 f4       	brne	.+20     	; 0x3d8a <pinMode+0x50>
    3d76:	2f b7       	in	r18, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	8c 91       	ld	r24, X
    3d7c:	93 2f       	mov	r25, r19
    3d7e:	90 95       	com	r25
    3d80:	89 23       	and	r24, r25
    3d82:	8c 93       	st	X, r24
    3d84:	88 81       	ld	r24, Y
    3d86:	89 23       	and	r24, r25
    3d88:	0b c0       	rjmp	.+22     	; 0x3da0 <pinMode+0x66>
    3d8a:	62 30       	cpi	r22, 0x02	; 2
    3d8c:	61 f4       	brne	.+24     	; 0x3da6 <pinMode+0x6c>
    3d8e:	2f b7       	in	r18, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	8c 91       	ld	r24, X
    3d94:	93 2f       	mov	r25, r19
    3d96:	90 95       	com	r25
    3d98:	89 23       	and	r24, r25
    3d9a:	8c 93       	st	X, r24
    3d9c:	88 81       	ld	r24, Y
    3d9e:	83 2b       	or	r24, r19
    3da0:	88 83       	st	Y, r24
    3da2:	2f bf       	out	0x3f, r18	; 63
    3da4:	06 c0       	rjmp	.+12     	; 0x3db2 <pinMode+0x78>
    3da6:	9f b7       	in	r25, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	8c 91       	ld	r24, X
    3dac:	83 2b       	or	r24, r19
    3dae:	8c 93       	st	X, r24
    3db0:	9f bf       	out	0x3f, r25	; 63
    3db2:	df 91       	pop	r29
    3db4:	cf 91       	pop	r28
    3db6:	08 95       	ret

00003db8 <digitalWrite>:
    3db8:	48 2f       	mov	r20, r24
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	ca 01       	movw	r24, r20
    3dbe:	82 55       	subi	r24, 0x52	; 82
    3dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	24 91       	lpm	r18, Z+
    3dc6:	ca 01       	movw	r24, r20
    3dc8:	86 56       	subi	r24, 0x66	; 102
    3dca:	9f 4f       	sbci	r25, 0xFF	; 255
    3dcc:	fc 01       	movw	r30, r24
    3dce:	94 91       	lpm	r25, Z+
    3dd0:	4a 57       	subi	r20, 0x7A	; 122
    3dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd4:	fa 01       	movw	r30, r20
    3dd6:	34 91       	lpm	r19, Z+
    3dd8:	33 23       	and	r19, r19
    3dda:	09 f4       	brne	.+2      	; 0x3dde <digitalWrite+0x26>
    3ddc:	40 c0       	rjmp	.+128    	; 0x3e5e <digitalWrite+0xa6>
    3dde:	22 23       	and	r18, r18
    3de0:	51 f1       	breq	.+84     	; 0x3e36 <digitalWrite+0x7e>
    3de2:	23 30       	cpi	r18, 0x03	; 3
    3de4:	71 f0       	breq	.+28     	; 0x3e02 <digitalWrite+0x4a>
    3de6:	24 30       	cpi	r18, 0x04	; 4
    3de8:	28 f4       	brcc	.+10     	; 0x3df4 <digitalWrite+0x3c>
    3dea:	21 30       	cpi	r18, 0x01	; 1
    3dec:	a1 f0       	breq	.+40     	; 0x3e16 <digitalWrite+0x5e>
    3dee:	22 30       	cpi	r18, 0x02	; 2
    3df0:	11 f5       	brne	.+68     	; 0x3e36 <digitalWrite+0x7e>
    3df2:	14 c0       	rjmp	.+40     	; 0x3e1c <digitalWrite+0x64>
    3df4:	26 30       	cpi	r18, 0x06	; 6
    3df6:	b1 f0       	breq	.+44     	; 0x3e24 <digitalWrite+0x6c>
    3df8:	27 30       	cpi	r18, 0x07	; 7
    3dfa:	c1 f0       	breq	.+48     	; 0x3e2c <digitalWrite+0x74>
    3dfc:	24 30       	cpi	r18, 0x04	; 4
    3dfe:	d9 f4       	brne	.+54     	; 0x3e36 <digitalWrite+0x7e>
    3e00:	04 c0       	rjmp	.+8      	; 0x3e0a <digitalWrite+0x52>
    3e02:	80 91 80 00 	lds	r24, 0x0080
    3e06:	8f 77       	andi	r24, 0x7F	; 127
    3e08:	03 c0       	rjmp	.+6      	; 0x3e10 <digitalWrite+0x58>
    3e0a:	80 91 80 00 	lds	r24, 0x0080
    3e0e:	8f 7d       	andi	r24, 0xDF	; 223
    3e10:	80 93 80 00 	sts	0x0080, r24
    3e14:	10 c0       	rjmp	.+32     	; 0x3e36 <digitalWrite+0x7e>
    3e16:	84 b5       	in	r24, 0x24	; 36
    3e18:	8f 77       	andi	r24, 0x7F	; 127
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <digitalWrite+0x68>
    3e1c:	84 b5       	in	r24, 0x24	; 36
    3e1e:	8f 7d       	andi	r24, 0xDF	; 223
    3e20:	84 bd       	out	0x24, r24	; 36
    3e22:	09 c0       	rjmp	.+18     	; 0x3e36 <digitalWrite+0x7e>
    3e24:	80 91 b0 00 	lds	r24, 0x00B0
    3e28:	8f 77       	andi	r24, 0x7F	; 127
    3e2a:	03 c0       	rjmp	.+6      	; 0x3e32 <digitalWrite+0x7a>
    3e2c:	80 91 b0 00 	lds	r24, 0x00B0
    3e30:	8f 7d       	andi	r24, 0xDF	; 223
    3e32:	80 93 b0 00 	sts	0x00B0, r24
    3e36:	e3 2f       	mov	r30, r19
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	ee 0f       	add	r30, r30
    3e3c:	ff 1f       	adc	r31, r31
    3e3e:	ee 58       	subi	r30, 0x8E	; 142
    3e40:	ff 4f       	sbci	r31, 0xFF	; 255
    3e42:	a5 91       	lpm	r26, Z+
    3e44:	b4 91       	lpm	r27, Z+
    3e46:	2f b7       	in	r18, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	66 23       	and	r22, r22
    3e4c:	21 f4       	brne	.+8      	; 0x3e56 <digitalWrite+0x9e>
    3e4e:	8c 91       	ld	r24, X
    3e50:	90 95       	com	r25
    3e52:	89 23       	and	r24, r25
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <digitalWrite+0xa2>
    3e56:	8c 91       	ld	r24, X
    3e58:	89 2b       	or	r24, r25
    3e5a:	8c 93       	st	X, r24
    3e5c:	2f bf       	out	0x3f, r18	; 63
    3e5e:	08 95       	ret

00003e60 <__mulsi3>:
    3e60:	62 9f       	mul	r22, r18
    3e62:	d0 01       	movw	r26, r0
    3e64:	73 9f       	mul	r23, r19
    3e66:	f0 01       	movw	r30, r0
    3e68:	82 9f       	mul	r24, r18
    3e6a:	e0 0d       	add	r30, r0
    3e6c:	f1 1d       	adc	r31, r1
    3e6e:	64 9f       	mul	r22, r20
    3e70:	e0 0d       	add	r30, r0
    3e72:	f1 1d       	adc	r31, r1
    3e74:	92 9f       	mul	r25, r18
    3e76:	f0 0d       	add	r31, r0
    3e78:	83 9f       	mul	r24, r19
    3e7a:	f0 0d       	add	r31, r0
    3e7c:	74 9f       	mul	r23, r20
    3e7e:	f0 0d       	add	r31, r0
    3e80:	65 9f       	mul	r22, r21
    3e82:	f0 0d       	add	r31, r0
    3e84:	99 27       	eor	r25, r25
    3e86:	72 9f       	mul	r23, r18
    3e88:	b0 0d       	add	r27, r0
    3e8a:	e1 1d       	adc	r30, r1
    3e8c:	f9 1f       	adc	r31, r25
    3e8e:	63 9f       	mul	r22, r19
    3e90:	b0 0d       	add	r27, r0
    3e92:	e1 1d       	adc	r30, r1
    3e94:	f9 1f       	adc	r31, r25
    3e96:	bd 01       	movw	r22, r26
    3e98:	cf 01       	movw	r24, r30
    3e9a:	11 24       	eor	r1, r1
    3e9c:	08 95       	ret

00003e9e <__divmodhi4>:
    3e9e:	97 fb       	bst	r25, 7
    3ea0:	09 2e       	mov	r0, r25
    3ea2:	07 26       	eor	r0, r23
    3ea4:	0a d0       	rcall	.+20     	; 0x3eba <__divmodhi4_neg1>
    3ea6:	77 fd       	sbrc	r23, 7
    3ea8:	04 d0       	rcall	.+8      	; 0x3eb2 <__divmodhi4_neg2>
    3eaa:	2e d0       	rcall	.+92     	; 0x3f08 <__udivmodhi4>
    3eac:	06 d0       	rcall	.+12     	; 0x3eba <__divmodhi4_neg1>
    3eae:	00 20       	and	r0, r0
    3eb0:	1a f4       	brpl	.+6      	; 0x3eb8 <__divmodhi4_exit>

00003eb2 <__divmodhi4_neg2>:
    3eb2:	70 95       	com	r23
    3eb4:	61 95       	neg	r22
    3eb6:	7f 4f       	sbci	r23, 0xFF	; 255

00003eb8 <__divmodhi4_exit>:
    3eb8:	08 95       	ret

00003eba <__divmodhi4_neg1>:
    3eba:	f6 f7       	brtc	.-4      	; 0x3eb8 <__divmodhi4_exit>
    3ebc:	90 95       	com	r25
    3ebe:	81 95       	neg	r24
    3ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec2:	08 95       	ret

00003ec4 <__udivmodsi4>:
    3ec4:	a1 e2       	ldi	r26, 0x21	; 33
    3ec6:	1a 2e       	mov	r1, r26
    3ec8:	aa 1b       	sub	r26, r26
    3eca:	bb 1b       	sub	r27, r27
    3ecc:	fd 01       	movw	r30, r26
    3ece:	0d c0       	rjmp	.+26     	; 0x3eea <__udivmodsi4_ep>

00003ed0 <__udivmodsi4_loop>:
    3ed0:	aa 1f       	adc	r26, r26
    3ed2:	bb 1f       	adc	r27, r27
    3ed4:	ee 1f       	adc	r30, r30
    3ed6:	ff 1f       	adc	r31, r31
    3ed8:	a2 17       	cp	r26, r18
    3eda:	b3 07       	cpc	r27, r19
    3edc:	e4 07       	cpc	r30, r20
    3ede:	f5 07       	cpc	r31, r21
    3ee0:	20 f0       	brcs	.+8      	; 0x3eea <__udivmodsi4_ep>
    3ee2:	a2 1b       	sub	r26, r18
    3ee4:	b3 0b       	sbc	r27, r19
    3ee6:	e4 0b       	sbc	r30, r20
    3ee8:	f5 0b       	sbc	r31, r21

00003eea <__udivmodsi4_ep>:
    3eea:	66 1f       	adc	r22, r22
    3eec:	77 1f       	adc	r23, r23
    3eee:	88 1f       	adc	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	1a 94       	dec	r1
    3ef4:	69 f7       	brne	.-38     	; 0x3ed0 <__udivmodsi4_loop>
    3ef6:	60 95       	com	r22
    3ef8:	70 95       	com	r23
    3efa:	80 95       	com	r24
    3efc:	90 95       	com	r25
    3efe:	9b 01       	movw	r18, r22
    3f00:	ac 01       	movw	r20, r24
    3f02:	bd 01       	movw	r22, r26
    3f04:	cf 01       	movw	r24, r30
    3f06:	08 95       	ret

00003f08 <__udivmodhi4>:
    3f08:	aa 1b       	sub	r26, r26
    3f0a:	bb 1b       	sub	r27, r27
    3f0c:	51 e1       	ldi	r21, 0x11	; 17
    3f0e:	07 c0       	rjmp	.+14     	; 0x3f1e <__udivmodhi4_ep>

00003f10 <__udivmodhi4_loop>:
    3f10:	aa 1f       	adc	r26, r26
    3f12:	bb 1f       	adc	r27, r27
    3f14:	a6 17       	cp	r26, r22
    3f16:	b7 07       	cpc	r27, r23
    3f18:	10 f0       	brcs	.+4      	; 0x3f1e <__udivmodhi4_ep>
    3f1a:	a6 1b       	sub	r26, r22
    3f1c:	b7 0b       	sbc	r27, r23

00003f1e <__udivmodhi4_ep>:
    3f1e:	88 1f       	adc	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	5a 95       	dec	r21
    3f24:	a9 f7       	brne	.-22     	; 0x3f10 <__udivmodhi4_loop>
    3f26:	80 95       	com	r24
    3f28:	90 95       	com	r25
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	08 95       	ret

00003f30 <__tablejump2__>:
    3f30:	ee 0f       	add	r30, r30
    3f32:	ff 1f       	adc	r31, r31

00003f34 <__tablejump__>:
    3f34:	05 90       	lpm	r0, Z+
    3f36:	f4 91       	lpm	r31, Z+
    3f38:	e0 2d       	mov	r30, r0
    3f3a:	09 94       	ijmp

00003f3c <_exit>:
    3f3c:	f8 94       	cli

00003f3e <__stop_program>:
    3f3e:	ff cf       	rjmp	.-2      	; 0x3f3e <__stop_program>
